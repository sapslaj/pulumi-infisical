// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type Identity struct {
	pulumi.CustomResourceState

	// The authentication types of the identity
	AuthModes pulumi.StringArrayOutput `pulumi:"authModes"`
	// Whether the identity has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolOutput `pulumi:"hasDeleteProtection"`
	// The metadata associated with this identity
	Metadatas IdentityMetadataArrayOutput `pulumi:"metadatas"`
	// The name for the identity
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the organization for the identity
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewIdentity registers a new resource with the given unique name, arguments, and options.
func NewIdentity(ctx *pulumi.Context,
	name string, args *IdentityArgs, opts ...pulumi.ResourceOption) (*Identity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Identity
	err := ctx.RegisterResource("infisical:index/identity:Identity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentity gets an existing Identity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityState, opts ...pulumi.ResourceOption) (*Identity, error) {
	var resource Identity
	err := ctx.ReadResource("infisical:index/identity:Identity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Identity resources.
type identityState struct {
	// The authentication types of the identity
	AuthModes []string `pulumi:"authModes"`
	// Whether the identity has delete protection, defaults to false
	HasDeleteProtection *bool `pulumi:"hasDeleteProtection"`
	// The metadata associated with this identity
	Metadatas []IdentityMetadata `pulumi:"metadatas"`
	// The name for the identity
	Name *string `pulumi:"name"`
	// The ID of the organization for the identity
	OrgId *string `pulumi:"orgId"`
	// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
	Role *string `pulumi:"role"`
}

type IdentityState struct {
	// The authentication types of the identity
	AuthModes pulumi.StringArrayInput
	// Whether the identity has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolPtrInput
	// The metadata associated with this identity
	Metadatas IdentityMetadataArrayInput
	// The name for the identity
	Name pulumi.StringPtrInput
	// The ID of the organization for the identity
	OrgId pulumi.StringPtrInput
	// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
	Role pulumi.StringPtrInput
}

func (IdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityState)(nil)).Elem()
}

type identityArgs struct {
	// Whether the identity has delete protection, defaults to false
	HasDeleteProtection *bool `pulumi:"hasDeleteProtection"`
	// The metadata associated with this identity
	Metadatas []IdentityMetadata `pulumi:"metadatas"`
	// The name for the identity
	Name *string `pulumi:"name"`
	// The ID of the organization for the identity
	OrgId string `pulumi:"orgId"`
	// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a Identity resource.
type IdentityArgs struct {
	// Whether the identity has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolPtrInput
	// The metadata associated with this identity
	Metadatas IdentityMetadataArrayInput
	// The name for the identity
	Name pulumi.StringPtrInput
	// The ID of the organization for the identity
	OrgId pulumi.StringInput
	// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
	Role pulumi.StringInput
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityArgs)(nil)).Elem()
}

type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(ctx context.Context) IdentityOutput
}

func (*Identity) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *Identity) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i *Identity) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

// IdentityArrayInput is an input type that accepts IdentityArray and IdentityArrayOutput values.
// You can construct a concrete instance of `IdentityArrayInput` via:
//
//	IdentityArray{ IdentityArgs{...} }
type IdentityArrayInput interface {
	pulumi.Input

	ToIdentityArrayOutput() IdentityArrayOutput
	ToIdentityArrayOutputWithContext(context.Context) IdentityArrayOutput
}

type IdentityArray []IdentityInput

func (IdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Identity)(nil)).Elem()
}

func (i IdentityArray) ToIdentityArrayOutput() IdentityArrayOutput {
	return i.ToIdentityArrayOutputWithContext(context.Background())
}

func (i IdentityArray) ToIdentityArrayOutputWithContext(ctx context.Context) IdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityArrayOutput)
}

// IdentityMapInput is an input type that accepts IdentityMap and IdentityMapOutput values.
// You can construct a concrete instance of `IdentityMapInput` via:
//
//	IdentityMap{ "key": IdentityArgs{...} }
type IdentityMapInput interface {
	pulumi.Input

	ToIdentityMapOutput() IdentityMapOutput
	ToIdentityMapOutputWithContext(context.Context) IdentityMapOutput
}

type IdentityMap map[string]IdentityInput

func (IdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Identity)(nil)).Elem()
}

func (i IdentityMap) ToIdentityMapOutput() IdentityMapOutput {
	return i.ToIdentityMapOutputWithContext(context.Background())
}

func (i IdentityMap) ToIdentityMapOutputWithContext(ctx context.Context) IdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityMapOutput)
}

type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

// The authentication types of the identity
func (o IdentityOutput) AuthModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringArrayOutput { return v.AuthModes }).(pulumi.StringArrayOutput)
}

// Whether the identity has delete protection, defaults to false
func (o IdentityOutput) HasDeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Identity) pulumi.BoolOutput { return v.HasDeleteProtection }).(pulumi.BoolOutput)
}

// The metadata associated with this identity
func (o IdentityOutput) Metadatas() IdentityMetadataArrayOutput {
	return o.ApplyT(func(v *Identity) IdentityMetadataArrayOutput { return v.Metadatas }).(IdentityMetadataArrayOutput)
}

// The name for the identity
func (o IdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the organization for the identity
func (o IdentityOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
func (o IdentityOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Identity) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type IdentityArrayOutput struct{ *pulumi.OutputState }

func (IdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Identity)(nil)).Elem()
}

func (o IdentityArrayOutput) ToIdentityArrayOutput() IdentityArrayOutput {
	return o
}

func (o IdentityArrayOutput) ToIdentityArrayOutputWithContext(ctx context.Context) IdentityArrayOutput {
	return o
}

func (o IdentityArrayOutput) Index(i pulumi.IntInput) IdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Identity {
		return vs[0].([]*Identity)[vs[1].(int)]
	}).(IdentityOutput)
}

type IdentityMapOutput struct{ *pulumi.OutputState }

func (IdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Identity)(nil)).Elem()
}

func (o IdentityMapOutput) ToIdentityMapOutput() IdentityMapOutput {
	return o
}

func (o IdentityMapOutput) ToIdentityMapOutputWithContext(ctx context.Context) IdentityMapOutput {
	return o
}

func (o IdentityMapOutput) MapIndex(k pulumi.StringInput) IdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Identity {
		return vs[0].(map[string]*Identity)[vs[1].(string)]
	}).(IdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityInput)(nil)).Elem(), &Identity{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityArrayInput)(nil)).Elem(), IdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityMapInput)(nil)).Elem(), IdentityMap{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityArrayOutput{})
	pulumi.RegisterOutputType(IdentityMapOutput{})
}
