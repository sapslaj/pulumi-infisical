// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionFlyio struct {
	pulumi.CustomResourceState

	// The credentials for the Fly.io App Connection
	Credentials AppConnectionFlyioCredentialsOutput `pulumi:"credentials"`
	// The hash of the Fly.io App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the Fly.io App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with Fly.io. Possible values are: access-token
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the Fly.io App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionFlyio registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionFlyio(ctx *pulumi.Context,
	name string, args *AppConnectionFlyioArgs, opts ...pulumi.ResourceOption) (*AppConnectionFlyio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionFlyio
	err := ctx.RegisterResource("infisical:index/appConnectionFlyio:AppConnectionFlyio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionFlyio gets an existing AppConnectionFlyio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionFlyio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionFlyioState, opts ...pulumi.ResourceOption) (*AppConnectionFlyio, error) {
	var resource AppConnectionFlyio
	err := ctx.ReadResource("infisical:index/appConnectionFlyio:AppConnectionFlyio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionFlyio resources.
type appConnectionFlyioState struct {
	// The credentials for the Fly.io App Connection
	Credentials *AppConnectionFlyioCredentials `pulumi:"credentials"`
	// The hash of the Fly.io App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the Fly.io App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Fly.io. Possible values are: access-token
	Method *string `pulumi:"method"`
	// The name of the Fly.io App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionFlyioState struct {
	// The credentials for the Fly.io App Connection
	Credentials AppConnectionFlyioCredentialsPtrInput
	// The hash of the Fly.io App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the Fly.io App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Fly.io. Possible values are: access-token
	Method pulumi.StringPtrInput
	// The name of the Fly.io App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionFlyioState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionFlyioState)(nil)).Elem()
}

type appConnectionFlyioArgs struct {
	// The credentials for the Fly.io App Connection
	Credentials AppConnectionFlyioCredentials `pulumi:"credentials"`
	// An optional description for the Fly.io App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Fly.io. Possible values are: access-token
	Method string `pulumi:"method"`
	// The name of the Fly.io App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionFlyio resource.
type AppConnectionFlyioArgs struct {
	// The credentials for the Fly.io App Connection
	Credentials AppConnectionFlyioCredentialsInput
	// An optional description for the Fly.io App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Fly.io. Possible values are: access-token
	Method pulumi.StringInput
	// The name of the Fly.io App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionFlyioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionFlyioArgs)(nil)).Elem()
}

type AppConnectionFlyioInput interface {
	pulumi.Input

	ToAppConnectionFlyioOutput() AppConnectionFlyioOutput
	ToAppConnectionFlyioOutputWithContext(ctx context.Context) AppConnectionFlyioOutput
}

func (*AppConnectionFlyio) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionFlyio)(nil)).Elem()
}

func (i *AppConnectionFlyio) ToAppConnectionFlyioOutput() AppConnectionFlyioOutput {
	return i.ToAppConnectionFlyioOutputWithContext(context.Background())
}

func (i *AppConnectionFlyio) ToAppConnectionFlyioOutputWithContext(ctx context.Context) AppConnectionFlyioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionFlyioOutput)
}

// AppConnectionFlyioArrayInput is an input type that accepts AppConnectionFlyioArray and AppConnectionFlyioArrayOutput values.
// You can construct a concrete instance of `AppConnectionFlyioArrayInput` via:
//
//	AppConnectionFlyioArray{ AppConnectionFlyioArgs{...} }
type AppConnectionFlyioArrayInput interface {
	pulumi.Input

	ToAppConnectionFlyioArrayOutput() AppConnectionFlyioArrayOutput
	ToAppConnectionFlyioArrayOutputWithContext(context.Context) AppConnectionFlyioArrayOutput
}

type AppConnectionFlyioArray []AppConnectionFlyioInput

func (AppConnectionFlyioArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionFlyio)(nil)).Elem()
}

func (i AppConnectionFlyioArray) ToAppConnectionFlyioArrayOutput() AppConnectionFlyioArrayOutput {
	return i.ToAppConnectionFlyioArrayOutputWithContext(context.Background())
}

func (i AppConnectionFlyioArray) ToAppConnectionFlyioArrayOutputWithContext(ctx context.Context) AppConnectionFlyioArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionFlyioArrayOutput)
}

// AppConnectionFlyioMapInput is an input type that accepts AppConnectionFlyioMap and AppConnectionFlyioMapOutput values.
// You can construct a concrete instance of `AppConnectionFlyioMapInput` via:
//
//	AppConnectionFlyioMap{ "key": AppConnectionFlyioArgs{...} }
type AppConnectionFlyioMapInput interface {
	pulumi.Input

	ToAppConnectionFlyioMapOutput() AppConnectionFlyioMapOutput
	ToAppConnectionFlyioMapOutputWithContext(context.Context) AppConnectionFlyioMapOutput
}

type AppConnectionFlyioMap map[string]AppConnectionFlyioInput

func (AppConnectionFlyioMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionFlyio)(nil)).Elem()
}

func (i AppConnectionFlyioMap) ToAppConnectionFlyioMapOutput() AppConnectionFlyioMapOutput {
	return i.ToAppConnectionFlyioMapOutputWithContext(context.Background())
}

func (i AppConnectionFlyioMap) ToAppConnectionFlyioMapOutputWithContext(ctx context.Context) AppConnectionFlyioMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionFlyioMapOutput)
}

type AppConnectionFlyioOutput struct{ *pulumi.OutputState }

func (AppConnectionFlyioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionFlyio)(nil)).Elem()
}

func (o AppConnectionFlyioOutput) ToAppConnectionFlyioOutput() AppConnectionFlyioOutput {
	return o
}

func (o AppConnectionFlyioOutput) ToAppConnectionFlyioOutputWithContext(ctx context.Context) AppConnectionFlyioOutput {
	return o
}

// The credentials for the Fly.io App Connection
func (o AppConnectionFlyioOutput) Credentials() AppConnectionFlyioCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionFlyio) AppConnectionFlyioCredentialsOutput { return v.Credentials }).(AppConnectionFlyioCredentialsOutput)
}

// The hash of the Fly.io App Connection credentials
func (o AppConnectionFlyioOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionFlyio) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the Fly.io App Connection.
func (o AppConnectionFlyioOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionFlyio) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with Fly.io. Possible values are: access-token
func (o AppConnectionFlyioOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionFlyio) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the Fly.io App Connection to create. Must be slug-friendly
func (o AppConnectionFlyioOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionFlyio) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionFlyioArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionFlyioArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionFlyio)(nil)).Elem()
}

func (o AppConnectionFlyioArrayOutput) ToAppConnectionFlyioArrayOutput() AppConnectionFlyioArrayOutput {
	return o
}

func (o AppConnectionFlyioArrayOutput) ToAppConnectionFlyioArrayOutputWithContext(ctx context.Context) AppConnectionFlyioArrayOutput {
	return o
}

func (o AppConnectionFlyioArrayOutput) Index(i pulumi.IntInput) AppConnectionFlyioOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionFlyio {
		return vs[0].([]*AppConnectionFlyio)[vs[1].(int)]
	}).(AppConnectionFlyioOutput)
}

type AppConnectionFlyioMapOutput struct{ *pulumi.OutputState }

func (AppConnectionFlyioMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionFlyio)(nil)).Elem()
}

func (o AppConnectionFlyioMapOutput) ToAppConnectionFlyioMapOutput() AppConnectionFlyioMapOutput {
	return o
}

func (o AppConnectionFlyioMapOutput) ToAppConnectionFlyioMapOutputWithContext(ctx context.Context) AppConnectionFlyioMapOutput {
	return o
}

func (o AppConnectionFlyioMapOutput) MapIndex(k pulumi.StringInput) AppConnectionFlyioOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionFlyio {
		return vs[0].(map[string]*AppConnectionFlyio)[vs[1].(string)]
	}).(AppConnectionFlyioOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionFlyioInput)(nil)).Elem(), &AppConnectionFlyio{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionFlyioArrayInput)(nil)).Elem(), AppConnectionFlyioArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionFlyioMapInput)(nil)).Elem(), AppConnectionFlyioMap{})
	pulumi.RegisterOutputType(AppConnectionFlyioOutput{})
	pulumi.RegisterOutputType(AppConnectionFlyioArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionFlyioMapOutput{})
}
