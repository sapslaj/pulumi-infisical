// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IntegrationAwsParameterStore struct {
	pulumi.CustomResourceState

	// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrOutput `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrOutput `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringOutput `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringOutput `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// Integration options
	Options IntegrationAwsParameterStoreOptionsOutput `pulumi:"options"`
	// The path in AWS Parameter Store to sync secrets to.
	ParameterStorePath pulumi.StringOutput `pulumi:"parameterStorePath"`
	// The ID of your Infisical project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrOutput `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
}

// NewIntegrationAwsParameterStore registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAwsParameterStore(ctx *pulumi.Context,
	name string, args *IntegrationAwsParameterStoreArgs, opts ...pulumi.ResourceOption) (*IntegrationAwsParameterStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRegion == nil {
		return nil, errors.New("invalid value for required argument 'AwsRegion'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ParameterStorePath == nil {
		return nil, errors.New("invalid value for required argument 'ParameterStorePath'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.AccessKeyId != nil {
		args.AccessKeyId = pulumi.ToSecret(args.AccessKeyId).(pulumi.StringPtrInput)
	}
	if args.SecretAccessKey != nil {
		args.SecretAccessKey = pulumi.ToSecret(args.SecretAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKeyId",
		"secretAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAwsParameterStore
	err := ctx.RegisterResource("infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAwsParameterStore gets an existing IntegrationAwsParameterStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAwsParameterStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAwsParameterStoreState, opts ...pulumi.ResourceOption) (*IntegrationAwsParameterStore, error) {
	var resource IntegrationAwsParameterStore
	err := ctx.ReadResource("infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAwsParameterStore resources.
type integrationAwsParameterStoreState struct {
	// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion *string `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
	Environment *string `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId *string `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId *string `pulumi:"integrationId"`
	// Integration options
	Options *IntegrationAwsParameterStoreOptions `pulumi:"options"`
	// The path in AWS Parameter Store to sync secrets to.
	ParameterStorePath *string `pulumi:"parameterStorePath"`
	// The ID of your Infisical project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
}

type IntegrationAwsParameterStoreState struct {
	// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrInput
	// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrInput
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringPtrInput
	// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
	Environment pulumi.StringPtrInput
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringPtrInput
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringPtrInput
	// Integration options
	Options IntegrationAwsParameterStoreOptionsPtrInput
	// The path in AWS Parameter Store to sync secrets to.
	ParameterStorePath pulumi.StringPtrInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringPtrInput
	// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringPtrInput
}

func (IntegrationAwsParameterStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAwsParameterStoreState)(nil)).Elem()
}

type integrationAwsParameterStoreArgs struct {
	// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion string `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
	Environment string `pulumi:"environment"`
	// Integration options
	Options *IntegrationAwsParameterStoreOptions `pulumi:"options"`
	// The path in AWS Parameter Store to sync secrets to.
	ParameterStorePath string `pulumi:"parameterStorePath"`
	// The ID of your Infisical project.
	ProjectId string `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
}

// The set of arguments for constructing a IntegrationAwsParameterStore resource.
type IntegrationAwsParameterStoreArgs struct {
	// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrInput
	// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrInput
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringInput
	// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
	Environment pulumi.StringInput
	// Integration options
	Options IntegrationAwsParameterStoreOptionsPtrInput
	// The path in AWS Parameter Store to sync secrets to.
	ParameterStorePath pulumi.StringInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringInput
	// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringInput
}

func (IntegrationAwsParameterStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAwsParameterStoreArgs)(nil)).Elem()
}

type IntegrationAwsParameterStoreInput interface {
	pulumi.Input

	ToIntegrationAwsParameterStoreOutput() IntegrationAwsParameterStoreOutput
	ToIntegrationAwsParameterStoreOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreOutput
}

func (*IntegrationAwsParameterStore) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAwsParameterStore)(nil)).Elem()
}

func (i *IntegrationAwsParameterStore) ToIntegrationAwsParameterStoreOutput() IntegrationAwsParameterStoreOutput {
	return i.ToIntegrationAwsParameterStoreOutputWithContext(context.Background())
}

func (i *IntegrationAwsParameterStore) ToIntegrationAwsParameterStoreOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsParameterStoreOutput)
}

// IntegrationAwsParameterStoreArrayInput is an input type that accepts IntegrationAwsParameterStoreArray and IntegrationAwsParameterStoreArrayOutput values.
// You can construct a concrete instance of `IntegrationAwsParameterStoreArrayInput` via:
//
//	IntegrationAwsParameterStoreArray{ IntegrationAwsParameterStoreArgs{...} }
type IntegrationAwsParameterStoreArrayInput interface {
	pulumi.Input

	ToIntegrationAwsParameterStoreArrayOutput() IntegrationAwsParameterStoreArrayOutput
	ToIntegrationAwsParameterStoreArrayOutputWithContext(context.Context) IntegrationAwsParameterStoreArrayOutput
}

type IntegrationAwsParameterStoreArray []IntegrationAwsParameterStoreInput

func (IntegrationAwsParameterStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAwsParameterStore)(nil)).Elem()
}

func (i IntegrationAwsParameterStoreArray) ToIntegrationAwsParameterStoreArrayOutput() IntegrationAwsParameterStoreArrayOutput {
	return i.ToIntegrationAwsParameterStoreArrayOutputWithContext(context.Background())
}

func (i IntegrationAwsParameterStoreArray) ToIntegrationAwsParameterStoreArrayOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsParameterStoreArrayOutput)
}

// IntegrationAwsParameterStoreMapInput is an input type that accepts IntegrationAwsParameterStoreMap and IntegrationAwsParameterStoreMapOutput values.
// You can construct a concrete instance of `IntegrationAwsParameterStoreMapInput` via:
//
//	IntegrationAwsParameterStoreMap{ "key": IntegrationAwsParameterStoreArgs{...} }
type IntegrationAwsParameterStoreMapInput interface {
	pulumi.Input

	ToIntegrationAwsParameterStoreMapOutput() IntegrationAwsParameterStoreMapOutput
	ToIntegrationAwsParameterStoreMapOutputWithContext(context.Context) IntegrationAwsParameterStoreMapOutput
}

type IntegrationAwsParameterStoreMap map[string]IntegrationAwsParameterStoreInput

func (IntegrationAwsParameterStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAwsParameterStore)(nil)).Elem()
}

func (i IntegrationAwsParameterStoreMap) ToIntegrationAwsParameterStoreMapOutput() IntegrationAwsParameterStoreMapOutput {
	return i.ToIntegrationAwsParameterStoreMapOutputWithContext(context.Background())
}

func (i IntegrationAwsParameterStoreMap) ToIntegrationAwsParameterStoreMapOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsParameterStoreMapOutput)
}

type IntegrationAwsParameterStoreOutput struct{ *pulumi.OutputState }

func (IntegrationAwsParameterStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAwsParameterStore)(nil)).Elem()
}

func (o IntegrationAwsParameterStoreOutput) ToIntegrationAwsParameterStoreOutput() IntegrationAwsParameterStoreOutput {
	return o
}

func (o IntegrationAwsParameterStoreOutput) ToIntegrationAwsParameterStoreOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreOutput {
	return o
}

// The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsParameterStoreOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringPtrOutput { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsParameterStoreOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringPtrOutput { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
func (o IntegrationAwsParameterStoreOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.AwsRegion }).(pulumi.StringOutput)
}

// The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
func (o IntegrationAwsParameterStoreOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the integration auth, used internally by Infisical.
func (o IntegrationAwsParameterStoreOutput) IntegrationAuthId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.IntegrationAuthId }).(pulumi.StringOutput)
}

// The ID of the integration, used internally by Infisical.
func (o IntegrationAwsParameterStoreOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// Integration options
func (o IntegrationAwsParameterStoreOutput) Options() IntegrationAwsParameterStoreOptionsOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) IntegrationAwsParameterStoreOptionsOutput { return v.Options }).(IntegrationAwsParameterStoreOptionsOutput)
}

// The path in AWS Parameter Store to sync secrets to.
func (o IntegrationAwsParameterStoreOutput) ParameterStorePath() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.ParameterStorePath }).(pulumi.StringOutput)
}

// The ID of your Infisical project.
func (o IntegrationAwsParameterStoreOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsParameterStoreOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringPtrOutput { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// The secret path in Infisical to sync secrets from.
func (o IntegrationAwsParameterStoreOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsParameterStore) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

type IntegrationAwsParameterStoreArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAwsParameterStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAwsParameterStore)(nil)).Elem()
}

func (o IntegrationAwsParameterStoreArrayOutput) ToIntegrationAwsParameterStoreArrayOutput() IntegrationAwsParameterStoreArrayOutput {
	return o
}

func (o IntegrationAwsParameterStoreArrayOutput) ToIntegrationAwsParameterStoreArrayOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreArrayOutput {
	return o
}

func (o IntegrationAwsParameterStoreArrayOutput) Index(i pulumi.IntInput) IntegrationAwsParameterStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAwsParameterStore {
		return vs[0].([]*IntegrationAwsParameterStore)[vs[1].(int)]
	}).(IntegrationAwsParameterStoreOutput)
}

type IntegrationAwsParameterStoreMapOutput struct{ *pulumi.OutputState }

func (IntegrationAwsParameterStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAwsParameterStore)(nil)).Elem()
}

func (o IntegrationAwsParameterStoreMapOutput) ToIntegrationAwsParameterStoreMapOutput() IntegrationAwsParameterStoreMapOutput {
	return o
}

func (o IntegrationAwsParameterStoreMapOutput) ToIntegrationAwsParameterStoreMapOutputWithContext(ctx context.Context) IntegrationAwsParameterStoreMapOutput {
	return o
}

func (o IntegrationAwsParameterStoreMapOutput) MapIndex(k pulumi.StringInput) IntegrationAwsParameterStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAwsParameterStore {
		return vs[0].(map[string]*IntegrationAwsParameterStore)[vs[1].(string)]
	}).(IntegrationAwsParameterStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsParameterStoreInput)(nil)).Elem(), &IntegrationAwsParameterStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsParameterStoreArrayInput)(nil)).Elem(), IntegrationAwsParameterStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsParameterStoreMapInput)(nil)).Elem(), IntegrationAwsParameterStoreMap{})
	pulumi.RegisterOutputType(IntegrationAwsParameterStoreOutput{})
	pulumi.RegisterOutputType(IntegrationAwsParameterStoreArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAwsParameterStoreMapOutput{})
}
