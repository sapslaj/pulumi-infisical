// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncGcpSecretManager struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the GCP Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the GCP Secret Manager sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGcpSecretManagerDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGcpSecretManagerSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncGcpSecretManager registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncGcpSecretManager(ctx *pulumi.Context,
	name string, args *SecretSyncGcpSecretManagerArgs, opts ...pulumi.ResourceOption) (*SecretSyncGcpSecretManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncGcpSecretManager
	err := ctx.RegisterResource("infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncGcpSecretManager gets an existing SecretSyncGcpSecretManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncGcpSecretManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncGcpSecretManagerState, opts ...pulumi.ResourceOption) (*SecretSyncGcpSecretManager, error) {
	var resource SecretSyncGcpSecretManager
	err := ctx.ReadResource("infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncGcpSecretManager resources.
type secretSyncGcpSecretManagerState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the GCP Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the GCP Secret Manager sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncGcpSecretManagerDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncGcpSecretManagerSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncGcpSecretManagerState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the GCP Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the GCP Secret Manager sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGcpSecretManagerDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGcpSecretManagerSyncOptionsPtrInput
}

func (SecretSyncGcpSecretManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncGcpSecretManagerState)(nil)).Elem()
}

type secretSyncGcpSecretManagerArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the GCP Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the GCP Secret Manager sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGcpSecretManagerDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGcpSecretManagerSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncGcpSecretManager resource.
type SecretSyncGcpSecretManagerArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the GCP Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the GCP Secret Manager sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGcpSecretManagerDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGcpSecretManagerSyncOptionsInput
}

func (SecretSyncGcpSecretManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncGcpSecretManagerArgs)(nil)).Elem()
}

type SecretSyncGcpSecretManagerInput interface {
	pulumi.Input

	ToSecretSyncGcpSecretManagerOutput() SecretSyncGcpSecretManagerOutput
	ToSecretSyncGcpSecretManagerOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerOutput
}

func (*SecretSyncGcpSecretManager) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncGcpSecretManager)(nil)).Elem()
}

func (i *SecretSyncGcpSecretManager) ToSecretSyncGcpSecretManagerOutput() SecretSyncGcpSecretManagerOutput {
	return i.ToSecretSyncGcpSecretManagerOutputWithContext(context.Background())
}

func (i *SecretSyncGcpSecretManager) ToSecretSyncGcpSecretManagerOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGcpSecretManagerOutput)
}

// SecretSyncGcpSecretManagerArrayInput is an input type that accepts SecretSyncGcpSecretManagerArray and SecretSyncGcpSecretManagerArrayOutput values.
// You can construct a concrete instance of `SecretSyncGcpSecretManagerArrayInput` via:
//
//	SecretSyncGcpSecretManagerArray{ SecretSyncGcpSecretManagerArgs{...} }
type SecretSyncGcpSecretManagerArrayInput interface {
	pulumi.Input

	ToSecretSyncGcpSecretManagerArrayOutput() SecretSyncGcpSecretManagerArrayOutput
	ToSecretSyncGcpSecretManagerArrayOutputWithContext(context.Context) SecretSyncGcpSecretManagerArrayOutput
}

type SecretSyncGcpSecretManagerArray []SecretSyncGcpSecretManagerInput

func (SecretSyncGcpSecretManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncGcpSecretManager)(nil)).Elem()
}

func (i SecretSyncGcpSecretManagerArray) ToSecretSyncGcpSecretManagerArrayOutput() SecretSyncGcpSecretManagerArrayOutput {
	return i.ToSecretSyncGcpSecretManagerArrayOutputWithContext(context.Background())
}

func (i SecretSyncGcpSecretManagerArray) ToSecretSyncGcpSecretManagerArrayOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGcpSecretManagerArrayOutput)
}

// SecretSyncGcpSecretManagerMapInput is an input type that accepts SecretSyncGcpSecretManagerMap and SecretSyncGcpSecretManagerMapOutput values.
// You can construct a concrete instance of `SecretSyncGcpSecretManagerMapInput` via:
//
//	SecretSyncGcpSecretManagerMap{ "key": SecretSyncGcpSecretManagerArgs{...} }
type SecretSyncGcpSecretManagerMapInput interface {
	pulumi.Input

	ToSecretSyncGcpSecretManagerMapOutput() SecretSyncGcpSecretManagerMapOutput
	ToSecretSyncGcpSecretManagerMapOutputWithContext(context.Context) SecretSyncGcpSecretManagerMapOutput
}

type SecretSyncGcpSecretManagerMap map[string]SecretSyncGcpSecretManagerInput

func (SecretSyncGcpSecretManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncGcpSecretManager)(nil)).Elem()
}

func (i SecretSyncGcpSecretManagerMap) ToSecretSyncGcpSecretManagerMapOutput() SecretSyncGcpSecretManagerMapOutput {
	return i.ToSecretSyncGcpSecretManagerMapOutputWithContext(context.Background())
}

func (i SecretSyncGcpSecretManagerMap) ToSecretSyncGcpSecretManagerMapOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGcpSecretManagerMapOutput)
}

type SecretSyncGcpSecretManagerOutput struct{ *pulumi.OutputState }

func (SecretSyncGcpSecretManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncGcpSecretManager)(nil)).Elem()
}

func (o SecretSyncGcpSecretManagerOutput) ToSecretSyncGcpSecretManagerOutput() SecretSyncGcpSecretManagerOutput {
	return o
}

func (o SecretSyncGcpSecretManagerOutput) ToSecretSyncGcpSecretManagerOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncGcpSecretManagerOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the GCP Connection to use for syncing.
func (o SecretSyncGcpSecretManagerOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the GCP Secret Manager sync.
func (o SecretSyncGcpSecretManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncGcpSecretManagerOutput) DestinationConfig() SecretSyncGcpSecretManagerDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) SecretSyncGcpSecretManagerDestinationConfigOutput {
		return v.DestinationConfig
	}).(SecretSyncGcpSecretManagerDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncGcpSecretManagerOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the GCP Secret Manager sync to create. Must be slug-friendly.
func (o SecretSyncGcpSecretManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncGcpSecretManagerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncGcpSecretManagerOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncGcpSecretManagerOutput) SyncOptions() SecretSyncGcpSecretManagerSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncGcpSecretManager) SecretSyncGcpSecretManagerSyncOptionsOutput { return v.SyncOptions }).(SecretSyncGcpSecretManagerSyncOptionsOutput)
}

type SecretSyncGcpSecretManagerArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncGcpSecretManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncGcpSecretManager)(nil)).Elem()
}

func (o SecretSyncGcpSecretManagerArrayOutput) ToSecretSyncGcpSecretManagerArrayOutput() SecretSyncGcpSecretManagerArrayOutput {
	return o
}

func (o SecretSyncGcpSecretManagerArrayOutput) ToSecretSyncGcpSecretManagerArrayOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerArrayOutput {
	return o
}

func (o SecretSyncGcpSecretManagerArrayOutput) Index(i pulumi.IntInput) SecretSyncGcpSecretManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncGcpSecretManager {
		return vs[0].([]*SecretSyncGcpSecretManager)[vs[1].(int)]
	}).(SecretSyncGcpSecretManagerOutput)
}

type SecretSyncGcpSecretManagerMapOutput struct{ *pulumi.OutputState }

func (SecretSyncGcpSecretManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncGcpSecretManager)(nil)).Elem()
}

func (o SecretSyncGcpSecretManagerMapOutput) ToSecretSyncGcpSecretManagerMapOutput() SecretSyncGcpSecretManagerMapOutput {
	return o
}

func (o SecretSyncGcpSecretManagerMapOutput) ToSecretSyncGcpSecretManagerMapOutputWithContext(ctx context.Context) SecretSyncGcpSecretManagerMapOutput {
	return o
}

func (o SecretSyncGcpSecretManagerMapOutput) MapIndex(k pulumi.StringInput) SecretSyncGcpSecretManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncGcpSecretManager {
		return vs[0].(map[string]*SecretSyncGcpSecretManager)[vs[1].(string)]
	}).(SecretSyncGcpSecretManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGcpSecretManagerInput)(nil)).Elem(), &SecretSyncGcpSecretManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGcpSecretManagerArrayInput)(nil)).Elem(), SecretSyncGcpSecretManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGcpSecretManagerMapInput)(nil)).Elem(), SecretSyncGcpSecretManagerMap{})
	pulumi.RegisterOutputType(SecretSyncGcpSecretManagerOutput{})
	pulumi.RegisterOutputType(SecretSyncGcpSecretManagerArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncGcpSecretManagerMapOutput{})
}
