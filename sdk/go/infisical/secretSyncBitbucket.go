// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncBitbucket struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the bitbucket Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Bitbucket sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncBitbucketDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Bitbucket sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncBitbucketSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncBitbucket registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncBitbucket(ctx *pulumi.Context,
	name string, args *SecretSyncBitbucketArgs, opts ...pulumi.ResourceOption) (*SecretSyncBitbucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncBitbucket
	err := ctx.RegisterResource("infisical:index/secretSyncBitbucket:SecretSyncBitbucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncBitbucket gets an existing SecretSyncBitbucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncBitbucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncBitbucketState, opts ...pulumi.ResourceOption) (*SecretSyncBitbucket, error) {
	var resource SecretSyncBitbucket
	err := ctx.ReadResource("infisical:index/secretSyncBitbucket:SecretSyncBitbucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncBitbucket resources.
type secretSyncBitbucketState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the bitbucket Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Bitbucket sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncBitbucketDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Bitbucket sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncBitbucketSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncBitbucketState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the bitbucket Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Bitbucket sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncBitbucketDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Bitbucket sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncBitbucketSyncOptionsPtrInput
}

func (SecretSyncBitbucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncBitbucketState)(nil)).Elem()
}

type secretSyncBitbucketArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the bitbucket Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Bitbucket sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncBitbucketDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Bitbucket sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncBitbucketSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncBitbucket resource.
type SecretSyncBitbucketArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the bitbucket Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Bitbucket sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncBitbucketDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Bitbucket sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncBitbucketSyncOptionsInput
}

func (SecretSyncBitbucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncBitbucketArgs)(nil)).Elem()
}

type SecretSyncBitbucketInput interface {
	pulumi.Input

	ToSecretSyncBitbucketOutput() SecretSyncBitbucketOutput
	ToSecretSyncBitbucketOutputWithContext(ctx context.Context) SecretSyncBitbucketOutput
}

func (*SecretSyncBitbucket) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncBitbucket)(nil)).Elem()
}

func (i *SecretSyncBitbucket) ToSecretSyncBitbucketOutput() SecretSyncBitbucketOutput {
	return i.ToSecretSyncBitbucketOutputWithContext(context.Background())
}

func (i *SecretSyncBitbucket) ToSecretSyncBitbucketOutputWithContext(ctx context.Context) SecretSyncBitbucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncBitbucketOutput)
}

// SecretSyncBitbucketArrayInput is an input type that accepts SecretSyncBitbucketArray and SecretSyncBitbucketArrayOutput values.
// You can construct a concrete instance of `SecretSyncBitbucketArrayInput` via:
//
//	SecretSyncBitbucketArray{ SecretSyncBitbucketArgs{...} }
type SecretSyncBitbucketArrayInput interface {
	pulumi.Input

	ToSecretSyncBitbucketArrayOutput() SecretSyncBitbucketArrayOutput
	ToSecretSyncBitbucketArrayOutputWithContext(context.Context) SecretSyncBitbucketArrayOutput
}

type SecretSyncBitbucketArray []SecretSyncBitbucketInput

func (SecretSyncBitbucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncBitbucket)(nil)).Elem()
}

func (i SecretSyncBitbucketArray) ToSecretSyncBitbucketArrayOutput() SecretSyncBitbucketArrayOutput {
	return i.ToSecretSyncBitbucketArrayOutputWithContext(context.Background())
}

func (i SecretSyncBitbucketArray) ToSecretSyncBitbucketArrayOutputWithContext(ctx context.Context) SecretSyncBitbucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncBitbucketArrayOutput)
}

// SecretSyncBitbucketMapInput is an input type that accepts SecretSyncBitbucketMap and SecretSyncBitbucketMapOutput values.
// You can construct a concrete instance of `SecretSyncBitbucketMapInput` via:
//
//	SecretSyncBitbucketMap{ "key": SecretSyncBitbucketArgs{...} }
type SecretSyncBitbucketMapInput interface {
	pulumi.Input

	ToSecretSyncBitbucketMapOutput() SecretSyncBitbucketMapOutput
	ToSecretSyncBitbucketMapOutputWithContext(context.Context) SecretSyncBitbucketMapOutput
}

type SecretSyncBitbucketMap map[string]SecretSyncBitbucketInput

func (SecretSyncBitbucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncBitbucket)(nil)).Elem()
}

func (i SecretSyncBitbucketMap) ToSecretSyncBitbucketMapOutput() SecretSyncBitbucketMapOutput {
	return i.ToSecretSyncBitbucketMapOutputWithContext(context.Background())
}

func (i SecretSyncBitbucketMap) ToSecretSyncBitbucketMapOutputWithContext(ctx context.Context) SecretSyncBitbucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncBitbucketMapOutput)
}

type SecretSyncBitbucketOutput struct{ *pulumi.OutputState }

func (SecretSyncBitbucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncBitbucket)(nil)).Elem()
}

func (o SecretSyncBitbucketOutput) ToSecretSyncBitbucketOutput() SecretSyncBitbucketOutput {
	return o
}

func (o SecretSyncBitbucketOutput) ToSecretSyncBitbucketOutputWithContext(ctx context.Context) SecretSyncBitbucketOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncBitbucketOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the bitbucket Connection to use for syncing.
func (o SecretSyncBitbucketOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Bitbucket sync.
func (o SecretSyncBitbucketOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncBitbucketOutput) DestinationConfig() SecretSyncBitbucketDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) SecretSyncBitbucketDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncBitbucketDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncBitbucketOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Bitbucket sync to create. Must be slug-friendly.
func (o SecretSyncBitbucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncBitbucketOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncBitbucketOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncBitbucketOutput) SyncOptions() SecretSyncBitbucketSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncBitbucket) SecretSyncBitbucketSyncOptionsOutput { return v.SyncOptions }).(SecretSyncBitbucketSyncOptionsOutput)
}

type SecretSyncBitbucketArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncBitbucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncBitbucket)(nil)).Elem()
}

func (o SecretSyncBitbucketArrayOutput) ToSecretSyncBitbucketArrayOutput() SecretSyncBitbucketArrayOutput {
	return o
}

func (o SecretSyncBitbucketArrayOutput) ToSecretSyncBitbucketArrayOutputWithContext(ctx context.Context) SecretSyncBitbucketArrayOutput {
	return o
}

func (o SecretSyncBitbucketArrayOutput) Index(i pulumi.IntInput) SecretSyncBitbucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncBitbucket {
		return vs[0].([]*SecretSyncBitbucket)[vs[1].(int)]
	}).(SecretSyncBitbucketOutput)
}

type SecretSyncBitbucketMapOutput struct{ *pulumi.OutputState }

func (SecretSyncBitbucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncBitbucket)(nil)).Elem()
}

func (o SecretSyncBitbucketMapOutput) ToSecretSyncBitbucketMapOutput() SecretSyncBitbucketMapOutput {
	return o
}

func (o SecretSyncBitbucketMapOutput) ToSecretSyncBitbucketMapOutputWithContext(ctx context.Context) SecretSyncBitbucketMapOutput {
	return o
}

func (o SecretSyncBitbucketMapOutput) MapIndex(k pulumi.StringInput) SecretSyncBitbucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncBitbucket {
		return vs[0].(map[string]*SecretSyncBitbucket)[vs[1].(string)]
	}).(SecretSyncBitbucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncBitbucketInput)(nil)).Elem(), &SecretSyncBitbucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncBitbucketArrayInput)(nil)).Elem(), SecretSyncBitbucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncBitbucketMapInput)(nil)).Elem(), SecretSyncBitbucketMap{})
	pulumi.RegisterOutputType(SecretSyncBitbucketOutput{})
	pulumi.RegisterOutputType(SecretSyncBitbucketArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncBitbucketMapOutput{})
}
