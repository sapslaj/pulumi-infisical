// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IdentityGcpAuth struct {
	pulumi.CustomResourceState

	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntOutput `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntOutput `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityGcpAuthAccessTokenTrustedIpArrayOutput `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntOutput `pulumi:"accessTokenTtl"`
	// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
	AllowedProjects pulumi.StringArrayOutput `pulumi:"allowedProjects"`
	// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
	AllowedServiceAccountEmails pulumi.StringArrayOutput `pulumi:"allowedServiceAccountEmails"`
	// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
	AllowedZones pulumi.StringArrayOutput `pulumi:"allowedZones"`
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIdentityGcpAuth registers a new resource with the given unique name, arguments, and options.
func NewIdentityGcpAuth(ctx *pulumi.Context,
	name string, args *IdentityGcpAuthArgs, opts ...pulumi.ResourceOption) (*IdentityGcpAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityGcpAuth
	err := ctx.RegisterResource("infisical:index/identityGcpAuth:IdentityGcpAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityGcpAuth gets an existing IdentityGcpAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityGcpAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityGcpAuthState, opts ...pulumi.ResourceOption) (*IdentityGcpAuth, error) {
	var resource IdentityGcpAuth
	err := ctx.ReadResource("infisical:index/identityGcpAuth:IdentityGcpAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityGcpAuth resources.
type identityGcpAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityGcpAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
	AllowedProjects []string `pulumi:"allowedProjects"`
	// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
	AllowedServiceAccountEmails []string `pulumi:"allowedServiceAccountEmails"`
	// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
	AllowedZones []string `pulumi:"allowedZones"`
	// The ID of the identity to attach the configuration onto.
	IdentityId *string `pulumi:"identityId"`
	// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
	Type *string `pulumi:"type"`
}

type IdentityGcpAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityGcpAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
	AllowedProjects pulumi.StringArrayInput
	// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
	AllowedServiceAccountEmails pulumi.StringArrayInput
	// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
	AllowedZones pulumi.StringArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringPtrInput
	// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
	Type pulumi.StringPtrInput
}

func (IdentityGcpAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGcpAuthState)(nil)).Elem()
}

type identityGcpAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityGcpAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
	AllowedProjects []string `pulumi:"allowedProjects"`
	// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
	AllowedServiceAccountEmails []string `pulumi:"allowedServiceAccountEmails"`
	// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
	AllowedZones []string `pulumi:"allowedZones"`
	// The ID of the identity to attach the configuration onto.
	IdentityId string `pulumi:"identityId"`
	// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a IdentityGcpAuth resource.
type IdentityGcpAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityGcpAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
	AllowedProjects pulumi.StringArrayInput
	// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
	AllowedServiceAccountEmails pulumi.StringArrayInput
	// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
	AllowedZones pulumi.StringArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringInput
	// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
	Type pulumi.StringPtrInput
}

func (IdentityGcpAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGcpAuthArgs)(nil)).Elem()
}

type IdentityGcpAuthInput interface {
	pulumi.Input

	ToIdentityGcpAuthOutput() IdentityGcpAuthOutput
	ToIdentityGcpAuthOutputWithContext(ctx context.Context) IdentityGcpAuthOutput
}

func (*IdentityGcpAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGcpAuth)(nil)).Elem()
}

func (i *IdentityGcpAuth) ToIdentityGcpAuthOutput() IdentityGcpAuthOutput {
	return i.ToIdentityGcpAuthOutputWithContext(context.Background())
}

func (i *IdentityGcpAuth) ToIdentityGcpAuthOutputWithContext(ctx context.Context) IdentityGcpAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGcpAuthOutput)
}

// IdentityGcpAuthArrayInput is an input type that accepts IdentityGcpAuthArray and IdentityGcpAuthArrayOutput values.
// You can construct a concrete instance of `IdentityGcpAuthArrayInput` via:
//
//	IdentityGcpAuthArray{ IdentityGcpAuthArgs{...} }
type IdentityGcpAuthArrayInput interface {
	pulumi.Input

	ToIdentityGcpAuthArrayOutput() IdentityGcpAuthArrayOutput
	ToIdentityGcpAuthArrayOutputWithContext(context.Context) IdentityGcpAuthArrayOutput
}

type IdentityGcpAuthArray []IdentityGcpAuthInput

func (IdentityGcpAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGcpAuth)(nil)).Elem()
}

func (i IdentityGcpAuthArray) ToIdentityGcpAuthArrayOutput() IdentityGcpAuthArrayOutput {
	return i.ToIdentityGcpAuthArrayOutputWithContext(context.Background())
}

func (i IdentityGcpAuthArray) ToIdentityGcpAuthArrayOutputWithContext(ctx context.Context) IdentityGcpAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGcpAuthArrayOutput)
}

// IdentityGcpAuthMapInput is an input type that accepts IdentityGcpAuthMap and IdentityGcpAuthMapOutput values.
// You can construct a concrete instance of `IdentityGcpAuthMapInput` via:
//
//	IdentityGcpAuthMap{ "key": IdentityGcpAuthArgs{...} }
type IdentityGcpAuthMapInput interface {
	pulumi.Input

	ToIdentityGcpAuthMapOutput() IdentityGcpAuthMapOutput
	ToIdentityGcpAuthMapOutputWithContext(context.Context) IdentityGcpAuthMapOutput
}

type IdentityGcpAuthMap map[string]IdentityGcpAuthInput

func (IdentityGcpAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGcpAuth)(nil)).Elem()
}

func (i IdentityGcpAuthMap) ToIdentityGcpAuthMapOutput() IdentityGcpAuthMapOutput {
	return i.ToIdentityGcpAuthMapOutputWithContext(context.Background())
}

func (i IdentityGcpAuthMap) ToIdentityGcpAuthMapOutputWithContext(ctx context.Context) IdentityGcpAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGcpAuthMapOutput)
}

type IdentityGcpAuthOutput struct{ *pulumi.OutputState }

func (IdentityGcpAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGcpAuth)(nil)).Elem()
}

func (o IdentityGcpAuthOutput) ToIdentityGcpAuthOutput() IdentityGcpAuthOutput {
	return o
}

func (o IdentityGcpAuthOutput) ToIdentityGcpAuthOutputWithContext(ctx context.Context) IdentityGcpAuthOutput {
	return o
}

// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityGcpAuthOutput) AccessTokenMaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.IntOutput { return v.AccessTokenMaxTtl }).(pulumi.IntOutput)
}

// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
func (o IdentityGcpAuthOutput) AccessTokenNumUsesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.IntOutput { return v.AccessTokenNumUsesLimit }).(pulumi.IntOutput)
}

// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
func (o IdentityGcpAuthOutput) AccessTokenTrustedIps() IdentityGcpAuthAccessTokenTrustedIpArrayOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) IdentityGcpAuthAccessTokenTrustedIpArrayOutput {
		return v.AccessTokenTrustedIps
	}).(IdentityGcpAuthAccessTokenTrustedIpArrayOutput)
}

// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityGcpAuthOutput) AccessTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.IntOutput { return v.AccessTokenTtl }).(pulumi.IntOutput)
}

// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
func (o IdentityGcpAuthOutput) AllowedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.StringArrayOutput { return v.AllowedProjects }).(pulumi.StringArrayOutput)
}

// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
func (o IdentityGcpAuthOutput) AllowedServiceAccountEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.StringArrayOutput { return v.AllowedServiceAccountEmails }).(pulumi.StringArrayOutput)
}

// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `<region>-<zone>`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
func (o IdentityGcpAuthOutput) AllowedZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.StringArrayOutput { return v.AllowedZones }).(pulumi.StringArrayOutput)
}

// The ID of the identity to attach the configuration onto.
func (o IdentityGcpAuthOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
func (o IdentityGcpAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityGcpAuth) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IdentityGcpAuthArrayOutput struct{ *pulumi.OutputState }

func (IdentityGcpAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGcpAuth)(nil)).Elem()
}

func (o IdentityGcpAuthArrayOutput) ToIdentityGcpAuthArrayOutput() IdentityGcpAuthArrayOutput {
	return o
}

func (o IdentityGcpAuthArrayOutput) ToIdentityGcpAuthArrayOutputWithContext(ctx context.Context) IdentityGcpAuthArrayOutput {
	return o
}

func (o IdentityGcpAuthArrayOutput) Index(i pulumi.IntInput) IdentityGcpAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityGcpAuth {
		return vs[0].([]*IdentityGcpAuth)[vs[1].(int)]
	}).(IdentityGcpAuthOutput)
}

type IdentityGcpAuthMapOutput struct{ *pulumi.OutputState }

func (IdentityGcpAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGcpAuth)(nil)).Elem()
}

func (o IdentityGcpAuthMapOutput) ToIdentityGcpAuthMapOutput() IdentityGcpAuthMapOutput {
	return o
}

func (o IdentityGcpAuthMapOutput) ToIdentityGcpAuthMapOutputWithContext(ctx context.Context) IdentityGcpAuthMapOutput {
	return o
}

func (o IdentityGcpAuthMapOutput) MapIndex(k pulumi.StringInput) IdentityGcpAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityGcpAuth {
		return vs[0].(map[string]*IdentityGcpAuth)[vs[1].(string)]
	}).(IdentityGcpAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGcpAuthInput)(nil)).Elem(), &IdentityGcpAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGcpAuthArrayInput)(nil)).Elem(), IdentityGcpAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGcpAuthMapInput)(nil)).Elem(), IdentityGcpAuthMap{})
	pulumi.RegisterOutputType(IdentityGcpAuthOutput{})
	pulumi.RegisterOutputType(IdentityGcpAuthArrayOutput{})
	pulumi.RegisterOutputType(IdentityGcpAuthMapOutput{})
}
