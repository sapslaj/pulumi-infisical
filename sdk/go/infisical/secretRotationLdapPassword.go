// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationLdapPassword struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationLdapPasswordParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationLdapPasswordRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationLdapPasswordSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationLdapPasswordTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationLdapPassword registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationLdapPassword(ctx *pulumi.Context,
	name string, args *SecretRotationLdapPasswordArgs, opts ...pulumi.ResourceOption) (*SecretRotationLdapPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationLdapPassword
	err := ctx.RegisterResource("infisical:index/secretRotationLdapPassword:SecretRotationLdapPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationLdapPassword gets an existing SecretRotationLdapPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationLdapPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationLdapPasswordState, opts ...pulumi.ResourceOption) (*SecretRotationLdapPassword, error) {
	var resource SecretRotationLdapPassword
	err := ctx.ReadResource("infisical:index/secretRotationLdapPassword:SecretRotationLdapPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationLdapPassword resources.
type secretRotationLdapPasswordState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationLdapPasswordParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationLdapPasswordRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationLdapPasswordSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationLdapPasswordTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationLdapPasswordState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationLdapPasswordParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationLdapPasswordRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationLdapPasswordSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationLdapPasswordTemporaryParametersPtrInput
}

func (SecretRotationLdapPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationLdapPasswordState)(nil)).Elem()
}

type secretRotationLdapPasswordArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationLdapPasswordParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationLdapPasswordRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationLdapPasswordSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationLdapPasswordTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationLdapPassword resource.
type SecretRotationLdapPasswordArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationLdapPasswordParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationLdapPasswordRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationLdapPasswordSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationLdapPasswordTemporaryParametersPtrInput
}

func (SecretRotationLdapPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationLdapPasswordArgs)(nil)).Elem()
}

type SecretRotationLdapPasswordInput interface {
	pulumi.Input

	ToSecretRotationLdapPasswordOutput() SecretRotationLdapPasswordOutput
	ToSecretRotationLdapPasswordOutputWithContext(ctx context.Context) SecretRotationLdapPasswordOutput
}

func (*SecretRotationLdapPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationLdapPassword)(nil)).Elem()
}

func (i *SecretRotationLdapPassword) ToSecretRotationLdapPasswordOutput() SecretRotationLdapPasswordOutput {
	return i.ToSecretRotationLdapPasswordOutputWithContext(context.Background())
}

func (i *SecretRotationLdapPassword) ToSecretRotationLdapPasswordOutputWithContext(ctx context.Context) SecretRotationLdapPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationLdapPasswordOutput)
}

// SecretRotationLdapPasswordArrayInput is an input type that accepts SecretRotationLdapPasswordArray and SecretRotationLdapPasswordArrayOutput values.
// You can construct a concrete instance of `SecretRotationLdapPasswordArrayInput` via:
//
//	SecretRotationLdapPasswordArray{ SecretRotationLdapPasswordArgs{...} }
type SecretRotationLdapPasswordArrayInput interface {
	pulumi.Input

	ToSecretRotationLdapPasswordArrayOutput() SecretRotationLdapPasswordArrayOutput
	ToSecretRotationLdapPasswordArrayOutputWithContext(context.Context) SecretRotationLdapPasswordArrayOutput
}

type SecretRotationLdapPasswordArray []SecretRotationLdapPasswordInput

func (SecretRotationLdapPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationLdapPassword)(nil)).Elem()
}

func (i SecretRotationLdapPasswordArray) ToSecretRotationLdapPasswordArrayOutput() SecretRotationLdapPasswordArrayOutput {
	return i.ToSecretRotationLdapPasswordArrayOutputWithContext(context.Background())
}

func (i SecretRotationLdapPasswordArray) ToSecretRotationLdapPasswordArrayOutputWithContext(ctx context.Context) SecretRotationLdapPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationLdapPasswordArrayOutput)
}

// SecretRotationLdapPasswordMapInput is an input type that accepts SecretRotationLdapPasswordMap and SecretRotationLdapPasswordMapOutput values.
// You can construct a concrete instance of `SecretRotationLdapPasswordMapInput` via:
//
//	SecretRotationLdapPasswordMap{ "key": SecretRotationLdapPasswordArgs{...} }
type SecretRotationLdapPasswordMapInput interface {
	pulumi.Input

	ToSecretRotationLdapPasswordMapOutput() SecretRotationLdapPasswordMapOutput
	ToSecretRotationLdapPasswordMapOutputWithContext(context.Context) SecretRotationLdapPasswordMapOutput
}

type SecretRotationLdapPasswordMap map[string]SecretRotationLdapPasswordInput

func (SecretRotationLdapPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationLdapPassword)(nil)).Elem()
}

func (i SecretRotationLdapPasswordMap) ToSecretRotationLdapPasswordMapOutput() SecretRotationLdapPasswordMapOutput {
	return i.ToSecretRotationLdapPasswordMapOutputWithContext(context.Background())
}

func (i SecretRotationLdapPasswordMap) ToSecretRotationLdapPasswordMapOutputWithContext(ctx context.Context) SecretRotationLdapPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationLdapPasswordMapOutput)
}

type SecretRotationLdapPasswordOutput struct{ *pulumi.OutputState }

func (SecretRotationLdapPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationLdapPassword)(nil)).Elem()
}

func (o SecretRotationLdapPasswordOutput) ToSecretRotationLdapPasswordOutput() SecretRotationLdapPasswordOutput {
	return o
}

func (o SecretRotationLdapPasswordOutput) ToSecretRotationLdapPasswordOutputWithContext(ctx context.Context) SecretRotationLdapPasswordOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationLdapPasswordOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationLdapPasswordOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationLdapPasswordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationLdapPasswordOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationLdapPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationLdapPasswordOutput) Parameters() SecretRotationLdapPasswordParametersOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) SecretRotationLdapPasswordParametersOutput { return v.Parameters }).(SecretRotationLdapPasswordParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationLdapPasswordOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationLdapPasswordOutput) RotateAtUtc() SecretRotationLdapPasswordRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) SecretRotationLdapPasswordRotateAtUtcOutput { return v.RotateAtUtc }).(SecretRotationLdapPasswordRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationLdapPasswordOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationLdapPasswordOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationLdapPasswordOutput) SecretsMapping() SecretRotationLdapPasswordSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) SecretRotationLdapPasswordSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationLdapPasswordSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationLdapPasswordOutput) TemporaryParameters() SecretRotationLdapPasswordTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationLdapPassword) SecretRotationLdapPasswordTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationLdapPasswordTemporaryParametersPtrOutput)
}

type SecretRotationLdapPasswordArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationLdapPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationLdapPassword)(nil)).Elem()
}

func (o SecretRotationLdapPasswordArrayOutput) ToSecretRotationLdapPasswordArrayOutput() SecretRotationLdapPasswordArrayOutput {
	return o
}

func (o SecretRotationLdapPasswordArrayOutput) ToSecretRotationLdapPasswordArrayOutputWithContext(ctx context.Context) SecretRotationLdapPasswordArrayOutput {
	return o
}

func (o SecretRotationLdapPasswordArrayOutput) Index(i pulumi.IntInput) SecretRotationLdapPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationLdapPassword {
		return vs[0].([]*SecretRotationLdapPassword)[vs[1].(int)]
	}).(SecretRotationLdapPasswordOutput)
}

type SecretRotationLdapPasswordMapOutput struct{ *pulumi.OutputState }

func (SecretRotationLdapPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationLdapPassword)(nil)).Elem()
}

func (o SecretRotationLdapPasswordMapOutput) ToSecretRotationLdapPasswordMapOutput() SecretRotationLdapPasswordMapOutput {
	return o
}

func (o SecretRotationLdapPasswordMapOutput) ToSecretRotationLdapPasswordMapOutputWithContext(ctx context.Context) SecretRotationLdapPasswordMapOutput {
	return o
}

func (o SecretRotationLdapPasswordMapOutput) MapIndex(k pulumi.StringInput) SecretRotationLdapPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationLdapPassword {
		return vs[0].(map[string]*SecretRotationLdapPassword)[vs[1].(string)]
	}).(SecretRotationLdapPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationLdapPasswordInput)(nil)).Elem(), &SecretRotationLdapPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationLdapPasswordArrayInput)(nil)).Elem(), SecretRotationLdapPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationLdapPasswordMapInput)(nil)).Elem(), SecretRotationLdapPasswordMap{})
	pulumi.RegisterOutputType(SecretRotationLdapPasswordOutput{})
	pulumi.RegisterOutputType(SecretRotationLdapPasswordArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationLdapPasswordMapOutput{})
}
