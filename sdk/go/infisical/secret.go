// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type Secret struct {
	pulumi.CustomResourceState

	// The environment slug of the secret to modify/create
	EnvSlug pulumi.StringOutput `pulumi:"envSlug"`
	// The path to the folder where the given secret resides
	FolderPath  pulumi.StringOutput `pulumi:"folderPath"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The name of the secret
	Name           pulumi.StringOutput           `pulumi:"name"`
	SecretReminder SecretSecretReminderPtrOutput `pulumi:"secretReminder"`
	// Tag ids to be attached for the secrets.
	TagIds pulumi.StringArrayOutput `pulumi:"tagIds"`
	// The value of the secret
	Value pulumi.StringOutput `pulumi:"value"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvSlug'")
	}
	if args.FolderPath == nil {
		return nil, errors.New("invalid value for required argument 'FolderPath'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("infisical:index/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("infisical:index/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// The environment slug of the secret to modify/create
	EnvSlug *string `pulumi:"envSlug"`
	// The path to the folder where the given secret resides
	FolderPath  *string `pulumi:"folderPath"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// The name of the secret
	Name           *string               `pulumi:"name"`
	SecretReminder *SecretSecretReminder `pulumi:"secretReminder"`
	// Tag ids to be attached for the secrets.
	TagIds []string `pulumi:"tagIds"`
	// The value of the secret
	Value *string `pulumi:"value"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SecretState struct {
	// The environment slug of the secret to modify/create
	EnvSlug pulumi.StringPtrInput
	// The path to the folder where the given secret resides
	FolderPath  pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// The name of the secret
	Name           pulumi.StringPtrInput
	SecretReminder SecretSecretReminderPtrInput
	// Tag ids to be attached for the secrets.
	TagIds pulumi.StringArrayInput
	// The value of the secret
	Value pulumi.StringPtrInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceId pulumi.StringPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// The environment slug of the secret to modify/create
	EnvSlug string `pulumi:"envSlug"`
	// The path to the folder where the given secret resides
	FolderPath string `pulumi:"folderPath"`
	// The name of the secret
	Name           *string               `pulumi:"name"`
	SecretReminder *SecretSecretReminder `pulumi:"secretReminder"`
	// Tag ids to be attached for the secrets.
	TagIds []string `pulumi:"tagIds"`
	// The value of the secret
	Value string `pulumi:"value"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// The environment slug of the secret to modify/create
	EnvSlug pulumi.StringInput
	// The path to the folder where the given secret resides
	FolderPath pulumi.StringInput
	// The name of the secret
	Name           pulumi.StringPtrInput
	SecretReminder SecretSecretReminderPtrInput
	// Tag ids to be attached for the secrets.
	TagIds pulumi.StringArrayInput
	// The value of the secret
	Value pulumi.StringInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceId pulumi.StringPtrInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// The environment slug of the secret to modify/create
func (o SecretOutput) EnvSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.EnvSlug }).(pulumi.StringOutput)
}

// The path to the folder where the given secret resides
func (o SecretOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.FolderPath }).(pulumi.StringOutput)
}

func (o SecretOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The name of the secret
func (o SecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SecretOutput) SecretReminder() SecretSecretReminderPtrOutput {
	return o.ApplyT(func(v *Secret) SecretSecretReminderPtrOutput { return v.SecretReminder }).(SecretSecretReminderPtrOutput)
}

// Tag ids to be attached for the secrets.
func (o SecretOutput) TagIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringArrayOutput { return v.TagIds }).(pulumi.StringArrayOutput)
}

// The value of the secret
func (o SecretOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
func (o SecretOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}
