// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type DynamicSecretAwsIam struct {
	pulumi.CustomResourceState

	// The configuration of the dynamic secret
	Configuration DynamicSecretAwsIamConfigurationOutput `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringOutput `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringOutput `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrOutput `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretAwsIamMetadataArrayOutput `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path pulumi.StringOutput `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringOutput `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewDynamicSecretAwsIam registers a new resource with the given unique name, arguments, and options.
func NewDynamicSecretAwsIam(ctx *pulumi.Context,
	name string, args *DynamicSecretAwsIamArgs, opts ...pulumi.ResourceOption) (*DynamicSecretAwsIam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DefaultTtl == nil {
		return nil, errors.New("invalid value for required argument 'DefaultTtl'")
	}
	if args.EnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSlug'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ProjectSlug == nil {
		return nil, errors.New("invalid value for required argument 'ProjectSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicSecretAwsIam
	err := ctx.RegisterResource("infisical:index/dynamicSecretAwsIam:DynamicSecretAwsIam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicSecretAwsIam gets an existing DynamicSecretAwsIam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicSecretAwsIam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicSecretAwsIamState, opts ...pulumi.ResourceOption) (*DynamicSecretAwsIam, error) {
	var resource DynamicSecretAwsIam
	err := ctx.ReadResource("infisical:index/dynamicSecretAwsIam:DynamicSecretAwsIam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicSecretAwsIam resources.
type dynamicSecretAwsIamState struct {
	// The configuration of the dynamic secret
	Configuration *DynamicSecretAwsIamConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl *string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretAwsIamMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path *string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug *string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type DynamicSecretAwsIamState struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretAwsIamConfigurationPtrInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringPtrInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringPtrInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretAwsIamMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringPtrInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringPtrInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretAwsIamState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretAwsIamState)(nil)).Elem()
}

type dynamicSecretAwsIamArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretAwsIamConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretAwsIamMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a DynamicSecretAwsIam resource.
type DynamicSecretAwsIamArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretAwsIamConfigurationInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretAwsIamMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretAwsIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretAwsIamArgs)(nil)).Elem()
}

type DynamicSecretAwsIamInput interface {
	pulumi.Input

	ToDynamicSecretAwsIamOutput() DynamicSecretAwsIamOutput
	ToDynamicSecretAwsIamOutputWithContext(ctx context.Context) DynamicSecretAwsIamOutput
}

func (*DynamicSecretAwsIam) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretAwsIam)(nil)).Elem()
}

func (i *DynamicSecretAwsIam) ToDynamicSecretAwsIamOutput() DynamicSecretAwsIamOutput {
	return i.ToDynamicSecretAwsIamOutputWithContext(context.Background())
}

func (i *DynamicSecretAwsIam) ToDynamicSecretAwsIamOutputWithContext(ctx context.Context) DynamicSecretAwsIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretAwsIamOutput)
}

// DynamicSecretAwsIamArrayInput is an input type that accepts DynamicSecretAwsIamArray and DynamicSecretAwsIamArrayOutput values.
// You can construct a concrete instance of `DynamicSecretAwsIamArrayInput` via:
//
//	DynamicSecretAwsIamArray{ DynamicSecretAwsIamArgs{...} }
type DynamicSecretAwsIamArrayInput interface {
	pulumi.Input

	ToDynamicSecretAwsIamArrayOutput() DynamicSecretAwsIamArrayOutput
	ToDynamicSecretAwsIamArrayOutputWithContext(context.Context) DynamicSecretAwsIamArrayOutput
}

type DynamicSecretAwsIamArray []DynamicSecretAwsIamInput

func (DynamicSecretAwsIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretAwsIam)(nil)).Elem()
}

func (i DynamicSecretAwsIamArray) ToDynamicSecretAwsIamArrayOutput() DynamicSecretAwsIamArrayOutput {
	return i.ToDynamicSecretAwsIamArrayOutputWithContext(context.Background())
}

func (i DynamicSecretAwsIamArray) ToDynamicSecretAwsIamArrayOutputWithContext(ctx context.Context) DynamicSecretAwsIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretAwsIamArrayOutput)
}

// DynamicSecretAwsIamMapInput is an input type that accepts DynamicSecretAwsIamMap and DynamicSecretAwsIamMapOutput values.
// You can construct a concrete instance of `DynamicSecretAwsIamMapInput` via:
//
//	DynamicSecretAwsIamMap{ "key": DynamicSecretAwsIamArgs{...} }
type DynamicSecretAwsIamMapInput interface {
	pulumi.Input

	ToDynamicSecretAwsIamMapOutput() DynamicSecretAwsIamMapOutput
	ToDynamicSecretAwsIamMapOutputWithContext(context.Context) DynamicSecretAwsIamMapOutput
}

type DynamicSecretAwsIamMap map[string]DynamicSecretAwsIamInput

func (DynamicSecretAwsIamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretAwsIam)(nil)).Elem()
}

func (i DynamicSecretAwsIamMap) ToDynamicSecretAwsIamMapOutput() DynamicSecretAwsIamMapOutput {
	return i.ToDynamicSecretAwsIamMapOutputWithContext(context.Background())
}

func (i DynamicSecretAwsIamMap) ToDynamicSecretAwsIamMapOutputWithContext(ctx context.Context) DynamicSecretAwsIamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretAwsIamMapOutput)
}

type DynamicSecretAwsIamOutput struct{ *pulumi.OutputState }

func (DynamicSecretAwsIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretAwsIam)(nil)).Elem()
}

func (o DynamicSecretAwsIamOutput) ToDynamicSecretAwsIamOutput() DynamicSecretAwsIamOutput {
	return o
}

func (o DynamicSecretAwsIamOutput) ToDynamicSecretAwsIamOutputWithContext(ctx context.Context) DynamicSecretAwsIamOutput {
	return o
}

// The configuration of the dynamic secret
func (o DynamicSecretAwsIamOutput) Configuration() DynamicSecretAwsIamConfigurationOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) DynamicSecretAwsIamConfigurationOutput { return v.Configuration }).(DynamicSecretAwsIamConfigurationOutput)
}

// The default TTL that will be applied for all the leases.
func (o DynamicSecretAwsIamOutput) DefaultTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringOutput { return v.DefaultTtl }).(pulumi.StringOutput)
}

// The slug of the environment to create the dynamic secret in.
func (o DynamicSecretAwsIamOutput) EnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringOutput { return v.EnvironmentSlug }).(pulumi.StringOutput)
}

// The maximum limit a TTL can be leases or renewed.
func (o DynamicSecretAwsIamOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringPtrOutput { return v.MaxTtl }).(pulumi.StringPtrOutput)
}

// The metadata associated with this dynamic secret
func (o DynamicSecretAwsIamOutput) Metadatas() DynamicSecretAwsIamMetadataArrayOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) DynamicSecretAwsIamMetadataArrayOutput { return v.Metadatas }).(DynamicSecretAwsIamMetadataArrayOutput)
}

// The name of the dynamic secret.
func (o DynamicSecretAwsIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to create the dynamic secret in.
func (o DynamicSecretAwsIamOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The slug of the project to create dynamic secret in.
func (o DynamicSecretAwsIamOutput) ProjectSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringOutput { return v.ProjectSlug }).(pulumi.StringOutput)
}

// The username template of the dynamic secret
func (o DynamicSecretAwsIamOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretAwsIam) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type DynamicSecretAwsIamArrayOutput struct{ *pulumi.OutputState }

func (DynamicSecretAwsIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretAwsIam)(nil)).Elem()
}

func (o DynamicSecretAwsIamArrayOutput) ToDynamicSecretAwsIamArrayOutput() DynamicSecretAwsIamArrayOutput {
	return o
}

func (o DynamicSecretAwsIamArrayOutput) ToDynamicSecretAwsIamArrayOutputWithContext(ctx context.Context) DynamicSecretAwsIamArrayOutput {
	return o
}

func (o DynamicSecretAwsIamArrayOutput) Index(i pulumi.IntInput) DynamicSecretAwsIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicSecretAwsIam {
		return vs[0].([]*DynamicSecretAwsIam)[vs[1].(int)]
	}).(DynamicSecretAwsIamOutput)
}

type DynamicSecretAwsIamMapOutput struct{ *pulumi.OutputState }

func (DynamicSecretAwsIamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretAwsIam)(nil)).Elem()
}

func (o DynamicSecretAwsIamMapOutput) ToDynamicSecretAwsIamMapOutput() DynamicSecretAwsIamMapOutput {
	return o
}

func (o DynamicSecretAwsIamMapOutput) ToDynamicSecretAwsIamMapOutputWithContext(ctx context.Context) DynamicSecretAwsIamMapOutput {
	return o
}

func (o DynamicSecretAwsIamMapOutput) MapIndex(k pulumi.StringInput) DynamicSecretAwsIamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicSecretAwsIam {
		return vs[0].(map[string]*DynamicSecretAwsIam)[vs[1].(string)]
	}).(DynamicSecretAwsIamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretAwsIamInput)(nil)).Elem(), &DynamicSecretAwsIam{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretAwsIamArrayInput)(nil)).Elem(), DynamicSecretAwsIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretAwsIamMapInput)(nil)).Elem(), DynamicSecretAwsIamMap{})
	pulumi.RegisterOutputType(DynamicSecretAwsIamOutput{})
	pulumi.RegisterOutputType(DynamicSecretAwsIamArrayOutput{})
	pulumi.RegisterOutputType(DynamicSecretAwsIamMapOutput{})
}
