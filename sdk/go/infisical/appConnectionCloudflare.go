// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionCloudflare struct {
	pulumi.CustomResourceState

	// The credentials for the Cloudflare App Connection
	Credentials AppConnectionCloudflareCredentialsOutput `pulumi:"credentials"`
	// The hash of the Cloudflare App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the Cloudflare App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with Cloudflare. Possible values are: api-token
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the Cloudflare App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionCloudflare registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionCloudflare(ctx *pulumi.Context,
	name string, args *AppConnectionCloudflareArgs, opts ...pulumi.ResourceOption) (*AppConnectionCloudflare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionCloudflare
	err := ctx.RegisterResource("infisical:index/appConnectionCloudflare:AppConnectionCloudflare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionCloudflare gets an existing AppConnectionCloudflare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionCloudflare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionCloudflareState, opts ...pulumi.ResourceOption) (*AppConnectionCloudflare, error) {
	var resource AppConnectionCloudflare
	err := ctx.ReadResource("infisical:index/appConnectionCloudflare:AppConnectionCloudflare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionCloudflare resources.
type appConnectionCloudflareState struct {
	// The credentials for the Cloudflare App Connection
	Credentials *AppConnectionCloudflareCredentials `pulumi:"credentials"`
	// The hash of the Cloudflare App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the Cloudflare App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Cloudflare. Possible values are: api-token
	Method *string `pulumi:"method"`
	// The name of the Cloudflare App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionCloudflareState struct {
	// The credentials for the Cloudflare App Connection
	Credentials AppConnectionCloudflareCredentialsPtrInput
	// The hash of the Cloudflare App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the Cloudflare App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Cloudflare. Possible values are: api-token
	Method pulumi.StringPtrInput
	// The name of the Cloudflare App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionCloudflareState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionCloudflareState)(nil)).Elem()
}

type appConnectionCloudflareArgs struct {
	// The credentials for the Cloudflare App Connection
	Credentials AppConnectionCloudflareCredentials `pulumi:"credentials"`
	// An optional description for the Cloudflare App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Cloudflare. Possible values are: api-token
	Method string `pulumi:"method"`
	// The name of the Cloudflare App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionCloudflare resource.
type AppConnectionCloudflareArgs struct {
	// The credentials for the Cloudflare App Connection
	Credentials AppConnectionCloudflareCredentialsInput
	// An optional description for the Cloudflare App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Cloudflare. Possible values are: api-token
	Method pulumi.StringInput
	// The name of the Cloudflare App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionCloudflareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionCloudflareArgs)(nil)).Elem()
}

type AppConnectionCloudflareInput interface {
	pulumi.Input

	ToAppConnectionCloudflareOutput() AppConnectionCloudflareOutput
	ToAppConnectionCloudflareOutputWithContext(ctx context.Context) AppConnectionCloudflareOutput
}

func (*AppConnectionCloudflare) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionCloudflare)(nil)).Elem()
}

func (i *AppConnectionCloudflare) ToAppConnectionCloudflareOutput() AppConnectionCloudflareOutput {
	return i.ToAppConnectionCloudflareOutputWithContext(context.Background())
}

func (i *AppConnectionCloudflare) ToAppConnectionCloudflareOutputWithContext(ctx context.Context) AppConnectionCloudflareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionCloudflareOutput)
}

// AppConnectionCloudflareArrayInput is an input type that accepts AppConnectionCloudflareArray and AppConnectionCloudflareArrayOutput values.
// You can construct a concrete instance of `AppConnectionCloudflareArrayInput` via:
//
//	AppConnectionCloudflareArray{ AppConnectionCloudflareArgs{...} }
type AppConnectionCloudflareArrayInput interface {
	pulumi.Input

	ToAppConnectionCloudflareArrayOutput() AppConnectionCloudflareArrayOutput
	ToAppConnectionCloudflareArrayOutputWithContext(context.Context) AppConnectionCloudflareArrayOutput
}

type AppConnectionCloudflareArray []AppConnectionCloudflareInput

func (AppConnectionCloudflareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionCloudflare)(nil)).Elem()
}

func (i AppConnectionCloudflareArray) ToAppConnectionCloudflareArrayOutput() AppConnectionCloudflareArrayOutput {
	return i.ToAppConnectionCloudflareArrayOutputWithContext(context.Background())
}

func (i AppConnectionCloudflareArray) ToAppConnectionCloudflareArrayOutputWithContext(ctx context.Context) AppConnectionCloudflareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionCloudflareArrayOutput)
}

// AppConnectionCloudflareMapInput is an input type that accepts AppConnectionCloudflareMap and AppConnectionCloudflareMapOutput values.
// You can construct a concrete instance of `AppConnectionCloudflareMapInput` via:
//
//	AppConnectionCloudflareMap{ "key": AppConnectionCloudflareArgs{...} }
type AppConnectionCloudflareMapInput interface {
	pulumi.Input

	ToAppConnectionCloudflareMapOutput() AppConnectionCloudflareMapOutput
	ToAppConnectionCloudflareMapOutputWithContext(context.Context) AppConnectionCloudflareMapOutput
}

type AppConnectionCloudflareMap map[string]AppConnectionCloudflareInput

func (AppConnectionCloudflareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionCloudflare)(nil)).Elem()
}

func (i AppConnectionCloudflareMap) ToAppConnectionCloudflareMapOutput() AppConnectionCloudflareMapOutput {
	return i.ToAppConnectionCloudflareMapOutputWithContext(context.Background())
}

func (i AppConnectionCloudflareMap) ToAppConnectionCloudflareMapOutputWithContext(ctx context.Context) AppConnectionCloudflareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionCloudflareMapOutput)
}

type AppConnectionCloudflareOutput struct{ *pulumi.OutputState }

func (AppConnectionCloudflareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionCloudflare)(nil)).Elem()
}

func (o AppConnectionCloudflareOutput) ToAppConnectionCloudflareOutput() AppConnectionCloudflareOutput {
	return o
}

func (o AppConnectionCloudflareOutput) ToAppConnectionCloudflareOutputWithContext(ctx context.Context) AppConnectionCloudflareOutput {
	return o
}

// The credentials for the Cloudflare App Connection
func (o AppConnectionCloudflareOutput) Credentials() AppConnectionCloudflareCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionCloudflare) AppConnectionCloudflareCredentialsOutput { return v.Credentials }).(AppConnectionCloudflareCredentialsOutput)
}

// The hash of the Cloudflare App Connection credentials
func (o AppConnectionCloudflareOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionCloudflare) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the Cloudflare App Connection.
func (o AppConnectionCloudflareOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionCloudflare) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with Cloudflare. Possible values are: api-token
func (o AppConnectionCloudflareOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionCloudflare) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the Cloudflare App Connection to create. Must be slug-friendly
func (o AppConnectionCloudflareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionCloudflare) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionCloudflareArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionCloudflareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionCloudflare)(nil)).Elem()
}

func (o AppConnectionCloudflareArrayOutput) ToAppConnectionCloudflareArrayOutput() AppConnectionCloudflareArrayOutput {
	return o
}

func (o AppConnectionCloudflareArrayOutput) ToAppConnectionCloudflareArrayOutputWithContext(ctx context.Context) AppConnectionCloudflareArrayOutput {
	return o
}

func (o AppConnectionCloudflareArrayOutput) Index(i pulumi.IntInput) AppConnectionCloudflareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionCloudflare {
		return vs[0].([]*AppConnectionCloudflare)[vs[1].(int)]
	}).(AppConnectionCloudflareOutput)
}

type AppConnectionCloudflareMapOutput struct{ *pulumi.OutputState }

func (AppConnectionCloudflareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionCloudflare)(nil)).Elem()
}

func (o AppConnectionCloudflareMapOutput) ToAppConnectionCloudflareMapOutput() AppConnectionCloudflareMapOutput {
	return o
}

func (o AppConnectionCloudflareMapOutput) ToAppConnectionCloudflareMapOutputWithContext(ctx context.Context) AppConnectionCloudflareMapOutput {
	return o
}

func (o AppConnectionCloudflareMapOutput) MapIndex(k pulumi.StringInput) AppConnectionCloudflareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionCloudflare {
		return vs[0].(map[string]*AppConnectionCloudflare)[vs[1].(string)]
	}).(AppConnectionCloudflareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionCloudflareInput)(nil)).Elem(), &AppConnectionCloudflare{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionCloudflareArrayInput)(nil)).Elem(), AppConnectionCloudflareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionCloudflareMapInput)(nil)).Elem(), AppConnectionCloudflareMap{})
	pulumi.RegisterOutputType(AppConnectionCloudflareOutput{})
	pulumi.RegisterOutputType(AppConnectionCloudflareArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionCloudflareMapOutput{})
}
