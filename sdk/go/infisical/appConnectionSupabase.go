// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionSupabase struct {
	pulumi.CustomResourceState

	// The credentials for the Supabase App Connection
	Credentials AppConnectionSupabaseCredentialsOutput `pulumi:"credentials"`
	// The hash of the Supabase App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the Supabase App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with Supabase. Possible values are: access-token
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the Supabase App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionSupabase registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionSupabase(ctx *pulumi.Context,
	name string, args *AppConnectionSupabaseArgs, opts ...pulumi.ResourceOption) (*AppConnectionSupabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionSupabase
	err := ctx.RegisterResource("infisical:index/appConnectionSupabase:AppConnectionSupabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionSupabase gets an existing AppConnectionSupabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionSupabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionSupabaseState, opts ...pulumi.ResourceOption) (*AppConnectionSupabase, error) {
	var resource AppConnectionSupabase
	err := ctx.ReadResource("infisical:index/appConnectionSupabase:AppConnectionSupabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionSupabase resources.
type appConnectionSupabaseState struct {
	// The credentials for the Supabase App Connection
	Credentials *AppConnectionSupabaseCredentials `pulumi:"credentials"`
	// The hash of the Supabase App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the Supabase App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Supabase. Possible values are: access-token
	Method *string `pulumi:"method"`
	// The name of the Supabase App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionSupabaseState struct {
	// The credentials for the Supabase App Connection
	Credentials AppConnectionSupabaseCredentialsPtrInput
	// The hash of the Supabase App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the Supabase App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Supabase. Possible values are: access-token
	Method pulumi.StringPtrInput
	// The name of the Supabase App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionSupabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionSupabaseState)(nil)).Elem()
}

type appConnectionSupabaseArgs struct {
	// The credentials for the Supabase App Connection
	Credentials AppConnectionSupabaseCredentials `pulumi:"credentials"`
	// An optional description for the Supabase App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Supabase. Possible values are: access-token
	Method string `pulumi:"method"`
	// The name of the Supabase App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionSupabase resource.
type AppConnectionSupabaseArgs struct {
	// The credentials for the Supabase App Connection
	Credentials AppConnectionSupabaseCredentialsInput
	// An optional description for the Supabase App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Supabase. Possible values are: access-token
	Method pulumi.StringInput
	// The name of the Supabase App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionSupabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionSupabaseArgs)(nil)).Elem()
}

type AppConnectionSupabaseInput interface {
	pulumi.Input

	ToAppConnectionSupabaseOutput() AppConnectionSupabaseOutput
	ToAppConnectionSupabaseOutputWithContext(ctx context.Context) AppConnectionSupabaseOutput
}

func (*AppConnectionSupabase) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionSupabase)(nil)).Elem()
}

func (i *AppConnectionSupabase) ToAppConnectionSupabaseOutput() AppConnectionSupabaseOutput {
	return i.ToAppConnectionSupabaseOutputWithContext(context.Background())
}

func (i *AppConnectionSupabase) ToAppConnectionSupabaseOutputWithContext(ctx context.Context) AppConnectionSupabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionSupabaseOutput)
}

// AppConnectionSupabaseArrayInput is an input type that accepts AppConnectionSupabaseArray and AppConnectionSupabaseArrayOutput values.
// You can construct a concrete instance of `AppConnectionSupabaseArrayInput` via:
//
//	AppConnectionSupabaseArray{ AppConnectionSupabaseArgs{...} }
type AppConnectionSupabaseArrayInput interface {
	pulumi.Input

	ToAppConnectionSupabaseArrayOutput() AppConnectionSupabaseArrayOutput
	ToAppConnectionSupabaseArrayOutputWithContext(context.Context) AppConnectionSupabaseArrayOutput
}

type AppConnectionSupabaseArray []AppConnectionSupabaseInput

func (AppConnectionSupabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionSupabase)(nil)).Elem()
}

func (i AppConnectionSupabaseArray) ToAppConnectionSupabaseArrayOutput() AppConnectionSupabaseArrayOutput {
	return i.ToAppConnectionSupabaseArrayOutputWithContext(context.Background())
}

func (i AppConnectionSupabaseArray) ToAppConnectionSupabaseArrayOutputWithContext(ctx context.Context) AppConnectionSupabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionSupabaseArrayOutput)
}

// AppConnectionSupabaseMapInput is an input type that accepts AppConnectionSupabaseMap and AppConnectionSupabaseMapOutput values.
// You can construct a concrete instance of `AppConnectionSupabaseMapInput` via:
//
//	AppConnectionSupabaseMap{ "key": AppConnectionSupabaseArgs{...} }
type AppConnectionSupabaseMapInput interface {
	pulumi.Input

	ToAppConnectionSupabaseMapOutput() AppConnectionSupabaseMapOutput
	ToAppConnectionSupabaseMapOutputWithContext(context.Context) AppConnectionSupabaseMapOutput
}

type AppConnectionSupabaseMap map[string]AppConnectionSupabaseInput

func (AppConnectionSupabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionSupabase)(nil)).Elem()
}

func (i AppConnectionSupabaseMap) ToAppConnectionSupabaseMapOutput() AppConnectionSupabaseMapOutput {
	return i.ToAppConnectionSupabaseMapOutputWithContext(context.Background())
}

func (i AppConnectionSupabaseMap) ToAppConnectionSupabaseMapOutputWithContext(ctx context.Context) AppConnectionSupabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionSupabaseMapOutput)
}

type AppConnectionSupabaseOutput struct{ *pulumi.OutputState }

func (AppConnectionSupabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionSupabase)(nil)).Elem()
}

func (o AppConnectionSupabaseOutput) ToAppConnectionSupabaseOutput() AppConnectionSupabaseOutput {
	return o
}

func (o AppConnectionSupabaseOutput) ToAppConnectionSupabaseOutputWithContext(ctx context.Context) AppConnectionSupabaseOutput {
	return o
}

// The credentials for the Supabase App Connection
func (o AppConnectionSupabaseOutput) Credentials() AppConnectionSupabaseCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionSupabase) AppConnectionSupabaseCredentialsOutput { return v.Credentials }).(AppConnectionSupabaseCredentialsOutput)
}

// The hash of the Supabase App Connection credentials
func (o AppConnectionSupabaseOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionSupabase) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the Supabase App Connection.
func (o AppConnectionSupabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionSupabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with Supabase. Possible values are: access-token
func (o AppConnectionSupabaseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionSupabase) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the Supabase App Connection to create. Must be slug-friendly
func (o AppConnectionSupabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionSupabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionSupabaseArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionSupabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionSupabase)(nil)).Elem()
}

func (o AppConnectionSupabaseArrayOutput) ToAppConnectionSupabaseArrayOutput() AppConnectionSupabaseArrayOutput {
	return o
}

func (o AppConnectionSupabaseArrayOutput) ToAppConnectionSupabaseArrayOutputWithContext(ctx context.Context) AppConnectionSupabaseArrayOutput {
	return o
}

func (o AppConnectionSupabaseArrayOutput) Index(i pulumi.IntInput) AppConnectionSupabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionSupabase {
		return vs[0].([]*AppConnectionSupabase)[vs[1].(int)]
	}).(AppConnectionSupabaseOutput)
}

type AppConnectionSupabaseMapOutput struct{ *pulumi.OutputState }

func (AppConnectionSupabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionSupabase)(nil)).Elem()
}

func (o AppConnectionSupabaseMapOutput) ToAppConnectionSupabaseMapOutput() AppConnectionSupabaseMapOutput {
	return o
}

func (o AppConnectionSupabaseMapOutput) ToAppConnectionSupabaseMapOutputWithContext(ctx context.Context) AppConnectionSupabaseMapOutput {
	return o
}

func (o AppConnectionSupabaseMapOutput) MapIndex(k pulumi.StringInput) AppConnectionSupabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionSupabase {
		return vs[0].(map[string]*AppConnectionSupabase)[vs[1].(string)]
	}).(AppConnectionSupabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionSupabaseInput)(nil)).Elem(), &AppConnectionSupabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionSupabaseArrayInput)(nil)).Elem(), AppConnectionSupabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionSupabaseMapInput)(nil)).Elem(), AppConnectionSupabaseMap{})
	pulumi.RegisterOutputType(AppConnectionSupabaseOutput{})
	pulumi.RegisterOutputType(AppConnectionSupabaseArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionSupabaseMapOutput{})
}
