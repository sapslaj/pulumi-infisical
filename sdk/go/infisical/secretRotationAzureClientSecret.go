// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationAzureClientSecret struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAzureClientSecretParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAzureClientSecretRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAzureClientSecretSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAzureClientSecretTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationAzureClientSecret registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationAzureClientSecret(ctx *pulumi.Context,
	name string, args *SecretRotationAzureClientSecretArgs, opts ...pulumi.ResourceOption) (*SecretRotationAzureClientSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationAzureClientSecret
	err := ctx.RegisterResource("infisical:index/secretRotationAzureClientSecret:SecretRotationAzureClientSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationAzureClientSecret gets an existing SecretRotationAzureClientSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationAzureClientSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationAzureClientSecretState, opts ...pulumi.ResourceOption) (*SecretRotationAzureClientSecret, error) {
	var resource SecretRotationAzureClientSecret
	err := ctx.ReadResource("infisical:index/secretRotationAzureClientSecret:SecretRotationAzureClientSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationAzureClientSecret resources.
type secretRotationAzureClientSecretState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationAzureClientSecretParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationAzureClientSecretRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationAzureClientSecretSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationAzureClientSecretTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationAzureClientSecretState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAzureClientSecretParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAzureClientSecretRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAzureClientSecretSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAzureClientSecretTemporaryParametersPtrInput
}

func (SecretRotationAzureClientSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationAzureClientSecretState)(nil)).Elem()
}

type secretRotationAzureClientSecretArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAzureClientSecretParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationAzureClientSecretRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAzureClientSecretSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationAzureClientSecretTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationAzureClientSecret resource.
type SecretRotationAzureClientSecretArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAzureClientSecretParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAzureClientSecretRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAzureClientSecretSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAzureClientSecretTemporaryParametersPtrInput
}

func (SecretRotationAzureClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationAzureClientSecretArgs)(nil)).Elem()
}

type SecretRotationAzureClientSecretInput interface {
	pulumi.Input

	ToSecretRotationAzureClientSecretOutput() SecretRotationAzureClientSecretOutput
	ToSecretRotationAzureClientSecretOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretOutput
}

func (*SecretRotationAzureClientSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationAzureClientSecret)(nil)).Elem()
}

func (i *SecretRotationAzureClientSecret) ToSecretRotationAzureClientSecretOutput() SecretRotationAzureClientSecretOutput {
	return i.ToSecretRotationAzureClientSecretOutputWithContext(context.Background())
}

func (i *SecretRotationAzureClientSecret) ToSecretRotationAzureClientSecretOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAzureClientSecretOutput)
}

// SecretRotationAzureClientSecretArrayInput is an input type that accepts SecretRotationAzureClientSecretArray and SecretRotationAzureClientSecretArrayOutput values.
// You can construct a concrete instance of `SecretRotationAzureClientSecretArrayInput` via:
//
//	SecretRotationAzureClientSecretArray{ SecretRotationAzureClientSecretArgs{...} }
type SecretRotationAzureClientSecretArrayInput interface {
	pulumi.Input

	ToSecretRotationAzureClientSecretArrayOutput() SecretRotationAzureClientSecretArrayOutput
	ToSecretRotationAzureClientSecretArrayOutputWithContext(context.Context) SecretRotationAzureClientSecretArrayOutput
}

type SecretRotationAzureClientSecretArray []SecretRotationAzureClientSecretInput

func (SecretRotationAzureClientSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationAzureClientSecret)(nil)).Elem()
}

func (i SecretRotationAzureClientSecretArray) ToSecretRotationAzureClientSecretArrayOutput() SecretRotationAzureClientSecretArrayOutput {
	return i.ToSecretRotationAzureClientSecretArrayOutputWithContext(context.Background())
}

func (i SecretRotationAzureClientSecretArray) ToSecretRotationAzureClientSecretArrayOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAzureClientSecretArrayOutput)
}

// SecretRotationAzureClientSecretMapInput is an input type that accepts SecretRotationAzureClientSecretMap and SecretRotationAzureClientSecretMapOutput values.
// You can construct a concrete instance of `SecretRotationAzureClientSecretMapInput` via:
//
//	SecretRotationAzureClientSecretMap{ "key": SecretRotationAzureClientSecretArgs{...} }
type SecretRotationAzureClientSecretMapInput interface {
	pulumi.Input

	ToSecretRotationAzureClientSecretMapOutput() SecretRotationAzureClientSecretMapOutput
	ToSecretRotationAzureClientSecretMapOutputWithContext(context.Context) SecretRotationAzureClientSecretMapOutput
}

type SecretRotationAzureClientSecretMap map[string]SecretRotationAzureClientSecretInput

func (SecretRotationAzureClientSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationAzureClientSecret)(nil)).Elem()
}

func (i SecretRotationAzureClientSecretMap) ToSecretRotationAzureClientSecretMapOutput() SecretRotationAzureClientSecretMapOutput {
	return i.ToSecretRotationAzureClientSecretMapOutputWithContext(context.Background())
}

func (i SecretRotationAzureClientSecretMap) ToSecretRotationAzureClientSecretMapOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAzureClientSecretMapOutput)
}

type SecretRotationAzureClientSecretOutput struct{ *pulumi.OutputState }

func (SecretRotationAzureClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationAzureClientSecret)(nil)).Elem()
}

func (o SecretRotationAzureClientSecretOutput) ToSecretRotationAzureClientSecretOutput() SecretRotationAzureClientSecretOutput {
	return o
}

func (o SecretRotationAzureClientSecretOutput) ToSecretRotationAzureClientSecretOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationAzureClientSecretOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationAzureClientSecretOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationAzureClientSecretOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationAzureClientSecretOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationAzureClientSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationAzureClientSecretOutput) Parameters() SecretRotationAzureClientSecretParametersOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) SecretRotationAzureClientSecretParametersOutput {
		return v.Parameters
	}).(SecretRotationAzureClientSecretParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationAzureClientSecretOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationAzureClientSecretOutput) RotateAtUtc() SecretRotationAzureClientSecretRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) SecretRotationAzureClientSecretRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationAzureClientSecretRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationAzureClientSecretOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationAzureClientSecretOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationAzureClientSecretOutput) SecretsMapping() SecretRotationAzureClientSecretSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) SecretRotationAzureClientSecretSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationAzureClientSecretSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationAzureClientSecretOutput) TemporaryParameters() SecretRotationAzureClientSecretTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationAzureClientSecret) SecretRotationAzureClientSecretTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationAzureClientSecretTemporaryParametersPtrOutput)
}

type SecretRotationAzureClientSecretArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationAzureClientSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationAzureClientSecret)(nil)).Elem()
}

func (o SecretRotationAzureClientSecretArrayOutput) ToSecretRotationAzureClientSecretArrayOutput() SecretRotationAzureClientSecretArrayOutput {
	return o
}

func (o SecretRotationAzureClientSecretArrayOutput) ToSecretRotationAzureClientSecretArrayOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretArrayOutput {
	return o
}

func (o SecretRotationAzureClientSecretArrayOutput) Index(i pulumi.IntInput) SecretRotationAzureClientSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationAzureClientSecret {
		return vs[0].([]*SecretRotationAzureClientSecret)[vs[1].(int)]
	}).(SecretRotationAzureClientSecretOutput)
}

type SecretRotationAzureClientSecretMapOutput struct{ *pulumi.OutputState }

func (SecretRotationAzureClientSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationAzureClientSecret)(nil)).Elem()
}

func (o SecretRotationAzureClientSecretMapOutput) ToSecretRotationAzureClientSecretMapOutput() SecretRotationAzureClientSecretMapOutput {
	return o
}

func (o SecretRotationAzureClientSecretMapOutput) ToSecretRotationAzureClientSecretMapOutputWithContext(ctx context.Context) SecretRotationAzureClientSecretMapOutput {
	return o
}

func (o SecretRotationAzureClientSecretMapOutput) MapIndex(k pulumi.StringInput) SecretRotationAzureClientSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationAzureClientSecret {
		return vs[0].(map[string]*SecretRotationAzureClientSecret)[vs[1].(string)]
	}).(SecretRotationAzureClientSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAzureClientSecretInput)(nil)).Elem(), &SecretRotationAzureClientSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAzureClientSecretArrayInput)(nil)).Elem(), SecretRotationAzureClientSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAzureClientSecretMapInput)(nil)).Elem(), SecretRotationAzureClientSecretMap{})
	pulumi.RegisterOutputType(SecretRotationAzureClientSecretOutput{})
	pulumi.RegisterOutputType(SecretRotationAzureClientSecretArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationAzureClientSecretMapOutput{})
}
