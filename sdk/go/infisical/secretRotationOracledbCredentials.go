// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationOracledbCredentials struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationOracledbCredentialsParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationOracledbCredentialsRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationOracledbCredentialsSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationOracledbCredentialsTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationOracledbCredentials registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationOracledbCredentials(ctx *pulumi.Context,
	name string, args *SecretRotationOracledbCredentialsArgs, opts ...pulumi.ResourceOption) (*SecretRotationOracledbCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationOracledbCredentials
	err := ctx.RegisterResource("infisical:index/secretRotationOracledbCredentials:SecretRotationOracledbCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationOracledbCredentials gets an existing SecretRotationOracledbCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationOracledbCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationOracledbCredentialsState, opts ...pulumi.ResourceOption) (*SecretRotationOracledbCredentials, error) {
	var resource SecretRotationOracledbCredentials
	err := ctx.ReadResource("infisical:index/secretRotationOracledbCredentials:SecretRotationOracledbCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationOracledbCredentials resources.
type secretRotationOracledbCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationOracledbCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationOracledbCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationOracledbCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationOracledbCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationOracledbCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationOracledbCredentialsParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationOracledbCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationOracledbCredentialsSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationOracledbCredentialsTemporaryParametersPtrInput
}

func (SecretRotationOracledbCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationOracledbCredentialsState)(nil)).Elem()
}

type secretRotationOracledbCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationOracledbCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationOracledbCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationOracledbCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationOracledbCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationOracledbCredentials resource.
type SecretRotationOracledbCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationOracledbCredentialsParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationOracledbCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationOracledbCredentialsSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationOracledbCredentialsTemporaryParametersPtrInput
}

func (SecretRotationOracledbCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationOracledbCredentialsArgs)(nil)).Elem()
}

type SecretRotationOracledbCredentialsInput interface {
	pulumi.Input

	ToSecretRotationOracledbCredentialsOutput() SecretRotationOracledbCredentialsOutput
	ToSecretRotationOracledbCredentialsOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsOutput
}

func (*SecretRotationOracledbCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationOracledbCredentials)(nil)).Elem()
}

func (i *SecretRotationOracledbCredentials) ToSecretRotationOracledbCredentialsOutput() SecretRotationOracledbCredentialsOutput {
	return i.ToSecretRotationOracledbCredentialsOutputWithContext(context.Background())
}

func (i *SecretRotationOracledbCredentials) ToSecretRotationOracledbCredentialsOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationOracledbCredentialsOutput)
}

// SecretRotationOracledbCredentialsArrayInput is an input type that accepts SecretRotationOracledbCredentialsArray and SecretRotationOracledbCredentialsArrayOutput values.
// You can construct a concrete instance of `SecretRotationOracledbCredentialsArrayInput` via:
//
//	SecretRotationOracledbCredentialsArray{ SecretRotationOracledbCredentialsArgs{...} }
type SecretRotationOracledbCredentialsArrayInput interface {
	pulumi.Input

	ToSecretRotationOracledbCredentialsArrayOutput() SecretRotationOracledbCredentialsArrayOutput
	ToSecretRotationOracledbCredentialsArrayOutputWithContext(context.Context) SecretRotationOracledbCredentialsArrayOutput
}

type SecretRotationOracledbCredentialsArray []SecretRotationOracledbCredentialsInput

func (SecretRotationOracledbCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationOracledbCredentials)(nil)).Elem()
}

func (i SecretRotationOracledbCredentialsArray) ToSecretRotationOracledbCredentialsArrayOutput() SecretRotationOracledbCredentialsArrayOutput {
	return i.ToSecretRotationOracledbCredentialsArrayOutputWithContext(context.Background())
}

func (i SecretRotationOracledbCredentialsArray) ToSecretRotationOracledbCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationOracledbCredentialsArrayOutput)
}

// SecretRotationOracledbCredentialsMapInput is an input type that accepts SecretRotationOracledbCredentialsMap and SecretRotationOracledbCredentialsMapOutput values.
// You can construct a concrete instance of `SecretRotationOracledbCredentialsMapInput` via:
//
//	SecretRotationOracledbCredentialsMap{ "key": SecretRotationOracledbCredentialsArgs{...} }
type SecretRotationOracledbCredentialsMapInput interface {
	pulumi.Input

	ToSecretRotationOracledbCredentialsMapOutput() SecretRotationOracledbCredentialsMapOutput
	ToSecretRotationOracledbCredentialsMapOutputWithContext(context.Context) SecretRotationOracledbCredentialsMapOutput
}

type SecretRotationOracledbCredentialsMap map[string]SecretRotationOracledbCredentialsInput

func (SecretRotationOracledbCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationOracledbCredentials)(nil)).Elem()
}

func (i SecretRotationOracledbCredentialsMap) ToSecretRotationOracledbCredentialsMapOutput() SecretRotationOracledbCredentialsMapOutput {
	return i.ToSecretRotationOracledbCredentialsMapOutputWithContext(context.Background())
}

func (i SecretRotationOracledbCredentialsMap) ToSecretRotationOracledbCredentialsMapOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationOracledbCredentialsMapOutput)
}

type SecretRotationOracledbCredentialsOutput struct{ *pulumi.OutputState }

func (SecretRotationOracledbCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationOracledbCredentials)(nil)).Elem()
}

func (o SecretRotationOracledbCredentialsOutput) ToSecretRotationOracledbCredentialsOutput() SecretRotationOracledbCredentialsOutput {
	return o
}

func (o SecretRotationOracledbCredentialsOutput) ToSecretRotationOracledbCredentialsOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationOracledbCredentialsOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationOracledbCredentialsOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationOracledbCredentialsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationOracledbCredentialsOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationOracledbCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationOracledbCredentialsOutput) Parameters() SecretRotationOracledbCredentialsParametersOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) SecretRotationOracledbCredentialsParametersOutput {
		return v.Parameters
	}).(SecretRotationOracledbCredentialsParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationOracledbCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationOracledbCredentialsOutput) RotateAtUtc() SecretRotationOracledbCredentialsRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) SecretRotationOracledbCredentialsRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationOracledbCredentialsRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationOracledbCredentialsOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationOracledbCredentialsOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationOracledbCredentialsOutput) SecretsMapping() SecretRotationOracledbCredentialsSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) SecretRotationOracledbCredentialsSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationOracledbCredentialsSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationOracledbCredentialsOutput) TemporaryParameters() SecretRotationOracledbCredentialsTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationOracledbCredentials) SecretRotationOracledbCredentialsTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationOracledbCredentialsTemporaryParametersPtrOutput)
}

type SecretRotationOracledbCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationOracledbCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationOracledbCredentials)(nil)).Elem()
}

func (o SecretRotationOracledbCredentialsArrayOutput) ToSecretRotationOracledbCredentialsArrayOutput() SecretRotationOracledbCredentialsArrayOutput {
	return o
}

func (o SecretRotationOracledbCredentialsArrayOutput) ToSecretRotationOracledbCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsArrayOutput {
	return o
}

func (o SecretRotationOracledbCredentialsArrayOutput) Index(i pulumi.IntInput) SecretRotationOracledbCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationOracledbCredentials {
		return vs[0].([]*SecretRotationOracledbCredentials)[vs[1].(int)]
	}).(SecretRotationOracledbCredentialsOutput)
}

type SecretRotationOracledbCredentialsMapOutput struct{ *pulumi.OutputState }

func (SecretRotationOracledbCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationOracledbCredentials)(nil)).Elem()
}

func (o SecretRotationOracledbCredentialsMapOutput) ToSecretRotationOracledbCredentialsMapOutput() SecretRotationOracledbCredentialsMapOutput {
	return o
}

func (o SecretRotationOracledbCredentialsMapOutput) ToSecretRotationOracledbCredentialsMapOutputWithContext(ctx context.Context) SecretRotationOracledbCredentialsMapOutput {
	return o
}

func (o SecretRotationOracledbCredentialsMapOutput) MapIndex(k pulumi.StringInput) SecretRotationOracledbCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationOracledbCredentials {
		return vs[0].(map[string]*SecretRotationOracledbCredentials)[vs[1].(string)]
	}).(SecretRotationOracledbCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationOracledbCredentialsInput)(nil)).Elem(), &SecretRotationOracledbCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationOracledbCredentialsArrayInput)(nil)).Elem(), SecretRotationOracledbCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationOracledbCredentialsMapInput)(nil)).Elem(), SecretRotationOracledbCredentialsMap{})
	pulumi.RegisterOutputType(SecretRotationOracledbCredentialsOutput{})
	pulumi.RegisterOutputType(SecretRotationOracledbCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationOracledbCredentialsMapOutput{})
}
