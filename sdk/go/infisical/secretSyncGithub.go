// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncGithub struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the github Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Github sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGithubDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Github sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGithubSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncGithub registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncGithub(ctx *pulumi.Context,
	name string, args *SecretSyncGithubArgs, opts ...pulumi.ResourceOption) (*SecretSyncGithub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncGithub
	err := ctx.RegisterResource("infisical:index/secretSyncGithub:SecretSyncGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncGithub gets an existing SecretSyncGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncGithubState, opts ...pulumi.ResourceOption) (*SecretSyncGithub, error) {
	var resource SecretSyncGithub
	err := ctx.ReadResource("infisical:index/secretSyncGithub:SecretSyncGithub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncGithub resources.
type secretSyncGithubState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the github Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Github sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncGithubDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Github sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncGithubSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncGithubState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the github Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Github sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGithubDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Github sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGithubSyncOptionsPtrInput
}

func (SecretSyncGithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncGithubState)(nil)).Elem()
}

type secretSyncGithubArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the github Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Github sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGithubDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Github sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGithubSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncGithub resource.
type SecretSyncGithubArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the github Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Github sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncGithubDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Github sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncGithubSyncOptionsInput
}

func (SecretSyncGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncGithubArgs)(nil)).Elem()
}

type SecretSyncGithubInput interface {
	pulumi.Input

	ToSecretSyncGithubOutput() SecretSyncGithubOutput
	ToSecretSyncGithubOutputWithContext(ctx context.Context) SecretSyncGithubOutput
}

func (*SecretSyncGithub) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncGithub)(nil)).Elem()
}

func (i *SecretSyncGithub) ToSecretSyncGithubOutput() SecretSyncGithubOutput {
	return i.ToSecretSyncGithubOutputWithContext(context.Background())
}

func (i *SecretSyncGithub) ToSecretSyncGithubOutputWithContext(ctx context.Context) SecretSyncGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGithubOutput)
}

// SecretSyncGithubArrayInput is an input type that accepts SecretSyncGithubArray and SecretSyncGithubArrayOutput values.
// You can construct a concrete instance of `SecretSyncGithubArrayInput` via:
//
//	SecretSyncGithubArray{ SecretSyncGithubArgs{...} }
type SecretSyncGithubArrayInput interface {
	pulumi.Input

	ToSecretSyncGithubArrayOutput() SecretSyncGithubArrayOutput
	ToSecretSyncGithubArrayOutputWithContext(context.Context) SecretSyncGithubArrayOutput
}

type SecretSyncGithubArray []SecretSyncGithubInput

func (SecretSyncGithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncGithub)(nil)).Elem()
}

func (i SecretSyncGithubArray) ToSecretSyncGithubArrayOutput() SecretSyncGithubArrayOutput {
	return i.ToSecretSyncGithubArrayOutputWithContext(context.Background())
}

func (i SecretSyncGithubArray) ToSecretSyncGithubArrayOutputWithContext(ctx context.Context) SecretSyncGithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGithubArrayOutput)
}

// SecretSyncGithubMapInput is an input type that accepts SecretSyncGithubMap and SecretSyncGithubMapOutput values.
// You can construct a concrete instance of `SecretSyncGithubMapInput` via:
//
//	SecretSyncGithubMap{ "key": SecretSyncGithubArgs{...} }
type SecretSyncGithubMapInput interface {
	pulumi.Input

	ToSecretSyncGithubMapOutput() SecretSyncGithubMapOutput
	ToSecretSyncGithubMapOutputWithContext(context.Context) SecretSyncGithubMapOutput
}

type SecretSyncGithubMap map[string]SecretSyncGithubInput

func (SecretSyncGithubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncGithub)(nil)).Elem()
}

func (i SecretSyncGithubMap) ToSecretSyncGithubMapOutput() SecretSyncGithubMapOutput {
	return i.ToSecretSyncGithubMapOutputWithContext(context.Background())
}

func (i SecretSyncGithubMap) ToSecretSyncGithubMapOutputWithContext(ctx context.Context) SecretSyncGithubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncGithubMapOutput)
}

type SecretSyncGithubOutput struct{ *pulumi.OutputState }

func (SecretSyncGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncGithub)(nil)).Elem()
}

func (o SecretSyncGithubOutput) ToSecretSyncGithubOutput() SecretSyncGithubOutput {
	return o
}

func (o SecretSyncGithubOutput) ToSecretSyncGithubOutputWithContext(ctx context.Context) SecretSyncGithubOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncGithubOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the github Connection to use for syncing.
func (o SecretSyncGithubOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Github sync.
func (o SecretSyncGithubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncGithubOutput) DestinationConfig() SecretSyncGithubDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncGithub) SecretSyncGithubDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncGithubDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncGithubOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Github sync to create. Must be slug-friendly.
func (o SecretSyncGithubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncGithubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncGithubOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncGithub) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncGithubOutput) SyncOptions() SecretSyncGithubSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncGithub) SecretSyncGithubSyncOptionsOutput { return v.SyncOptions }).(SecretSyncGithubSyncOptionsOutput)
}

type SecretSyncGithubArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncGithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncGithub)(nil)).Elem()
}

func (o SecretSyncGithubArrayOutput) ToSecretSyncGithubArrayOutput() SecretSyncGithubArrayOutput {
	return o
}

func (o SecretSyncGithubArrayOutput) ToSecretSyncGithubArrayOutputWithContext(ctx context.Context) SecretSyncGithubArrayOutput {
	return o
}

func (o SecretSyncGithubArrayOutput) Index(i pulumi.IntInput) SecretSyncGithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncGithub {
		return vs[0].([]*SecretSyncGithub)[vs[1].(int)]
	}).(SecretSyncGithubOutput)
}

type SecretSyncGithubMapOutput struct{ *pulumi.OutputState }

func (SecretSyncGithubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncGithub)(nil)).Elem()
}

func (o SecretSyncGithubMapOutput) ToSecretSyncGithubMapOutput() SecretSyncGithubMapOutput {
	return o
}

func (o SecretSyncGithubMapOutput) ToSecretSyncGithubMapOutputWithContext(ctx context.Context) SecretSyncGithubMapOutput {
	return o
}

func (o SecretSyncGithubMapOutput) MapIndex(k pulumi.StringInput) SecretSyncGithubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncGithub {
		return vs[0].(map[string]*SecretSyncGithub)[vs[1].(string)]
	}).(SecretSyncGithubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGithubInput)(nil)).Elem(), &SecretSyncGithub{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGithubArrayInput)(nil)).Elem(), SecretSyncGithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncGithubMapInput)(nil)).Elem(), SecretSyncGithubMap{})
	pulumi.RegisterOutputType(SecretSyncGithubOutput{})
	pulumi.RegisterOutputType(SecretSyncGithubArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncGithubMapOutput{})
}
