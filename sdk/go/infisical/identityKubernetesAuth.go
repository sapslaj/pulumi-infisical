// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IdentityKubernetesAuth struct {
	pulumi.CustomResourceState

	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntOutput `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntOutput `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityKubernetesAuthAccessTokenTrustedIpArrayOutput `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntOutput `pulumi:"accessTokenTtl"`
	// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
	AllowedAudience pulumi.StringOutput `pulumi:"allowedAudience"`
	// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
	AllowedNamespaces pulumi.StringArrayOutput `pulumi:"allowedNamespaces"`
	// List of trusted service account names that are allowed to authenticate with Infisical.
	AllowedServiceAccountNames pulumi.StringArrayOutput `pulumi:"allowedServiceAccountNames"`
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
	KubernetesCaCertificate pulumi.StringOutput `pulumi:"kubernetesCaCertificate"`
	// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
	KubernetesHost pulumi.StringOutput `pulumi:"kubernetesHost"`
	// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
	TokenReviewerJwt pulumi.StringOutput `pulumi:"tokenReviewerJwt"`
}

// NewIdentityKubernetesAuth registers a new resource with the given unique name, arguments, and options.
func NewIdentityKubernetesAuth(ctx *pulumi.Context,
	name string, args *IdentityKubernetesAuthArgs, opts ...pulumi.ResourceOption) (*IdentityKubernetesAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.KubernetesHost == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesHost'")
	}
	if args.TokenReviewerJwt == nil {
		return nil, errors.New("invalid value for required argument 'TokenReviewerJwt'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityKubernetesAuth
	err := ctx.RegisterResource("infisical:index/identityKubernetesAuth:IdentityKubernetesAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityKubernetesAuth gets an existing IdentityKubernetesAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityKubernetesAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityKubernetesAuthState, opts ...pulumi.ResourceOption) (*IdentityKubernetesAuth, error) {
	var resource IdentityKubernetesAuth
	err := ctx.ReadResource("infisical:index/identityKubernetesAuth:IdentityKubernetesAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityKubernetesAuth resources.
type identityKubernetesAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityKubernetesAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
	AllowedAudience *string `pulumi:"allowedAudience"`
	// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
	AllowedNamespaces []string `pulumi:"allowedNamespaces"`
	// List of trusted service account names that are allowed to authenticate with Infisical.
	AllowedServiceAccountNames []string `pulumi:"allowedServiceAccountNames"`
	// The ID of the identity to attach the configuration onto.
	IdentityId *string `pulumi:"identityId"`
	// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
	KubernetesCaCertificate *string `pulumi:"kubernetesCaCertificate"`
	// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
	KubernetesHost *string `pulumi:"kubernetesHost"`
	// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
	TokenReviewerJwt *string `pulumi:"tokenReviewerJwt"`
}

type IdentityKubernetesAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityKubernetesAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
	AllowedAudience pulumi.StringPtrInput
	// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
	AllowedNamespaces pulumi.StringArrayInput
	// List of trusted service account names that are allowed to authenticate with Infisical.
	AllowedServiceAccountNames pulumi.StringArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringPtrInput
	// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
	KubernetesCaCertificate pulumi.StringPtrInput
	// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
	KubernetesHost pulumi.StringPtrInput
	// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
	TokenReviewerJwt pulumi.StringPtrInput
}

func (IdentityKubernetesAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityKubernetesAuthState)(nil)).Elem()
}

type identityKubernetesAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityKubernetesAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
	AllowedAudience *string `pulumi:"allowedAudience"`
	// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
	AllowedNamespaces []string `pulumi:"allowedNamespaces"`
	// List of trusted service account names that are allowed to authenticate with Infisical.
	AllowedServiceAccountNames []string `pulumi:"allowedServiceAccountNames"`
	// The ID of the identity to attach the configuration onto.
	IdentityId string `pulumi:"identityId"`
	// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
	KubernetesCaCertificate *string `pulumi:"kubernetesCaCertificate"`
	// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
	KubernetesHost string `pulumi:"kubernetesHost"`
	// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
	TokenReviewerJwt string `pulumi:"tokenReviewerJwt"`
}

// The set of arguments for constructing a IdentityKubernetesAuth resource.
type IdentityKubernetesAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityKubernetesAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
	AllowedAudience pulumi.StringPtrInput
	// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
	AllowedNamespaces pulumi.StringArrayInput
	// List of trusted service account names that are allowed to authenticate with Infisical.
	AllowedServiceAccountNames pulumi.StringArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringInput
	// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
	KubernetesCaCertificate pulumi.StringPtrInput
	// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
	KubernetesHost pulumi.StringInput
	// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
	TokenReviewerJwt pulumi.StringInput
}

func (IdentityKubernetesAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityKubernetesAuthArgs)(nil)).Elem()
}

type IdentityKubernetesAuthInput interface {
	pulumi.Input

	ToIdentityKubernetesAuthOutput() IdentityKubernetesAuthOutput
	ToIdentityKubernetesAuthOutputWithContext(ctx context.Context) IdentityKubernetesAuthOutput
}

func (*IdentityKubernetesAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityKubernetesAuth)(nil)).Elem()
}

func (i *IdentityKubernetesAuth) ToIdentityKubernetesAuthOutput() IdentityKubernetesAuthOutput {
	return i.ToIdentityKubernetesAuthOutputWithContext(context.Background())
}

func (i *IdentityKubernetesAuth) ToIdentityKubernetesAuthOutputWithContext(ctx context.Context) IdentityKubernetesAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityKubernetesAuthOutput)
}

// IdentityKubernetesAuthArrayInput is an input type that accepts IdentityKubernetesAuthArray and IdentityKubernetesAuthArrayOutput values.
// You can construct a concrete instance of `IdentityKubernetesAuthArrayInput` via:
//
//	IdentityKubernetesAuthArray{ IdentityKubernetesAuthArgs{...} }
type IdentityKubernetesAuthArrayInput interface {
	pulumi.Input

	ToIdentityKubernetesAuthArrayOutput() IdentityKubernetesAuthArrayOutput
	ToIdentityKubernetesAuthArrayOutputWithContext(context.Context) IdentityKubernetesAuthArrayOutput
}

type IdentityKubernetesAuthArray []IdentityKubernetesAuthInput

func (IdentityKubernetesAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityKubernetesAuth)(nil)).Elem()
}

func (i IdentityKubernetesAuthArray) ToIdentityKubernetesAuthArrayOutput() IdentityKubernetesAuthArrayOutput {
	return i.ToIdentityKubernetesAuthArrayOutputWithContext(context.Background())
}

func (i IdentityKubernetesAuthArray) ToIdentityKubernetesAuthArrayOutputWithContext(ctx context.Context) IdentityKubernetesAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityKubernetesAuthArrayOutput)
}

// IdentityKubernetesAuthMapInput is an input type that accepts IdentityKubernetesAuthMap and IdentityKubernetesAuthMapOutput values.
// You can construct a concrete instance of `IdentityKubernetesAuthMapInput` via:
//
//	IdentityKubernetesAuthMap{ "key": IdentityKubernetesAuthArgs{...} }
type IdentityKubernetesAuthMapInput interface {
	pulumi.Input

	ToIdentityKubernetesAuthMapOutput() IdentityKubernetesAuthMapOutput
	ToIdentityKubernetesAuthMapOutputWithContext(context.Context) IdentityKubernetesAuthMapOutput
}

type IdentityKubernetesAuthMap map[string]IdentityKubernetesAuthInput

func (IdentityKubernetesAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityKubernetesAuth)(nil)).Elem()
}

func (i IdentityKubernetesAuthMap) ToIdentityKubernetesAuthMapOutput() IdentityKubernetesAuthMapOutput {
	return i.ToIdentityKubernetesAuthMapOutputWithContext(context.Background())
}

func (i IdentityKubernetesAuthMap) ToIdentityKubernetesAuthMapOutputWithContext(ctx context.Context) IdentityKubernetesAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityKubernetesAuthMapOutput)
}

type IdentityKubernetesAuthOutput struct{ *pulumi.OutputState }

func (IdentityKubernetesAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityKubernetesAuth)(nil)).Elem()
}

func (o IdentityKubernetesAuthOutput) ToIdentityKubernetesAuthOutput() IdentityKubernetesAuthOutput {
	return o
}

func (o IdentityKubernetesAuthOutput) ToIdentityKubernetesAuthOutputWithContext(ctx context.Context) IdentityKubernetesAuthOutput {
	return o
}

// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityKubernetesAuthOutput) AccessTokenMaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.IntOutput { return v.AccessTokenMaxTtl }).(pulumi.IntOutput)
}

// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
func (o IdentityKubernetesAuthOutput) AccessTokenNumUsesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.IntOutput { return v.AccessTokenNumUsesLimit }).(pulumi.IntOutput)
}

// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
func (o IdentityKubernetesAuthOutput) AccessTokenTrustedIps() IdentityKubernetesAuthAccessTokenTrustedIpArrayOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) IdentityKubernetesAuthAccessTokenTrustedIpArrayOutput {
		return v.AccessTokenTrustedIps
	}).(IdentityKubernetesAuthAccessTokenTrustedIpArrayOutput)
}

// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityKubernetesAuthOutput) AccessTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.IntOutput { return v.AccessTokenTtl }).(pulumi.IntOutput)
}

// An optional audience claim that the service account JWT token must have to authenticate with Infisical.
func (o IdentityKubernetesAuthOutput) AllowedAudience() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringOutput { return v.AllowedAudience }).(pulumi.StringOutput)
}

// List of trusted namespaces that service accounts must belong to authenticate with Infisical.
func (o IdentityKubernetesAuthOutput) AllowedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringArrayOutput { return v.AllowedNamespaces }).(pulumi.StringArrayOutput)
}

// List of trusted service account names that are allowed to authenticate with Infisical.
func (o IdentityKubernetesAuthOutput) AllowedServiceAccountNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringArrayOutput { return v.AllowedServiceAccountNames }).(pulumi.StringArrayOutput)
}

// The ID of the identity to attach the configuration onto.
func (o IdentityKubernetesAuthOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server.
func (o IdentityKubernetesAuthOutput) KubernetesCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringOutput { return v.KubernetesCaCertificate }).(pulumi.StringOutput)
}

// The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`.
func (o IdentityKubernetesAuthOutput) KubernetesHost() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringOutput { return v.KubernetesHost }).(pulumi.StringOutput)
}

// A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5.
func (o IdentityKubernetesAuthOutput) TokenReviewerJwt() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityKubernetesAuth) pulumi.StringOutput { return v.TokenReviewerJwt }).(pulumi.StringOutput)
}

type IdentityKubernetesAuthArrayOutput struct{ *pulumi.OutputState }

func (IdentityKubernetesAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityKubernetesAuth)(nil)).Elem()
}

func (o IdentityKubernetesAuthArrayOutput) ToIdentityKubernetesAuthArrayOutput() IdentityKubernetesAuthArrayOutput {
	return o
}

func (o IdentityKubernetesAuthArrayOutput) ToIdentityKubernetesAuthArrayOutputWithContext(ctx context.Context) IdentityKubernetesAuthArrayOutput {
	return o
}

func (o IdentityKubernetesAuthArrayOutput) Index(i pulumi.IntInput) IdentityKubernetesAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityKubernetesAuth {
		return vs[0].([]*IdentityKubernetesAuth)[vs[1].(int)]
	}).(IdentityKubernetesAuthOutput)
}

type IdentityKubernetesAuthMapOutput struct{ *pulumi.OutputState }

func (IdentityKubernetesAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityKubernetesAuth)(nil)).Elem()
}

func (o IdentityKubernetesAuthMapOutput) ToIdentityKubernetesAuthMapOutput() IdentityKubernetesAuthMapOutput {
	return o
}

func (o IdentityKubernetesAuthMapOutput) ToIdentityKubernetesAuthMapOutputWithContext(ctx context.Context) IdentityKubernetesAuthMapOutput {
	return o
}

func (o IdentityKubernetesAuthMapOutput) MapIndex(k pulumi.StringInput) IdentityKubernetesAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityKubernetesAuth {
		return vs[0].(map[string]*IdentityKubernetesAuth)[vs[1].(string)]
	}).(IdentityKubernetesAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityKubernetesAuthInput)(nil)).Elem(), &IdentityKubernetesAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityKubernetesAuthArrayInput)(nil)).Elem(), IdentityKubernetesAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityKubernetesAuthMapInput)(nil)).Elem(), IdentityKubernetesAuthMap{})
	pulumi.RegisterOutputType(IdentityKubernetesAuthOutput{})
	pulumi.RegisterOutputType(IdentityKubernetesAuthArrayOutput{})
	pulumi.RegisterOutputType(IdentityKubernetesAuthMapOutput{})
}
