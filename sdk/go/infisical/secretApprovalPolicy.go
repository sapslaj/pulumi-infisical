// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretApprovalPolicy struct {
	pulumi.CustomResourceState

	// Whether to allow the  approvers to approve their own changes
	AllowSelfApproval pulumi.BoolOutput `pulumi:"allowSelfApproval"`
	// The required approvers
	Approvers SecretApprovalPolicyApproverArrayOutput `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringOutput `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
	EnvironmentSlug pulumi.StringPtrOutput `pulumi:"environmentSlug"`
	// The environments to apply the secret approval policy to
	EnvironmentSlugs pulumi.StringArrayOutput `pulumi:"environmentSlugs"`
	// The name of the secret approval policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project to add the secret approval policy
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals pulumi.IntOutput `pulumi:"requiredApprovals"`
	// The secret path to apply the secret approval policy to
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
}

// NewSecretApprovalPolicy registers a new resource with the given unique name, arguments, and options.
func NewSecretApprovalPolicy(ctx *pulumi.Context,
	name string, args *SecretApprovalPolicyArgs, opts ...pulumi.ResourceOption) (*SecretApprovalPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Approvers == nil {
		return nil, errors.New("invalid value for required argument 'Approvers'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RequiredApprovals == nil {
		return nil, errors.New("invalid value for required argument 'RequiredApprovals'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretApprovalPolicy
	err := ctx.RegisterResource("infisical:index/secretApprovalPolicy:SecretApprovalPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretApprovalPolicy gets an existing SecretApprovalPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretApprovalPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretApprovalPolicyState, opts ...pulumi.ResourceOption) (*SecretApprovalPolicy, error) {
	var resource SecretApprovalPolicy
	err := ctx.ReadResource("infisical:index/secretApprovalPolicy:SecretApprovalPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretApprovalPolicy resources.
type secretApprovalPolicyState struct {
	// Whether to allow the  approvers to approve their own changes
	AllowSelfApproval *bool `pulumi:"allowSelfApproval"`
	// The required approvers
	Approvers []SecretApprovalPolicyApprover `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The environments to apply the secret approval policy to
	EnvironmentSlugs []string `pulumi:"environmentSlugs"`
	// The name of the secret approval policy
	Name *string `pulumi:"name"`
	// The ID of the project to add the secret approval policy
	ProjectId *string `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals *int `pulumi:"requiredApprovals"`
	// The secret path to apply the secret approval policy to
	SecretPath *string `pulumi:"secretPath"`
}

type SecretApprovalPolicyState struct {
	// Whether to allow the  approvers to approve their own changes
	AllowSelfApproval pulumi.BoolPtrInput
	// The required approvers
	Approvers SecretApprovalPolicyApproverArrayInput
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringPtrInput
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
	EnvironmentSlug pulumi.StringPtrInput
	// The environments to apply the secret approval policy to
	EnvironmentSlugs pulumi.StringArrayInput
	// The name of the secret approval policy
	Name pulumi.StringPtrInput
	// The ID of the project to add the secret approval policy
	ProjectId pulumi.StringPtrInput
	// The number of required approvers
	RequiredApprovals pulumi.IntPtrInput
	// The secret path to apply the secret approval policy to
	SecretPath pulumi.StringPtrInput
}

func (SecretApprovalPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretApprovalPolicyState)(nil)).Elem()
}

type secretApprovalPolicyArgs struct {
	// Whether to allow the  approvers to approve their own changes
	AllowSelfApproval *bool `pulumi:"allowSelfApproval"`
	// The required approvers
	Approvers []SecretApprovalPolicyApprover `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The environments to apply the secret approval policy to
	EnvironmentSlugs []string `pulumi:"environmentSlugs"`
	// The name of the secret approval policy
	Name *string `pulumi:"name"`
	// The ID of the project to add the secret approval policy
	ProjectId string `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals int `pulumi:"requiredApprovals"`
	// The secret path to apply the secret approval policy to
	SecretPath string `pulumi:"secretPath"`
}

// The set of arguments for constructing a SecretApprovalPolicy resource.
type SecretApprovalPolicyArgs struct {
	// Whether to allow the  approvers to approve their own changes
	AllowSelfApproval pulumi.BoolPtrInput
	// The required approvers
	Approvers SecretApprovalPolicyApproverArrayInput
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringPtrInput
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
	EnvironmentSlug pulumi.StringPtrInput
	// The environments to apply the secret approval policy to
	EnvironmentSlugs pulumi.StringArrayInput
	// The name of the secret approval policy
	Name pulumi.StringPtrInput
	// The ID of the project to add the secret approval policy
	ProjectId pulumi.StringInput
	// The number of required approvers
	RequiredApprovals pulumi.IntInput
	// The secret path to apply the secret approval policy to
	SecretPath pulumi.StringInput
}

func (SecretApprovalPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretApprovalPolicyArgs)(nil)).Elem()
}

type SecretApprovalPolicyInput interface {
	pulumi.Input

	ToSecretApprovalPolicyOutput() SecretApprovalPolicyOutput
	ToSecretApprovalPolicyOutputWithContext(ctx context.Context) SecretApprovalPolicyOutput
}

func (*SecretApprovalPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretApprovalPolicy)(nil)).Elem()
}

func (i *SecretApprovalPolicy) ToSecretApprovalPolicyOutput() SecretApprovalPolicyOutput {
	return i.ToSecretApprovalPolicyOutputWithContext(context.Background())
}

func (i *SecretApprovalPolicy) ToSecretApprovalPolicyOutputWithContext(ctx context.Context) SecretApprovalPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretApprovalPolicyOutput)
}

// SecretApprovalPolicyArrayInput is an input type that accepts SecretApprovalPolicyArray and SecretApprovalPolicyArrayOutput values.
// You can construct a concrete instance of `SecretApprovalPolicyArrayInput` via:
//
//	SecretApprovalPolicyArray{ SecretApprovalPolicyArgs{...} }
type SecretApprovalPolicyArrayInput interface {
	pulumi.Input

	ToSecretApprovalPolicyArrayOutput() SecretApprovalPolicyArrayOutput
	ToSecretApprovalPolicyArrayOutputWithContext(context.Context) SecretApprovalPolicyArrayOutput
}

type SecretApprovalPolicyArray []SecretApprovalPolicyInput

func (SecretApprovalPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretApprovalPolicy)(nil)).Elem()
}

func (i SecretApprovalPolicyArray) ToSecretApprovalPolicyArrayOutput() SecretApprovalPolicyArrayOutput {
	return i.ToSecretApprovalPolicyArrayOutputWithContext(context.Background())
}

func (i SecretApprovalPolicyArray) ToSecretApprovalPolicyArrayOutputWithContext(ctx context.Context) SecretApprovalPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretApprovalPolicyArrayOutput)
}

// SecretApprovalPolicyMapInput is an input type that accepts SecretApprovalPolicyMap and SecretApprovalPolicyMapOutput values.
// You can construct a concrete instance of `SecretApprovalPolicyMapInput` via:
//
//	SecretApprovalPolicyMap{ "key": SecretApprovalPolicyArgs{...} }
type SecretApprovalPolicyMapInput interface {
	pulumi.Input

	ToSecretApprovalPolicyMapOutput() SecretApprovalPolicyMapOutput
	ToSecretApprovalPolicyMapOutputWithContext(context.Context) SecretApprovalPolicyMapOutput
}

type SecretApprovalPolicyMap map[string]SecretApprovalPolicyInput

func (SecretApprovalPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretApprovalPolicy)(nil)).Elem()
}

func (i SecretApprovalPolicyMap) ToSecretApprovalPolicyMapOutput() SecretApprovalPolicyMapOutput {
	return i.ToSecretApprovalPolicyMapOutputWithContext(context.Background())
}

func (i SecretApprovalPolicyMap) ToSecretApprovalPolicyMapOutputWithContext(ctx context.Context) SecretApprovalPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretApprovalPolicyMapOutput)
}

type SecretApprovalPolicyOutput struct{ *pulumi.OutputState }

func (SecretApprovalPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretApprovalPolicy)(nil)).Elem()
}

func (o SecretApprovalPolicyOutput) ToSecretApprovalPolicyOutput() SecretApprovalPolicyOutput {
	return o
}

func (o SecretApprovalPolicyOutput) ToSecretApprovalPolicyOutputWithContext(ctx context.Context) SecretApprovalPolicyOutput {
	return o
}

// Whether to allow the  approvers to approve their own changes
func (o SecretApprovalPolicyOutput) AllowSelfApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.BoolOutput { return v.AllowSelfApproval }).(pulumi.BoolOutput)
}

// The required approvers
func (o SecretApprovalPolicyOutput) Approvers() SecretApprovalPolicyApproverArrayOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) SecretApprovalPolicyApproverArrayOutput { return v.Approvers }).(SecretApprovalPolicyApproverArrayOutput)
}

// The enforcement level of the policy. This can either be hard or soft
func (o SecretApprovalPolicyOutput) EnforcementLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringOutput { return v.EnforcementLevel }).(pulumi.StringOutput)
}

// (DEPRECATED, Use environmentSlugs instead) The environment to apply the secret approval policy to
func (o SecretApprovalPolicyOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringPtrOutput { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// The environments to apply the secret approval policy to
func (o SecretApprovalPolicyOutput) EnvironmentSlugs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringArrayOutput { return v.EnvironmentSlugs }).(pulumi.StringArrayOutput)
}

// The name of the secret approval policy
func (o SecretApprovalPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project to add the secret approval policy
func (o SecretApprovalPolicyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The number of required approvers
func (o SecretApprovalPolicyOutput) RequiredApprovals() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.IntOutput { return v.RequiredApprovals }).(pulumi.IntOutput)
}

// The secret path to apply the secret approval policy to
func (o SecretApprovalPolicyOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretApprovalPolicy) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

type SecretApprovalPolicyArrayOutput struct{ *pulumi.OutputState }

func (SecretApprovalPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretApprovalPolicy)(nil)).Elem()
}

func (o SecretApprovalPolicyArrayOutput) ToSecretApprovalPolicyArrayOutput() SecretApprovalPolicyArrayOutput {
	return o
}

func (o SecretApprovalPolicyArrayOutput) ToSecretApprovalPolicyArrayOutputWithContext(ctx context.Context) SecretApprovalPolicyArrayOutput {
	return o
}

func (o SecretApprovalPolicyArrayOutput) Index(i pulumi.IntInput) SecretApprovalPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretApprovalPolicy {
		return vs[0].([]*SecretApprovalPolicy)[vs[1].(int)]
	}).(SecretApprovalPolicyOutput)
}

type SecretApprovalPolicyMapOutput struct{ *pulumi.OutputState }

func (SecretApprovalPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretApprovalPolicy)(nil)).Elem()
}

func (o SecretApprovalPolicyMapOutput) ToSecretApprovalPolicyMapOutput() SecretApprovalPolicyMapOutput {
	return o
}

func (o SecretApprovalPolicyMapOutput) ToSecretApprovalPolicyMapOutputWithContext(ctx context.Context) SecretApprovalPolicyMapOutput {
	return o
}

func (o SecretApprovalPolicyMapOutput) MapIndex(k pulumi.StringInput) SecretApprovalPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretApprovalPolicy {
		return vs[0].(map[string]*SecretApprovalPolicy)[vs[1].(string)]
	}).(SecretApprovalPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretApprovalPolicyInput)(nil)).Elem(), &SecretApprovalPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretApprovalPolicyArrayInput)(nil)).Elem(), SecretApprovalPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretApprovalPolicyMapInput)(nil)).Elem(), SecretApprovalPolicyMap{})
	pulumi.RegisterOutputType(SecretApprovalPolicyOutput{})
	pulumi.RegisterOutputType(SecretApprovalPolicyArrayOutput{})
	pulumi.RegisterOutputType(SecretApprovalPolicyMapOutput{})
}
