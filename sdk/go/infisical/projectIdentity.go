// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectIdentity struct {
	pulumi.CustomResourceState

	// The identity details of the project identity
	Identity ProjectIdentityIdentityOutput `pulumi:"identity"`
	// The id of the identity.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// The membership Id of the project identity
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// The id of the project
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The roles assigned to the project identity
	Roles ProjectIdentityRoleArrayOutput `pulumi:"roles"`
}

// NewProjectIdentity registers a new resource with the given unique name, arguments, and options.
func NewProjectIdentity(ctx *pulumi.Context,
	name string, args *ProjectIdentityArgs, opts ...pulumi.ResourceOption) (*ProjectIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIdentity
	err := ctx.RegisterResource("infisical:index/projectIdentity:ProjectIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIdentity gets an existing ProjectIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIdentityState, opts ...pulumi.ResourceOption) (*ProjectIdentity, error) {
	var resource ProjectIdentity
	err := ctx.ReadResource("infisical:index/projectIdentity:ProjectIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIdentity resources.
type projectIdentityState struct {
	// The identity details of the project identity
	Identity *ProjectIdentityIdentity `pulumi:"identity"`
	// The id of the identity.
	IdentityId *string `pulumi:"identityId"`
	// The membership Id of the project identity
	MembershipId *string `pulumi:"membershipId"`
	// The id of the project
	ProjectId *string `pulumi:"projectId"`
	// The roles assigned to the project identity
	Roles []ProjectIdentityRole `pulumi:"roles"`
}

type ProjectIdentityState struct {
	// The identity details of the project identity
	Identity ProjectIdentityIdentityPtrInput
	// The id of the identity.
	IdentityId pulumi.StringPtrInput
	// The membership Id of the project identity
	MembershipId pulumi.StringPtrInput
	// The id of the project
	ProjectId pulumi.StringPtrInput
	// The roles assigned to the project identity
	Roles ProjectIdentityRoleArrayInput
}

func (ProjectIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIdentityState)(nil)).Elem()
}

type projectIdentityArgs struct {
	// The id of the identity.
	IdentityId string `pulumi:"identityId"`
	// The id of the project
	ProjectId string `pulumi:"projectId"`
	// The roles assigned to the project identity
	Roles []ProjectIdentityRole `pulumi:"roles"`
}

// The set of arguments for constructing a ProjectIdentity resource.
type ProjectIdentityArgs struct {
	// The id of the identity.
	IdentityId pulumi.StringInput
	// The id of the project
	ProjectId pulumi.StringInput
	// The roles assigned to the project identity
	Roles ProjectIdentityRoleArrayInput
}

func (ProjectIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIdentityArgs)(nil)).Elem()
}

type ProjectIdentityInput interface {
	pulumi.Input

	ToProjectIdentityOutput() ProjectIdentityOutput
	ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput
}

func (*ProjectIdentity) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (i *ProjectIdentity) ToProjectIdentityOutput() ProjectIdentityOutput {
	return i.ToProjectIdentityOutputWithContext(context.Background())
}

func (i *ProjectIdentity) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput)
}

// ProjectIdentityArrayInput is an input type that accepts ProjectIdentityArray and ProjectIdentityArrayOutput values.
// You can construct a concrete instance of `ProjectIdentityArrayInput` via:
//
//	ProjectIdentityArray{ ProjectIdentityArgs{...} }
type ProjectIdentityArrayInput interface {
	pulumi.Input

	ToProjectIdentityArrayOutput() ProjectIdentityArrayOutput
	ToProjectIdentityArrayOutputWithContext(context.Context) ProjectIdentityArrayOutput
}

type ProjectIdentityArray []ProjectIdentityInput

func (ProjectIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIdentity)(nil)).Elem()
}

func (i ProjectIdentityArray) ToProjectIdentityArrayOutput() ProjectIdentityArrayOutput {
	return i.ToProjectIdentityArrayOutputWithContext(context.Background())
}

func (i ProjectIdentityArray) ToProjectIdentityArrayOutputWithContext(ctx context.Context) ProjectIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityArrayOutput)
}

// ProjectIdentityMapInput is an input type that accepts ProjectIdentityMap and ProjectIdentityMapOutput values.
// You can construct a concrete instance of `ProjectIdentityMapInput` via:
//
//	ProjectIdentityMap{ "key": ProjectIdentityArgs{...} }
type ProjectIdentityMapInput interface {
	pulumi.Input

	ToProjectIdentityMapOutput() ProjectIdentityMapOutput
	ToProjectIdentityMapOutputWithContext(context.Context) ProjectIdentityMapOutput
}

type ProjectIdentityMap map[string]ProjectIdentityInput

func (ProjectIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIdentity)(nil)).Elem()
}

func (i ProjectIdentityMap) ToProjectIdentityMapOutput() ProjectIdentityMapOutput {
	return i.ToProjectIdentityMapOutputWithContext(context.Background())
}

func (i ProjectIdentityMap) ToProjectIdentityMapOutputWithContext(ctx context.Context) ProjectIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityMapOutput)
}

type ProjectIdentityOutput struct{ *pulumi.OutputState }

func (ProjectIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityOutput) ToProjectIdentityOutput() ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return o
}

// The identity details of the project identity
func (o ProjectIdentityOutput) Identity() ProjectIdentityIdentityOutput {
	return o.ApplyT(func(v *ProjectIdentity) ProjectIdentityIdentityOutput { return v.Identity }).(ProjectIdentityIdentityOutput)
}

// The id of the identity.
func (o ProjectIdentityOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentity) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// The membership Id of the project identity
func (o ProjectIdentityOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentity) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The id of the project
func (o ProjectIdentityOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentity) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The roles assigned to the project identity
func (o ProjectIdentityOutput) Roles() ProjectIdentityRoleArrayOutput {
	return o.ApplyT(func(v *ProjectIdentity) ProjectIdentityRoleArrayOutput { return v.Roles }).(ProjectIdentityRoleArrayOutput)
}

type ProjectIdentityArrayOutput struct{ *pulumi.OutputState }

func (ProjectIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityArrayOutput) ToProjectIdentityArrayOutput() ProjectIdentityArrayOutput {
	return o
}

func (o ProjectIdentityArrayOutput) ToProjectIdentityArrayOutputWithContext(ctx context.Context) ProjectIdentityArrayOutput {
	return o
}

func (o ProjectIdentityArrayOutput) Index(i pulumi.IntInput) ProjectIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIdentity {
		return vs[0].([]*ProjectIdentity)[vs[1].(int)]
	}).(ProjectIdentityOutput)
}

type ProjectIdentityMapOutput struct{ *pulumi.OutputState }

func (ProjectIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityMapOutput) ToProjectIdentityMapOutput() ProjectIdentityMapOutput {
	return o
}

func (o ProjectIdentityMapOutput) ToProjectIdentityMapOutputWithContext(ctx context.Context) ProjectIdentityMapOutput {
	return o
}

func (o ProjectIdentityMapOutput) MapIndex(k pulumi.StringInput) ProjectIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIdentity {
		return vs[0].(map[string]*ProjectIdentity)[vs[1].(string)]
	}).(ProjectIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityInput)(nil)).Elem(), &ProjectIdentity{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityArrayInput)(nil)).Elem(), ProjectIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityMapInput)(nil)).Elem(), ProjectIdentityMap{})
	pulumi.RegisterOutputType(ProjectIdentityOutput{})
	pulumi.RegisterOutputType(ProjectIdentityArrayOutput{})
	pulumi.RegisterOutputType(ProjectIdentityMapOutput{})
}
