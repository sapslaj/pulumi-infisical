// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncDatabricks struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the databricks Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Databricks sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncDatabricksDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Databricks sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncDatabricksSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncDatabricks registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncDatabricks(ctx *pulumi.Context,
	name string, args *SecretSyncDatabricksArgs, opts ...pulumi.ResourceOption) (*SecretSyncDatabricks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncDatabricks
	err := ctx.RegisterResource("infisical:index/secretSyncDatabricks:SecretSyncDatabricks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncDatabricks gets an existing SecretSyncDatabricks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncDatabricks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncDatabricksState, opts ...pulumi.ResourceOption) (*SecretSyncDatabricks, error) {
	var resource SecretSyncDatabricks
	err := ctx.ReadResource("infisical:index/secretSyncDatabricks:SecretSyncDatabricks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncDatabricks resources.
type secretSyncDatabricksState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the databricks Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Databricks sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncDatabricksDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Databricks sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncDatabricksSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncDatabricksState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the databricks Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Databricks sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncDatabricksDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Databricks sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncDatabricksSyncOptionsPtrInput
}

func (SecretSyncDatabricksState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncDatabricksState)(nil)).Elem()
}

type secretSyncDatabricksArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the databricks Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Databricks sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncDatabricksDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Databricks sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncDatabricksSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncDatabricks resource.
type SecretSyncDatabricksArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the databricks Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Databricks sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncDatabricksDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Databricks sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncDatabricksSyncOptionsInput
}

func (SecretSyncDatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncDatabricksArgs)(nil)).Elem()
}

type SecretSyncDatabricksInput interface {
	pulumi.Input

	ToSecretSyncDatabricksOutput() SecretSyncDatabricksOutput
	ToSecretSyncDatabricksOutputWithContext(ctx context.Context) SecretSyncDatabricksOutput
}

func (*SecretSyncDatabricks) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncDatabricks)(nil)).Elem()
}

func (i *SecretSyncDatabricks) ToSecretSyncDatabricksOutput() SecretSyncDatabricksOutput {
	return i.ToSecretSyncDatabricksOutputWithContext(context.Background())
}

func (i *SecretSyncDatabricks) ToSecretSyncDatabricksOutputWithContext(ctx context.Context) SecretSyncDatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncDatabricksOutput)
}

// SecretSyncDatabricksArrayInput is an input type that accepts SecretSyncDatabricksArray and SecretSyncDatabricksArrayOutput values.
// You can construct a concrete instance of `SecretSyncDatabricksArrayInput` via:
//
//	SecretSyncDatabricksArray{ SecretSyncDatabricksArgs{...} }
type SecretSyncDatabricksArrayInput interface {
	pulumi.Input

	ToSecretSyncDatabricksArrayOutput() SecretSyncDatabricksArrayOutput
	ToSecretSyncDatabricksArrayOutputWithContext(context.Context) SecretSyncDatabricksArrayOutput
}

type SecretSyncDatabricksArray []SecretSyncDatabricksInput

func (SecretSyncDatabricksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncDatabricks)(nil)).Elem()
}

func (i SecretSyncDatabricksArray) ToSecretSyncDatabricksArrayOutput() SecretSyncDatabricksArrayOutput {
	return i.ToSecretSyncDatabricksArrayOutputWithContext(context.Background())
}

func (i SecretSyncDatabricksArray) ToSecretSyncDatabricksArrayOutputWithContext(ctx context.Context) SecretSyncDatabricksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncDatabricksArrayOutput)
}

// SecretSyncDatabricksMapInput is an input type that accepts SecretSyncDatabricksMap and SecretSyncDatabricksMapOutput values.
// You can construct a concrete instance of `SecretSyncDatabricksMapInput` via:
//
//	SecretSyncDatabricksMap{ "key": SecretSyncDatabricksArgs{...} }
type SecretSyncDatabricksMapInput interface {
	pulumi.Input

	ToSecretSyncDatabricksMapOutput() SecretSyncDatabricksMapOutput
	ToSecretSyncDatabricksMapOutputWithContext(context.Context) SecretSyncDatabricksMapOutput
}

type SecretSyncDatabricksMap map[string]SecretSyncDatabricksInput

func (SecretSyncDatabricksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncDatabricks)(nil)).Elem()
}

func (i SecretSyncDatabricksMap) ToSecretSyncDatabricksMapOutput() SecretSyncDatabricksMapOutput {
	return i.ToSecretSyncDatabricksMapOutputWithContext(context.Background())
}

func (i SecretSyncDatabricksMap) ToSecretSyncDatabricksMapOutputWithContext(ctx context.Context) SecretSyncDatabricksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncDatabricksMapOutput)
}

type SecretSyncDatabricksOutput struct{ *pulumi.OutputState }

func (SecretSyncDatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncDatabricks)(nil)).Elem()
}

func (o SecretSyncDatabricksOutput) ToSecretSyncDatabricksOutput() SecretSyncDatabricksOutput {
	return o
}

func (o SecretSyncDatabricksOutput) ToSecretSyncDatabricksOutputWithContext(ctx context.Context) SecretSyncDatabricksOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncDatabricksOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the databricks Connection to use for syncing.
func (o SecretSyncDatabricksOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Databricks sync.
func (o SecretSyncDatabricksOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncDatabricksOutput) DestinationConfig() SecretSyncDatabricksDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) SecretSyncDatabricksDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncDatabricksDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncDatabricksOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Databricks sync to create. Must be slug-friendly.
func (o SecretSyncDatabricksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncDatabricksOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncDatabricksOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncDatabricksOutput) SyncOptions() SecretSyncDatabricksSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncDatabricks) SecretSyncDatabricksSyncOptionsOutput { return v.SyncOptions }).(SecretSyncDatabricksSyncOptionsOutput)
}

type SecretSyncDatabricksArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncDatabricksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncDatabricks)(nil)).Elem()
}

func (o SecretSyncDatabricksArrayOutput) ToSecretSyncDatabricksArrayOutput() SecretSyncDatabricksArrayOutput {
	return o
}

func (o SecretSyncDatabricksArrayOutput) ToSecretSyncDatabricksArrayOutputWithContext(ctx context.Context) SecretSyncDatabricksArrayOutput {
	return o
}

func (o SecretSyncDatabricksArrayOutput) Index(i pulumi.IntInput) SecretSyncDatabricksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncDatabricks {
		return vs[0].([]*SecretSyncDatabricks)[vs[1].(int)]
	}).(SecretSyncDatabricksOutput)
}

type SecretSyncDatabricksMapOutput struct{ *pulumi.OutputState }

func (SecretSyncDatabricksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncDatabricks)(nil)).Elem()
}

func (o SecretSyncDatabricksMapOutput) ToSecretSyncDatabricksMapOutput() SecretSyncDatabricksMapOutput {
	return o
}

func (o SecretSyncDatabricksMapOutput) ToSecretSyncDatabricksMapOutputWithContext(ctx context.Context) SecretSyncDatabricksMapOutput {
	return o
}

func (o SecretSyncDatabricksMapOutput) MapIndex(k pulumi.StringInput) SecretSyncDatabricksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncDatabricks {
		return vs[0].(map[string]*SecretSyncDatabricks)[vs[1].(string)]
	}).(SecretSyncDatabricksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncDatabricksInput)(nil)).Elem(), &SecretSyncDatabricks{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncDatabricksArrayInput)(nil)).Elem(), SecretSyncDatabricksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncDatabricksMapInput)(nil)).Elem(), SecretSyncDatabricksMap{})
	pulumi.RegisterOutputType(SecretSyncDatabricksOutput{})
	pulumi.RegisterOutputType(SecretSyncDatabricksArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncDatabricksMapOutput{})
}
