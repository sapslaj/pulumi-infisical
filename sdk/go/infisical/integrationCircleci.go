// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IntegrationCircleci struct {
	pulumi.CustomResourceState

	// The organization slug of your CircleCI organization.
	CircleciOrgSlug pulumi.StringOutput `pulumi:"circleciOrgSlug"`
	// The project ID of your CircleCI project.
	CircleciProjectId pulumi.StringOutput `pulumi:"circleciProjectId"`
	// Your personal CircleCI token to authenticate with.
	CircleciToken pulumi.StringOutput `pulumi:"circleciToken"`
	// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringOutput `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The ID of your Infisical project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
}

// NewIntegrationCircleci registers a new resource with the given unique name, arguments, and options.
func NewIntegrationCircleci(ctx *pulumi.Context,
	name string, args *IntegrationCircleciArgs, opts ...pulumi.ResourceOption) (*IntegrationCircleci, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CircleciOrgSlug == nil {
		return nil, errors.New("invalid value for required argument 'CircleciOrgSlug'")
	}
	if args.CircleciProjectId == nil {
		return nil, errors.New("invalid value for required argument 'CircleciProjectId'")
	}
	if args.CircleciToken == nil {
		return nil, errors.New("invalid value for required argument 'CircleciToken'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.CircleciToken != nil {
		args.CircleciToken = pulumi.ToSecret(args.CircleciToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"circleciToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationCircleci
	err := ctx.RegisterResource("infisical:index/integrationCircleci:IntegrationCircleci", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationCircleci gets an existing IntegrationCircleci resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationCircleci(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationCircleciState, opts ...pulumi.ResourceOption) (*IntegrationCircleci, error) {
	var resource IntegrationCircleci
	err := ctx.ReadResource("infisical:index/integrationCircleci:IntegrationCircleci", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationCircleci resources.
type integrationCircleciState struct {
	// The organization slug of your CircleCI organization.
	CircleciOrgSlug *string `pulumi:"circleciOrgSlug"`
	// The project ID of your CircleCI project.
	CircleciProjectId *string `pulumi:"circleciProjectId"`
	// Your personal CircleCI token to authenticate with.
	CircleciToken *string `pulumi:"circleciToken"`
	// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
	Environment *string `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId *string `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId *string `pulumi:"integrationId"`
	// The ID of your Infisical project.
	ProjectId *string `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
}

type IntegrationCircleciState struct {
	// The organization slug of your CircleCI organization.
	CircleciOrgSlug pulumi.StringPtrInput
	// The project ID of your CircleCI project.
	CircleciProjectId pulumi.StringPtrInput
	// Your personal CircleCI token to authenticate with.
	CircleciToken pulumi.StringPtrInput
	// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
	Environment pulumi.StringPtrInput
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringPtrInput
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringPtrInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringPtrInput
}

func (IntegrationCircleciState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationCircleciState)(nil)).Elem()
}

type integrationCircleciArgs struct {
	// The organization slug of your CircleCI organization.
	CircleciOrgSlug string `pulumi:"circleciOrgSlug"`
	// The project ID of your CircleCI project.
	CircleciProjectId string `pulumi:"circleciProjectId"`
	// Your personal CircleCI token to authenticate with.
	CircleciToken string `pulumi:"circleciToken"`
	// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
	Environment string `pulumi:"environment"`
	// The ID of your Infisical project.
	ProjectId string `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
}

// The set of arguments for constructing a IntegrationCircleci resource.
type IntegrationCircleciArgs struct {
	// The organization slug of your CircleCI organization.
	CircleciOrgSlug pulumi.StringInput
	// The project ID of your CircleCI project.
	CircleciProjectId pulumi.StringInput
	// Your personal CircleCI token to authenticate with.
	CircleciToken pulumi.StringInput
	// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
	Environment pulumi.StringInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringInput
}

func (IntegrationCircleciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationCircleciArgs)(nil)).Elem()
}

type IntegrationCircleciInput interface {
	pulumi.Input

	ToIntegrationCircleciOutput() IntegrationCircleciOutput
	ToIntegrationCircleciOutputWithContext(ctx context.Context) IntegrationCircleciOutput
}

func (*IntegrationCircleci) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationCircleci)(nil)).Elem()
}

func (i *IntegrationCircleci) ToIntegrationCircleciOutput() IntegrationCircleciOutput {
	return i.ToIntegrationCircleciOutputWithContext(context.Background())
}

func (i *IntegrationCircleci) ToIntegrationCircleciOutputWithContext(ctx context.Context) IntegrationCircleciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCircleciOutput)
}

// IntegrationCircleciArrayInput is an input type that accepts IntegrationCircleciArray and IntegrationCircleciArrayOutput values.
// You can construct a concrete instance of `IntegrationCircleciArrayInput` via:
//
//	IntegrationCircleciArray{ IntegrationCircleciArgs{...} }
type IntegrationCircleciArrayInput interface {
	pulumi.Input

	ToIntegrationCircleciArrayOutput() IntegrationCircleciArrayOutput
	ToIntegrationCircleciArrayOutputWithContext(context.Context) IntegrationCircleciArrayOutput
}

type IntegrationCircleciArray []IntegrationCircleciInput

func (IntegrationCircleciArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationCircleci)(nil)).Elem()
}

func (i IntegrationCircleciArray) ToIntegrationCircleciArrayOutput() IntegrationCircleciArrayOutput {
	return i.ToIntegrationCircleciArrayOutputWithContext(context.Background())
}

func (i IntegrationCircleciArray) ToIntegrationCircleciArrayOutputWithContext(ctx context.Context) IntegrationCircleciArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCircleciArrayOutput)
}

// IntegrationCircleciMapInput is an input type that accepts IntegrationCircleciMap and IntegrationCircleciMapOutput values.
// You can construct a concrete instance of `IntegrationCircleciMapInput` via:
//
//	IntegrationCircleciMap{ "key": IntegrationCircleciArgs{...} }
type IntegrationCircleciMapInput interface {
	pulumi.Input

	ToIntegrationCircleciMapOutput() IntegrationCircleciMapOutput
	ToIntegrationCircleciMapOutputWithContext(context.Context) IntegrationCircleciMapOutput
}

type IntegrationCircleciMap map[string]IntegrationCircleciInput

func (IntegrationCircleciMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationCircleci)(nil)).Elem()
}

func (i IntegrationCircleciMap) ToIntegrationCircleciMapOutput() IntegrationCircleciMapOutput {
	return i.ToIntegrationCircleciMapOutputWithContext(context.Background())
}

func (i IntegrationCircleciMap) ToIntegrationCircleciMapOutputWithContext(ctx context.Context) IntegrationCircleciMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCircleciMapOutput)
}

type IntegrationCircleciOutput struct{ *pulumi.OutputState }

func (IntegrationCircleciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationCircleci)(nil)).Elem()
}

func (o IntegrationCircleciOutput) ToIntegrationCircleciOutput() IntegrationCircleciOutput {
	return o
}

func (o IntegrationCircleciOutput) ToIntegrationCircleciOutputWithContext(ctx context.Context) IntegrationCircleciOutput {
	return o
}

// The organization slug of your CircleCI organization.
func (o IntegrationCircleciOutput) CircleciOrgSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.CircleciOrgSlug }).(pulumi.StringOutput)
}

// The project ID of your CircleCI project.
func (o IntegrationCircleciOutput) CircleciProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.CircleciProjectId }).(pulumi.StringOutput)
}

// Your personal CircleCI token to authenticate with.
func (o IntegrationCircleciOutput) CircleciToken() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.CircleciToken }).(pulumi.StringOutput)
}

// The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
func (o IntegrationCircleciOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the integration auth, used internally by Infisical.
func (o IntegrationCircleciOutput) IntegrationAuthId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.IntegrationAuthId }).(pulumi.StringOutput)
}

// The ID of the integration, used internally by Infisical.
func (o IntegrationCircleciOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The ID of your Infisical project.
func (o IntegrationCircleciOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The secret path in Infisical to sync secrets from.
func (o IntegrationCircleciOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCircleci) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

type IntegrationCircleciArrayOutput struct{ *pulumi.OutputState }

func (IntegrationCircleciArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationCircleci)(nil)).Elem()
}

func (o IntegrationCircleciArrayOutput) ToIntegrationCircleciArrayOutput() IntegrationCircleciArrayOutput {
	return o
}

func (o IntegrationCircleciArrayOutput) ToIntegrationCircleciArrayOutputWithContext(ctx context.Context) IntegrationCircleciArrayOutput {
	return o
}

func (o IntegrationCircleciArrayOutput) Index(i pulumi.IntInput) IntegrationCircleciOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationCircleci {
		return vs[0].([]*IntegrationCircleci)[vs[1].(int)]
	}).(IntegrationCircleciOutput)
}

type IntegrationCircleciMapOutput struct{ *pulumi.OutputState }

func (IntegrationCircleciMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationCircleci)(nil)).Elem()
}

func (o IntegrationCircleciMapOutput) ToIntegrationCircleciMapOutput() IntegrationCircleciMapOutput {
	return o
}

func (o IntegrationCircleciMapOutput) ToIntegrationCircleciMapOutputWithContext(ctx context.Context) IntegrationCircleciMapOutput {
	return o
}

func (o IntegrationCircleciMapOutput) MapIndex(k pulumi.StringInput) IntegrationCircleciOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationCircleci {
		return vs[0].(map[string]*IntegrationCircleci)[vs[1].(string)]
	}).(IntegrationCircleciOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCircleciInput)(nil)).Elem(), &IntegrationCircleci{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCircleciArrayInput)(nil)).Elem(), IntegrationCircleciArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCircleciMapInput)(nil)).Elem(), IntegrationCircleciMap{})
	pulumi.RegisterOutputType(IntegrationCircleciOutput{})
	pulumi.RegisterOutputType(IntegrationCircleciArrayOutput{})
	pulumi.RegisterOutputType(IntegrationCircleciMapOutput{})
}
