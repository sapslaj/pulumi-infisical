// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncRender struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the render Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Render sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncRenderDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Render sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncRenderSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncRender registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncRender(ctx *pulumi.Context,
	name string, args *SecretSyncRenderArgs, opts ...pulumi.ResourceOption) (*SecretSyncRender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncRender
	err := ctx.RegisterResource("infisical:index/secretSyncRender:SecretSyncRender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncRender gets an existing SecretSyncRender resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncRender(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncRenderState, opts ...pulumi.ResourceOption) (*SecretSyncRender, error) {
	var resource SecretSyncRender
	err := ctx.ReadResource("infisical:index/secretSyncRender:SecretSyncRender", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncRender resources.
type secretSyncRenderState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the render Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Render sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncRenderDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Render sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncRenderSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncRenderState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the render Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Render sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncRenderDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Render sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncRenderSyncOptionsPtrInput
}

func (SecretSyncRenderState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncRenderState)(nil)).Elem()
}

type secretSyncRenderArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the render Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Render sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncRenderDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Render sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncRenderSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncRender resource.
type SecretSyncRenderArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the render Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Render sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncRenderDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Render sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncRenderSyncOptionsInput
}

func (SecretSyncRenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncRenderArgs)(nil)).Elem()
}

type SecretSyncRenderInput interface {
	pulumi.Input

	ToSecretSyncRenderOutput() SecretSyncRenderOutput
	ToSecretSyncRenderOutputWithContext(ctx context.Context) SecretSyncRenderOutput
}

func (*SecretSyncRender) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncRender)(nil)).Elem()
}

func (i *SecretSyncRender) ToSecretSyncRenderOutput() SecretSyncRenderOutput {
	return i.ToSecretSyncRenderOutputWithContext(context.Background())
}

func (i *SecretSyncRender) ToSecretSyncRenderOutputWithContext(ctx context.Context) SecretSyncRenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncRenderOutput)
}

// SecretSyncRenderArrayInput is an input type that accepts SecretSyncRenderArray and SecretSyncRenderArrayOutput values.
// You can construct a concrete instance of `SecretSyncRenderArrayInput` via:
//
//	SecretSyncRenderArray{ SecretSyncRenderArgs{...} }
type SecretSyncRenderArrayInput interface {
	pulumi.Input

	ToSecretSyncRenderArrayOutput() SecretSyncRenderArrayOutput
	ToSecretSyncRenderArrayOutputWithContext(context.Context) SecretSyncRenderArrayOutput
}

type SecretSyncRenderArray []SecretSyncRenderInput

func (SecretSyncRenderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncRender)(nil)).Elem()
}

func (i SecretSyncRenderArray) ToSecretSyncRenderArrayOutput() SecretSyncRenderArrayOutput {
	return i.ToSecretSyncRenderArrayOutputWithContext(context.Background())
}

func (i SecretSyncRenderArray) ToSecretSyncRenderArrayOutputWithContext(ctx context.Context) SecretSyncRenderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncRenderArrayOutput)
}

// SecretSyncRenderMapInput is an input type that accepts SecretSyncRenderMap and SecretSyncRenderMapOutput values.
// You can construct a concrete instance of `SecretSyncRenderMapInput` via:
//
//	SecretSyncRenderMap{ "key": SecretSyncRenderArgs{...} }
type SecretSyncRenderMapInput interface {
	pulumi.Input

	ToSecretSyncRenderMapOutput() SecretSyncRenderMapOutput
	ToSecretSyncRenderMapOutputWithContext(context.Context) SecretSyncRenderMapOutput
}

type SecretSyncRenderMap map[string]SecretSyncRenderInput

func (SecretSyncRenderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncRender)(nil)).Elem()
}

func (i SecretSyncRenderMap) ToSecretSyncRenderMapOutput() SecretSyncRenderMapOutput {
	return i.ToSecretSyncRenderMapOutputWithContext(context.Background())
}

func (i SecretSyncRenderMap) ToSecretSyncRenderMapOutputWithContext(ctx context.Context) SecretSyncRenderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncRenderMapOutput)
}

type SecretSyncRenderOutput struct{ *pulumi.OutputState }

func (SecretSyncRenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncRender)(nil)).Elem()
}

func (o SecretSyncRenderOutput) ToSecretSyncRenderOutput() SecretSyncRenderOutput {
	return o
}

func (o SecretSyncRenderOutput) ToSecretSyncRenderOutputWithContext(ctx context.Context) SecretSyncRenderOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncRenderOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the render Connection to use for syncing.
func (o SecretSyncRenderOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Render sync.
func (o SecretSyncRenderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncRenderOutput) DestinationConfig() SecretSyncRenderDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncRender) SecretSyncRenderDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncRenderDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncRenderOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Render sync to create. Must be slug-friendly.
func (o SecretSyncRenderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncRenderOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncRenderOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncRender) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncRenderOutput) SyncOptions() SecretSyncRenderSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncRender) SecretSyncRenderSyncOptionsOutput { return v.SyncOptions }).(SecretSyncRenderSyncOptionsOutput)
}

type SecretSyncRenderArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncRenderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncRender)(nil)).Elem()
}

func (o SecretSyncRenderArrayOutput) ToSecretSyncRenderArrayOutput() SecretSyncRenderArrayOutput {
	return o
}

func (o SecretSyncRenderArrayOutput) ToSecretSyncRenderArrayOutputWithContext(ctx context.Context) SecretSyncRenderArrayOutput {
	return o
}

func (o SecretSyncRenderArrayOutput) Index(i pulumi.IntInput) SecretSyncRenderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncRender {
		return vs[0].([]*SecretSyncRender)[vs[1].(int)]
	}).(SecretSyncRenderOutput)
}

type SecretSyncRenderMapOutput struct{ *pulumi.OutputState }

func (SecretSyncRenderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncRender)(nil)).Elem()
}

func (o SecretSyncRenderMapOutput) ToSecretSyncRenderMapOutput() SecretSyncRenderMapOutput {
	return o
}

func (o SecretSyncRenderMapOutput) ToSecretSyncRenderMapOutputWithContext(ctx context.Context) SecretSyncRenderMapOutput {
	return o
}

func (o SecretSyncRenderMapOutput) MapIndex(k pulumi.StringInput) SecretSyncRenderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncRender {
		return vs[0].(map[string]*SecretSyncRender)[vs[1].(string)]
	}).(SecretSyncRenderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncRenderInput)(nil)).Elem(), &SecretSyncRender{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncRenderArrayInput)(nil)).Elem(), SecretSyncRenderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncRenderMapInput)(nil)).Elem(), SecretSyncRenderMap{})
	pulumi.RegisterOutputType(SecretSyncRenderOutput{})
	pulumi.RegisterOutputType(SecretSyncRenderArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncRenderMapOutput{})
}
