// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IntegrationDatabricks struct {
	pulumi.CustomResourceState

	// The Databricks host URL.
	DatabricksHost pulumi.StringOutput `pulumi:"databricksHost"`
	// The Databricks secret scope. Example: your-secret-scope
	DatabricksSecretScope pulumi.StringOutput `pulumi:"databricksSecretScope"`
	// The Databricks access token.
	DatabricksToken pulumi.StringOutput `pulumi:"databricksToken"`
	// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringOutput `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The ID of your Infisical project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
}

// NewIntegrationDatabricks registers a new resource with the given unique name, arguments, and options.
func NewIntegrationDatabricks(ctx *pulumi.Context,
	name string, args *IntegrationDatabricksArgs, opts ...pulumi.ResourceOption) (*IntegrationDatabricks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabricksHost == nil {
		return nil, errors.New("invalid value for required argument 'DatabricksHost'")
	}
	if args.DatabricksSecretScope == nil {
		return nil, errors.New("invalid value for required argument 'DatabricksSecretScope'")
	}
	if args.DatabricksToken == nil {
		return nil, errors.New("invalid value for required argument 'DatabricksToken'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.DatabricksToken != nil {
		args.DatabricksToken = pulumi.ToSecret(args.DatabricksToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"databricksToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationDatabricks
	err := ctx.RegisterResource("infisical:index/integrationDatabricks:IntegrationDatabricks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationDatabricks gets an existing IntegrationDatabricks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationDatabricks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationDatabricksState, opts ...pulumi.ResourceOption) (*IntegrationDatabricks, error) {
	var resource IntegrationDatabricks
	err := ctx.ReadResource("infisical:index/integrationDatabricks:IntegrationDatabricks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationDatabricks resources.
type integrationDatabricksState struct {
	// The Databricks host URL.
	DatabricksHost *string `pulumi:"databricksHost"`
	// The Databricks secret scope. Example: your-secret-scope
	DatabricksSecretScope *string `pulumi:"databricksSecretScope"`
	// The Databricks access token.
	DatabricksToken *string `pulumi:"databricksToken"`
	// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
	Environment *string `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId *string `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId *string `pulumi:"integrationId"`
	// The ID of your Infisical project.
	ProjectId *string `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
}

type IntegrationDatabricksState struct {
	// The Databricks host URL.
	DatabricksHost pulumi.StringPtrInput
	// The Databricks secret scope. Example: your-secret-scope
	DatabricksSecretScope pulumi.StringPtrInput
	// The Databricks access token.
	DatabricksToken pulumi.StringPtrInput
	// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
	Environment pulumi.StringPtrInput
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringPtrInput
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringPtrInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringPtrInput
}

func (IntegrationDatabricksState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationDatabricksState)(nil)).Elem()
}

type integrationDatabricksArgs struct {
	// The Databricks host URL.
	DatabricksHost string `pulumi:"databricksHost"`
	// The Databricks secret scope. Example: your-secret-scope
	DatabricksSecretScope string `pulumi:"databricksSecretScope"`
	// The Databricks access token.
	DatabricksToken string `pulumi:"databricksToken"`
	// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
	Environment string `pulumi:"environment"`
	// The ID of your Infisical project.
	ProjectId string `pulumi:"projectId"`
	// The secret path in Infisical to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
}

// The set of arguments for constructing a IntegrationDatabricks resource.
type IntegrationDatabricksArgs struct {
	// The Databricks host URL.
	DatabricksHost pulumi.StringInput
	// The Databricks secret scope. Example: your-secret-scope
	DatabricksSecretScope pulumi.StringInput
	// The Databricks access token.
	DatabricksToken pulumi.StringInput
	// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
	Environment pulumi.StringInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringInput
}

func (IntegrationDatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationDatabricksArgs)(nil)).Elem()
}

type IntegrationDatabricksInput interface {
	pulumi.Input

	ToIntegrationDatabricksOutput() IntegrationDatabricksOutput
	ToIntegrationDatabricksOutputWithContext(ctx context.Context) IntegrationDatabricksOutput
}

func (*IntegrationDatabricks) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationDatabricks)(nil)).Elem()
}

func (i *IntegrationDatabricks) ToIntegrationDatabricksOutput() IntegrationDatabricksOutput {
	return i.ToIntegrationDatabricksOutputWithContext(context.Background())
}

func (i *IntegrationDatabricks) ToIntegrationDatabricksOutputWithContext(ctx context.Context) IntegrationDatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDatabricksOutput)
}

// IntegrationDatabricksArrayInput is an input type that accepts IntegrationDatabricksArray and IntegrationDatabricksArrayOutput values.
// You can construct a concrete instance of `IntegrationDatabricksArrayInput` via:
//
//	IntegrationDatabricksArray{ IntegrationDatabricksArgs{...} }
type IntegrationDatabricksArrayInput interface {
	pulumi.Input

	ToIntegrationDatabricksArrayOutput() IntegrationDatabricksArrayOutput
	ToIntegrationDatabricksArrayOutputWithContext(context.Context) IntegrationDatabricksArrayOutput
}

type IntegrationDatabricksArray []IntegrationDatabricksInput

func (IntegrationDatabricksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationDatabricks)(nil)).Elem()
}

func (i IntegrationDatabricksArray) ToIntegrationDatabricksArrayOutput() IntegrationDatabricksArrayOutput {
	return i.ToIntegrationDatabricksArrayOutputWithContext(context.Background())
}

func (i IntegrationDatabricksArray) ToIntegrationDatabricksArrayOutputWithContext(ctx context.Context) IntegrationDatabricksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDatabricksArrayOutput)
}

// IntegrationDatabricksMapInput is an input type that accepts IntegrationDatabricksMap and IntegrationDatabricksMapOutput values.
// You can construct a concrete instance of `IntegrationDatabricksMapInput` via:
//
//	IntegrationDatabricksMap{ "key": IntegrationDatabricksArgs{...} }
type IntegrationDatabricksMapInput interface {
	pulumi.Input

	ToIntegrationDatabricksMapOutput() IntegrationDatabricksMapOutput
	ToIntegrationDatabricksMapOutputWithContext(context.Context) IntegrationDatabricksMapOutput
}

type IntegrationDatabricksMap map[string]IntegrationDatabricksInput

func (IntegrationDatabricksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationDatabricks)(nil)).Elem()
}

func (i IntegrationDatabricksMap) ToIntegrationDatabricksMapOutput() IntegrationDatabricksMapOutput {
	return i.ToIntegrationDatabricksMapOutputWithContext(context.Background())
}

func (i IntegrationDatabricksMap) ToIntegrationDatabricksMapOutputWithContext(ctx context.Context) IntegrationDatabricksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDatabricksMapOutput)
}

type IntegrationDatabricksOutput struct{ *pulumi.OutputState }

func (IntegrationDatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationDatabricks)(nil)).Elem()
}

func (o IntegrationDatabricksOutput) ToIntegrationDatabricksOutput() IntegrationDatabricksOutput {
	return o
}

func (o IntegrationDatabricksOutput) ToIntegrationDatabricksOutputWithContext(ctx context.Context) IntegrationDatabricksOutput {
	return o
}

// The Databricks host URL.
func (o IntegrationDatabricksOutput) DatabricksHost() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.DatabricksHost }).(pulumi.StringOutput)
}

// The Databricks secret scope. Example: your-secret-scope
func (o IntegrationDatabricksOutput) DatabricksSecretScope() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.DatabricksSecretScope }).(pulumi.StringOutput)
}

// The Databricks access token.
func (o IntegrationDatabricksOutput) DatabricksToken() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.DatabricksToken }).(pulumi.StringOutput)
}

// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
func (o IntegrationDatabricksOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the integration auth, used internally by Infisical.
func (o IntegrationDatabricksOutput) IntegrationAuthId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.IntegrationAuthId }).(pulumi.StringOutput)
}

// The ID of the integration, used internally by Infisical.
func (o IntegrationDatabricksOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The ID of your Infisical project.
func (o IntegrationDatabricksOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The secret path in Infisical to sync secrets from.
func (o IntegrationDatabricksOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDatabricks) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

type IntegrationDatabricksArrayOutput struct{ *pulumi.OutputState }

func (IntegrationDatabricksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationDatabricks)(nil)).Elem()
}

func (o IntegrationDatabricksArrayOutput) ToIntegrationDatabricksArrayOutput() IntegrationDatabricksArrayOutput {
	return o
}

func (o IntegrationDatabricksArrayOutput) ToIntegrationDatabricksArrayOutputWithContext(ctx context.Context) IntegrationDatabricksArrayOutput {
	return o
}

func (o IntegrationDatabricksArrayOutput) Index(i pulumi.IntInput) IntegrationDatabricksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationDatabricks {
		return vs[0].([]*IntegrationDatabricks)[vs[1].(int)]
	}).(IntegrationDatabricksOutput)
}

type IntegrationDatabricksMapOutput struct{ *pulumi.OutputState }

func (IntegrationDatabricksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationDatabricks)(nil)).Elem()
}

func (o IntegrationDatabricksMapOutput) ToIntegrationDatabricksMapOutput() IntegrationDatabricksMapOutput {
	return o
}

func (o IntegrationDatabricksMapOutput) ToIntegrationDatabricksMapOutputWithContext(ctx context.Context) IntegrationDatabricksMapOutput {
	return o
}

func (o IntegrationDatabricksMapOutput) MapIndex(k pulumi.StringInput) IntegrationDatabricksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationDatabricks {
		return vs[0].(map[string]*IntegrationDatabricks)[vs[1].(string)]
	}).(IntegrationDatabricksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDatabricksInput)(nil)).Elem(), &IntegrationDatabricks{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDatabricksArrayInput)(nil)).Elem(), IntegrationDatabricksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDatabricksMapInput)(nil)).Elem(), IntegrationDatabricksMap{})
	pulumi.RegisterOutputType(IntegrationDatabricksOutput{})
	pulumi.RegisterOutputType(IntegrationDatabricksArrayOutput{})
	pulumi.RegisterOutputType(IntegrationDatabricksMapOutput{})
}
