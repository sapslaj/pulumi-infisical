// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncCloudflareWorkers struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Cloudflare Workers sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflareWorkersDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflareWorkersSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncCloudflareWorkers registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncCloudflareWorkers(ctx *pulumi.Context,
	name string, args *SecretSyncCloudflareWorkersArgs, opts ...pulumi.ResourceOption) (*SecretSyncCloudflareWorkers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncCloudflareWorkers
	err := ctx.RegisterResource("infisical:index/secretSyncCloudflareWorkers:SecretSyncCloudflareWorkers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncCloudflareWorkers gets an existing SecretSyncCloudflareWorkers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncCloudflareWorkers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncCloudflareWorkersState, opts ...pulumi.ResourceOption) (*SecretSyncCloudflareWorkers, error) {
	var resource SecretSyncCloudflareWorkers
	err := ctx.ReadResource("infisical:index/secretSyncCloudflareWorkers:SecretSyncCloudflareWorkers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncCloudflareWorkers resources.
type secretSyncCloudflareWorkersState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Cloudflare Workers sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncCloudflareWorkersDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncCloudflareWorkersSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncCloudflareWorkersState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Cloudflare Workers sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflareWorkersDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflareWorkersSyncOptionsPtrInput
}

func (SecretSyncCloudflareWorkersState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncCloudflareWorkersState)(nil)).Elem()
}

type secretSyncCloudflareWorkersArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Cloudflare Workers sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflareWorkersDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflareWorkersSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncCloudflareWorkers resource.
type SecretSyncCloudflareWorkersArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Cloudflare Workers sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflareWorkersDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflareWorkersSyncOptionsInput
}

func (SecretSyncCloudflareWorkersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncCloudflareWorkersArgs)(nil)).Elem()
}

type SecretSyncCloudflareWorkersInput interface {
	pulumi.Input

	ToSecretSyncCloudflareWorkersOutput() SecretSyncCloudflareWorkersOutput
	ToSecretSyncCloudflareWorkersOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersOutput
}

func (*SecretSyncCloudflareWorkers) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (i *SecretSyncCloudflareWorkers) ToSecretSyncCloudflareWorkersOutput() SecretSyncCloudflareWorkersOutput {
	return i.ToSecretSyncCloudflareWorkersOutputWithContext(context.Background())
}

func (i *SecretSyncCloudflareWorkers) ToSecretSyncCloudflareWorkersOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflareWorkersOutput)
}

// SecretSyncCloudflareWorkersArrayInput is an input type that accepts SecretSyncCloudflareWorkersArray and SecretSyncCloudflareWorkersArrayOutput values.
// You can construct a concrete instance of `SecretSyncCloudflareWorkersArrayInput` via:
//
//	SecretSyncCloudflareWorkersArray{ SecretSyncCloudflareWorkersArgs{...} }
type SecretSyncCloudflareWorkersArrayInput interface {
	pulumi.Input

	ToSecretSyncCloudflareWorkersArrayOutput() SecretSyncCloudflareWorkersArrayOutput
	ToSecretSyncCloudflareWorkersArrayOutputWithContext(context.Context) SecretSyncCloudflareWorkersArrayOutput
}

type SecretSyncCloudflareWorkersArray []SecretSyncCloudflareWorkersInput

func (SecretSyncCloudflareWorkersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (i SecretSyncCloudflareWorkersArray) ToSecretSyncCloudflareWorkersArrayOutput() SecretSyncCloudflareWorkersArrayOutput {
	return i.ToSecretSyncCloudflareWorkersArrayOutputWithContext(context.Background())
}

func (i SecretSyncCloudflareWorkersArray) ToSecretSyncCloudflareWorkersArrayOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflareWorkersArrayOutput)
}

// SecretSyncCloudflareWorkersMapInput is an input type that accepts SecretSyncCloudflareWorkersMap and SecretSyncCloudflareWorkersMapOutput values.
// You can construct a concrete instance of `SecretSyncCloudflareWorkersMapInput` via:
//
//	SecretSyncCloudflareWorkersMap{ "key": SecretSyncCloudflareWorkersArgs{...} }
type SecretSyncCloudflareWorkersMapInput interface {
	pulumi.Input

	ToSecretSyncCloudflareWorkersMapOutput() SecretSyncCloudflareWorkersMapOutput
	ToSecretSyncCloudflareWorkersMapOutputWithContext(context.Context) SecretSyncCloudflareWorkersMapOutput
}

type SecretSyncCloudflareWorkersMap map[string]SecretSyncCloudflareWorkersInput

func (SecretSyncCloudflareWorkersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (i SecretSyncCloudflareWorkersMap) ToSecretSyncCloudflareWorkersMapOutput() SecretSyncCloudflareWorkersMapOutput {
	return i.ToSecretSyncCloudflareWorkersMapOutputWithContext(context.Background())
}

func (i SecretSyncCloudflareWorkersMap) ToSecretSyncCloudflareWorkersMapOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflareWorkersMapOutput)
}

type SecretSyncCloudflareWorkersOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflareWorkersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (o SecretSyncCloudflareWorkersOutput) ToSecretSyncCloudflareWorkersOutput() SecretSyncCloudflareWorkersOutput {
	return o
}

func (o SecretSyncCloudflareWorkersOutput) ToSecretSyncCloudflareWorkersOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncCloudflareWorkersOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the cloudflare Connection to use for syncing.
func (o SecretSyncCloudflareWorkersOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Cloudflare Workers sync.
func (o SecretSyncCloudflareWorkersOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncCloudflareWorkersOutput) DestinationConfig() SecretSyncCloudflareWorkersDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) SecretSyncCloudflareWorkersDestinationConfigOutput {
		return v.DestinationConfig
	}).(SecretSyncCloudflareWorkersDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncCloudflareWorkersOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Cloudflare Workers sync to create. Must be slug-friendly.
func (o SecretSyncCloudflareWorkersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncCloudflareWorkersOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncCloudflareWorkersOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncCloudflareWorkersOutput) SyncOptions() SecretSyncCloudflareWorkersSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncCloudflareWorkers) SecretSyncCloudflareWorkersSyncOptionsOutput {
		return v.SyncOptions
	}).(SecretSyncCloudflareWorkersSyncOptionsOutput)
}

type SecretSyncCloudflareWorkersArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflareWorkersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (o SecretSyncCloudflareWorkersArrayOutput) ToSecretSyncCloudflareWorkersArrayOutput() SecretSyncCloudflareWorkersArrayOutput {
	return o
}

func (o SecretSyncCloudflareWorkersArrayOutput) ToSecretSyncCloudflareWorkersArrayOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersArrayOutput {
	return o
}

func (o SecretSyncCloudflareWorkersArrayOutput) Index(i pulumi.IntInput) SecretSyncCloudflareWorkersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncCloudflareWorkers {
		return vs[0].([]*SecretSyncCloudflareWorkers)[vs[1].(int)]
	}).(SecretSyncCloudflareWorkersOutput)
}

type SecretSyncCloudflareWorkersMapOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflareWorkersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncCloudflareWorkers)(nil)).Elem()
}

func (o SecretSyncCloudflareWorkersMapOutput) ToSecretSyncCloudflareWorkersMapOutput() SecretSyncCloudflareWorkersMapOutput {
	return o
}

func (o SecretSyncCloudflareWorkersMapOutput) ToSecretSyncCloudflareWorkersMapOutputWithContext(ctx context.Context) SecretSyncCloudflareWorkersMapOutput {
	return o
}

func (o SecretSyncCloudflareWorkersMapOutput) MapIndex(k pulumi.StringInput) SecretSyncCloudflareWorkersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncCloudflareWorkers {
		return vs[0].(map[string]*SecretSyncCloudflareWorkers)[vs[1].(string)]
	}).(SecretSyncCloudflareWorkersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflareWorkersInput)(nil)).Elem(), &SecretSyncCloudflareWorkers{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflareWorkersArrayInput)(nil)).Elem(), SecretSyncCloudflareWorkersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflareWorkersMapInput)(nil)).Elem(), SecretSyncCloudflareWorkersMap{})
	pulumi.RegisterOutputType(SecretSyncCloudflareWorkersOutput{})
	pulumi.RegisterOutputType(SecretSyncCloudflareWorkersArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncCloudflareWorkersMapOutput{})
}
