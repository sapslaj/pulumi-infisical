// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretFolder struct {
	pulumi.CustomResourceState

	// The ID of the environment
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The environment slug of the folder to modify/create
	EnvironmentSlug pulumi.StringOutput `pulumi:"environmentSlug"`
	// The path where the folder should be created/updated
	FolderPath pulumi.StringOutput `pulumi:"folderPath"`
	// The name for the folder
	Name pulumi.StringOutput `pulumi:"name"`
	// The full path of the folder, including its name.
	Path pulumi.StringOutput `pulumi:"path"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewSecretFolder registers a new resource with the given unique name, arguments, and options.
func NewSecretFolder(ctx *pulumi.Context,
	name string, args *SecretFolderArgs, opts ...pulumi.ResourceOption) (*SecretFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSlug'")
	}
	if args.FolderPath == nil {
		return nil, errors.New("invalid value for required argument 'FolderPath'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretFolder
	err := ctx.RegisterResource("infisical:index/secretFolder:SecretFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretFolder gets an existing SecretFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretFolderState, opts ...pulumi.ResourceOption) (*SecretFolder, error) {
	var resource SecretFolder
	err := ctx.ReadResource("infisical:index/secretFolder:SecretFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretFolder resources.
type secretFolderState struct {
	// The ID of the environment
	EnvironmentId *string `pulumi:"environmentId"`
	// The environment slug of the folder to modify/create
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The path where the folder should be created/updated
	FolderPath *string `pulumi:"folderPath"`
	// The name for the folder
	Name *string `pulumi:"name"`
	// The full path of the folder, including its name.
	Path *string `pulumi:"path"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId *string `pulumi:"projectId"`
}

type SecretFolderState struct {
	// The ID of the environment
	EnvironmentId pulumi.StringPtrInput
	// The environment slug of the folder to modify/create
	EnvironmentSlug pulumi.StringPtrInput
	// The path where the folder should be created/updated
	FolderPath pulumi.StringPtrInput
	// The name for the folder
	Name pulumi.StringPtrInput
	// The full path of the folder, including its name.
	Path pulumi.StringPtrInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringPtrInput
}

func (SecretFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretFolderState)(nil)).Elem()
}

type secretFolderArgs struct {
	// The environment slug of the folder to modify/create
	EnvironmentSlug string `pulumi:"environmentSlug"`
	// The path where the folder should be created/updated
	FolderPath string `pulumi:"folderPath"`
	// The name for the folder
	Name *string `pulumi:"name"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a SecretFolder resource.
type SecretFolderArgs struct {
	// The environment slug of the folder to modify/create
	EnvironmentSlug pulumi.StringInput
	// The path where the folder should be created/updated
	FolderPath pulumi.StringInput
	// The name for the folder
	Name pulumi.StringPtrInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringInput
}

func (SecretFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretFolderArgs)(nil)).Elem()
}

type SecretFolderInput interface {
	pulumi.Input

	ToSecretFolderOutput() SecretFolderOutput
	ToSecretFolderOutputWithContext(ctx context.Context) SecretFolderOutput
}

func (*SecretFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretFolder)(nil)).Elem()
}

func (i *SecretFolder) ToSecretFolderOutput() SecretFolderOutput {
	return i.ToSecretFolderOutputWithContext(context.Background())
}

func (i *SecretFolder) ToSecretFolderOutputWithContext(ctx context.Context) SecretFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretFolderOutput)
}

// SecretFolderArrayInput is an input type that accepts SecretFolderArray and SecretFolderArrayOutput values.
// You can construct a concrete instance of `SecretFolderArrayInput` via:
//
//	SecretFolderArray{ SecretFolderArgs{...} }
type SecretFolderArrayInput interface {
	pulumi.Input

	ToSecretFolderArrayOutput() SecretFolderArrayOutput
	ToSecretFolderArrayOutputWithContext(context.Context) SecretFolderArrayOutput
}

type SecretFolderArray []SecretFolderInput

func (SecretFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretFolder)(nil)).Elem()
}

func (i SecretFolderArray) ToSecretFolderArrayOutput() SecretFolderArrayOutput {
	return i.ToSecretFolderArrayOutputWithContext(context.Background())
}

func (i SecretFolderArray) ToSecretFolderArrayOutputWithContext(ctx context.Context) SecretFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretFolderArrayOutput)
}

// SecretFolderMapInput is an input type that accepts SecretFolderMap and SecretFolderMapOutput values.
// You can construct a concrete instance of `SecretFolderMapInput` via:
//
//	SecretFolderMap{ "key": SecretFolderArgs{...} }
type SecretFolderMapInput interface {
	pulumi.Input

	ToSecretFolderMapOutput() SecretFolderMapOutput
	ToSecretFolderMapOutputWithContext(context.Context) SecretFolderMapOutput
}

type SecretFolderMap map[string]SecretFolderInput

func (SecretFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretFolder)(nil)).Elem()
}

func (i SecretFolderMap) ToSecretFolderMapOutput() SecretFolderMapOutput {
	return i.ToSecretFolderMapOutputWithContext(context.Background())
}

func (i SecretFolderMap) ToSecretFolderMapOutputWithContext(ctx context.Context) SecretFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretFolderMapOutput)
}

type SecretFolderOutput struct{ *pulumi.OutputState }

func (SecretFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretFolder)(nil)).Elem()
}

func (o SecretFolderOutput) ToSecretFolderOutput() SecretFolderOutput {
	return o
}

func (o SecretFolderOutput) ToSecretFolderOutputWithContext(ctx context.Context) SecretFolderOutput {
	return o
}

// The ID of the environment
func (o SecretFolderOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The environment slug of the folder to modify/create
func (o SecretFolderOutput) EnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.EnvironmentSlug }).(pulumi.StringOutput)
}

// The path where the folder should be created/updated
func (o SecretFolderOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.FolderPath }).(pulumi.StringOutput)
}

// The name for the folder
func (o SecretFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The full path of the folder, including its name.
func (o SecretFolderOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
func (o SecretFolderOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretFolder) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type SecretFolderArrayOutput struct{ *pulumi.OutputState }

func (SecretFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretFolder)(nil)).Elem()
}

func (o SecretFolderArrayOutput) ToSecretFolderArrayOutput() SecretFolderArrayOutput {
	return o
}

func (o SecretFolderArrayOutput) ToSecretFolderArrayOutputWithContext(ctx context.Context) SecretFolderArrayOutput {
	return o
}

func (o SecretFolderArrayOutput) Index(i pulumi.IntInput) SecretFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretFolder {
		return vs[0].([]*SecretFolder)[vs[1].(int)]
	}).(SecretFolderOutput)
}

type SecretFolderMapOutput struct{ *pulumi.OutputState }

func (SecretFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretFolder)(nil)).Elem()
}

func (o SecretFolderMapOutput) ToSecretFolderMapOutput() SecretFolderMapOutput {
	return o
}

func (o SecretFolderMapOutput) ToSecretFolderMapOutputWithContext(ctx context.Context) SecretFolderMapOutput {
	return o
}

func (o SecretFolderMapOutput) MapIndex(k pulumi.StringInput) SecretFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretFolder {
		return vs[0].(map[string]*SecretFolder)[vs[1].(string)]
	}).(SecretFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretFolderInput)(nil)).Elem(), &SecretFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretFolderArrayInput)(nil)).Elem(), SecretFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretFolderMapInput)(nil)).Elem(), SecretFolderMap{})
	pulumi.RegisterOutputType(SecretFolderOutput{})
	pulumi.RegisterOutputType(SecretFolderArrayOutput{})
	pulumi.RegisterOutputType(SecretFolderMapOutput{})
}
