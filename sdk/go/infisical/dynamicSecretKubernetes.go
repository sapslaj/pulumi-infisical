// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type DynamicSecretKubernetes struct {
	pulumi.CustomResourceState

	// The configuration of the dynamic secret
	Configuration DynamicSecretKubernetesConfigurationOutput `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringOutput `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringOutput `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrOutput `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretKubernetesMetadataArrayOutput `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path pulumi.StringOutput `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringOutput `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewDynamicSecretKubernetes registers a new resource with the given unique name, arguments, and options.
func NewDynamicSecretKubernetes(ctx *pulumi.Context,
	name string, args *DynamicSecretKubernetesArgs, opts ...pulumi.ResourceOption) (*DynamicSecretKubernetes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DefaultTtl == nil {
		return nil, errors.New("invalid value for required argument 'DefaultTtl'")
	}
	if args.EnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSlug'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ProjectSlug == nil {
		return nil, errors.New("invalid value for required argument 'ProjectSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicSecretKubernetes
	err := ctx.RegisterResource("infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicSecretKubernetes gets an existing DynamicSecretKubernetes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicSecretKubernetes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicSecretKubernetesState, opts ...pulumi.ResourceOption) (*DynamicSecretKubernetes, error) {
	var resource DynamicSecretKubernetes
	err := ctx.ReadResource("infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicSecretKubernetes resources.
type dynamicSecretKubernetesState struct {
	// The configuration of the dynamic secret
	Configuration *DynamicSecretKubernetesConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl *string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretKubernetesMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path *string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug *string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type DynamicSecretKubernetesState struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretKubernetesConfigurationPtrInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringPtrInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringPtrInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretKubernetesMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringPtrInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringPtrInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretKubernetesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretKubernetesState)(nil)).Elem()
}

type dynamicSecretKubernetesArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretKubernetesConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretKubernetesMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a DynamicSecretKubernetes resource.
type DynamicSecretKubernetesArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretKubernetesConfigurationInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretKubernetesMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretKubernetesArgs)(nil)).Elem()
}

type DynamicSecretKubernetesInput interface {
	pulumi.Input

	ToDynamicSecretKubernetesOutput() DynamicSecretKubernetesOutput
	ToDynamicSecretKubernetesOutputWithContext(ctx context.Context) DynamicSecretKubernetesOutput
}

func (*DynamicSecretKubernetes) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretKubernetes)(nil)).Elem()
}

func (i *DynamicSecretKubernetes) ToDynamicSecretKubernetesOutput() DynamicSecretKubernetesOutput {
	return i.ToDynamicSecretKubernetesOutputWithContext(context.Background())
}

func (i *DynamicSecretKubernetes) ToDynamicSecretKubernetesOutputWithContext(ctx context.Context) DynamicSecretKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretKubernetesOutput)
}

// DynamicSecretKubernetesArrayInput is an input type that accepts DynamicSecretKubernetesArray and DynamicSecretKubernetesArrayOutput values.
// You can construct a concrete instance of `DynamicSecretKubernetesArrayInput` via:
//
//	DynamicSecretKubernetesArray{ DynamicSecretKubernetesArgs{...} }
type DynamicSecretKubernetesArrayInput interface {
	pulumi.Input

	ToDynamicSecretKubernetesArrayOutput() DynamicSecretKubernetesArrayOutput
	ToDynamicSecretKubernetesArrayOutputWithContext(context.Context) DynamicSecretKubernetesArrayOutput
}

type DynamicSecretKubernetesArray []DynamicSecretKubernetesInput

func (DynamicSecretKubernetesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretKubernetes)(nil)).Elem()
}

func (i DynamicSecretKubernetesArray) ToDynamicSecretKubernetesArrayOutput() DynamicSecretKubernetesArrayOutput {
	return i.ToDynamicSecretKubernetesArrayOutputWithContext(context.Background())
}

func (i DynamicSecretKubernetesArray) ToDynamicSecretKubernetesArrayOutputWithContext(ctx context.Context) DynamicSecretKubernetesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretKubernetesArrayOutput)
}

// DynamicSecretKubernetesMapInput is an input type that accepts DynamicSecretKubernetesMap and DynamicSecretKubernetesMapOutput values.
// You can construct a concrete instance of `DynamicSecretKubernetesMapInput` via:
//
//	DynamicSecretKubernetesMap{ "key": DynamicSecretKubernetesArgs{...} }
type DynamicSecretKubernetesMapInput interface {
	pulumi.Input

	ToDynamicSecretKubernetesMapOutput() DynamicSecretKubernetesMapOutput
	ToDynamicSecretKubernetesMapOutputWithContext(context.Context) DynamicSecretKubernetesMapOutput
}

type DynamicSecretKubernetesMap map[string]DynamicSecretKubernetesInput

func (DynamicSecretKubernetesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretKubernetes)(nil)).Elem()
}

func (i DynamicSecretKubernetesMap) ToDynamicSecretKubernetesMapOutput() DynamicSecretKubernetesMapOutput {
	return i.ToDynamicSecretKubernetesMapOutputWithContext(context.Background())
}

func (i DynamicSecretKubernetesMap) ToDynamicSecretKubernetesMapOutputWithContext(ctx context.Context) DynamicSecretKubernetesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretKubernetesMapOutput)
}

type DynamicSecretKubernetesOutput struct{ *pulumi.OutputState }

func (DynamicSecretKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretKubernetes)(nil)).Elem()
}

func (o DynamicSecretKubernetesOutput) ToDynamicSecretKubernetesOutput() DynamicSecretKubernetesOutput {
	return o
}

func (o DynamicSecretKubernetesOutput) ToDynamicSecretKubernetesOutputWithContext(ctx context.Context) DynamicSecretKubernetesOutput {
	return o
}

// The configuration of the dynamic secret
func (o DynamicSecretKubernetesOutput) Configuration() DynamicSecretKubernetesConfigurationOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) DynamicSecretKubernetesConfigurationOutput { return v.Configuration }).(DynamicSecretKubernetesConfigurationOutput)
}

// The default TTL that will be applied for all the leases.
func (o DynamicSecretKubernetesOutput) DefaultTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringOutput { return v.DefaultTtl }).(pulumi.StringOutput)
}

// The slug of the environment to create the dynamic secret in.
func (o DynamicSecretKubernetesOutput) EnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringOutput { return v.EnvironmentSlug }).(pulumi.StringOutput)
}

// The maximum limit a TTL can be leases or renewed.
func (o DynamicSecretKubernetesOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringPtrOutput { return v.MaxTtl }).(pulumi.StringPtrOutput)
}

// The metadata associated with this dynamic secret
func (o DynamicSecretKubernetesOutput) Metadatas() DynamicSecretKubernetesMetadataArrayOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) DynamicSecretKubernetesMetadataArrayOutput { return v.Metadatas }).(DynamicSecretKubernetesMetadataArrayOutput)
}

// The name of the dynamic secret.
func (o DynamicSecretKubernetesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to create the dynamic secret in.
func (o DynamicSecretKubernetesOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The slug of the project to create dynamic secret in.
func (o DynamicSecretKubernetesOutput) ProjectSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringOutput { return v.ProjectSlug }).(pulumi.StringOutput)
}

// The username template of the dynamic secret
func (o DynamicSecretKubernetesOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretKubernetes) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type DynamicSecretKubernetesArrayOutput struct{ *pulumi.OutputState }

func (DynamicSecretKubernetesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretKubernetes)(nil)).Elem()
}

func (o DynamicSecretKubernetesArrayOutput) ToDynamicSecretKubernetesArrayOutput() DynamicSecretKubernetesArrayOutput {
	return o
}

func (o DynamicSecretKubernetesArrayOutput) ToDynamicSecretKubernetesArrayOutputWithContext(ctx context.Context) DynamicSecretKubernetesArrayOutput {
	return o
}

func (o DynamicSecretKubernetesArrayOutput) Index(i pulumi.IntInput) DynamicSecretKubernetesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicSecretKubernetes {
		return vs[0].([]*DynamicSecretKubernetes)[vs[1].(int)]
	}).(DynamicSecretKubernetesOutput)
}

type DynamicSecretKubernetesMapOutput struct{ *pulumi.OutputState }

func (DynamicSecretKubernetesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretKubernetes)(nil)).Elem()
}

func (o DynamicSecretKubernetesMapOutput) ToDynamicSecretKubernetesMapOutput() DynamicSecretKubernetesMapOutput {
	return o
}

func (o DynamicSecretKubernetesMapOutput) ToDynamicSecretKubernetesMapOutputWithContext(ctx context.Context) DynamicSecretKubernetesMapOutput {
	return o
}

func (o DynamicSecretKubernetesMapOutput) MapIndex(k pulumi.StringInput) DynamicSecretKubernetesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicSecretKubernetes {
		return vs[0].(map[string]*DynamicSecretKubernetes)[vs[1].(string)]
	}).(DynamicSecretKubernetesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretKubernetesInput)(nil)).Elem(), &DynamicSecretKubernetes{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretKubernetesArrayInput)(nil)).Elem(), DynamicSecretKubernetesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretKubernetesMapInput)(nil)).Elem(), DynamicSecretKubernetesMap{})
	pulumi.RegisterOutputType(DynamicSecretKubernetesOutput{})
	pulumi.RegisterOutputType(DynamicSecretKubernetesArrayOutput{})
	pulumi.RegisterOutputType(DynamicSecretKubernetesMapOutput{})
}
