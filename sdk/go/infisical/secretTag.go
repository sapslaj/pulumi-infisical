// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretTag struct {
	pulumi.CustomResourceState

	// Color code for the tag.
	Color pulumi.StringOutput `pulumi:"color"`
	// The name for the new tag
	Name pulumi.StringOutput `pulumi:"name"`
	// The project id associated with the secret tag
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The slug for the new tag
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewSecretTag registers a new resource with the given unique name, arguments, and options.
func NewSecretTag(ctx *pulumi.Context,
	name string, args *SecretTagArgs, opts ...pulumi.ResourceOption) (*SecretTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Color == nil {
		return nil, errors.New("invalid value for required argument 'Color'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretTag
	err := ctx.RegisterResource("infisical:index/secretTag:SecretTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretTag gets an existing SecretTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretTagState, opts ...pulumi.ResourceOption) (*SecretTag, error) {
	var resource SecretTag
	err := ctx.ReadResource("infisical:index/secretTag:SecretTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretTag resources.
type secretTagState struct {
	// Color code for the tag.
	Color *string `pulumi:"color"`
	// The name for the new tag
	Name *string `pulumi:"name"`
	// The project id associated with the secret tag
	ProjectId *string `pulumi:"projectId"`
	// The slug for the new tag
	Slug *string `pulumi:"slug"`
}

type SecretTagState struct {
	// Color code for the tag.
	Color pulumi.StringPtrInput
	// The name for the new tag
	Name pulumi.StringPtrInput
	// The project id associated with the secret tag
	ProjectId pulumi.StringPtrInput
	// The slug for the new tag
	Slug pulumi.StringPtrInput
}

func (SecretTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTagState)(nil)).Elem()
}

type secretTagArgs struct {
	// Color code for the tag.
	Color string `pulumi:"color"`
	// The name for the new tag
	Name *string `pulumi:"name"`
	// The project id associated with the secret tag
	ProjectId string `pulumi:"projectId"`
	// The slug for the new tag
	Slug string `pulumi:"slug"`
}

// The set of arguments for constructing a SecretTag resource.
type SecretTagArgs struct {
	// Color code for the tag.
	Color pulumi.StringInput
	// The name for the new tag
	Name pulumi.StringPtrInput
	// The project id associated with the secret tag
	ProjectId pulumi.StringInput
	// The slug for the new tag
	Slug pulumi.StringInput
}

func (SecretTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTagArgs)(nil)).Elem()
}

type SecretTagInput interface {
	pulumi.Input

	ToSecretTagOutput() SecretTagOutput
	ToSecretTagOutputWithContext(ctx context.Context) SecretTagOutput
}

func (*SecretTag) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretTag)(nil)).Elem()
}

func (i *SecretTag) ToSecretTagOutput() SecretTagOutput {
	return i.ToSecretTagOutputWithContext(context.Background())
}

func (i *SecretTag) ToSecretTagOutputWithContext(ctx context.Context) SecretTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTagOutput)
}

// SecretTagArrayInput is an input type that accepts SecretTagArray and SecretTagArrayOutput values.
// You can construct a concrete instance of `SecretTagArrayInput` via:
//
//	SecretTagArray{ SecretTagArgs{...} }
type SecretTagArrayInput interface {
	pulumi.Input

	ToSecretTagArrayOutput() SecretTagArrayOutput
	ToSecretTagArrayOutputWithContext(context.Context) SecretTagArrayOutput
}

type SecretTagArray []SecretTagInput

func (SecretTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretTag)(nil)).Elem()
}

func (i SecretTagArray) ToSecretTagArrayOutput() SecretTagArrayOutput {
	return i.ToSecretTagArrayOutputWithContext(context.Background())
}

func (i SecretTagArray) ToSecretTagArrayOutputWithContext(ctx context.Context) SecretTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTagArrayOutput)
}

// SecretTagMapInput is an input type that accepts SecretTagMap and SecretTagMapOutput values.
// You can construct a concrete instance of `SecretTagMapInput` via:
//
//	SecretTagMap{ "key": SecretTagArgs{...} }
type SecretTagMapInput interface {
	pulumi.Input

	ToSecretTagMapOutput() SecretTagMapOutput
	ToSecretTagMapOutputWithContext(context.Context) SecretTagMapOutput
}

type SecretTagMap map[string]SecretTagInput

func (SecretTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretTag)(nil)).Elem()
}

func (i SecretTagMap) ToSecretTagMapOutput() SecretTagMapOutput {
	return i.ToSecretTagMapOutputWithContext(context.Background())
}

func (i SecretTagMap) ToSecretTagMapOutputWithContext(ctx context.Context) SecretTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTagMapOutput)
}

type SecretTagOutput struct{ *pulumi.OutputState }

func (SecretTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretTag)(nil)).Elem()
}

func (o SecretTagOutput) ToSecretTagOutput() SecretTagOutput {
	return o
}

func (o SecretTagOutput) ToSecretTagOutputWithContext(ctx context.Context) SecretTagOutput {
	return o
}

// Color code for the tag.
func (o SecretTagOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTag) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The name for the new tag
func (o SecretTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project id associated with the secret tag
func (o SecretTagOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTag) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The slug for the new tag
func (o SecretTagOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTag) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type SecretTagArrayOutput struct{ *pulumi.OutputState }

func (SecretTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretTag)(nil)).Elem()
}

func (o SecretTagArrayOutput) ToSecretTagArrayOutput() SecretTagArrayOutput {
	return o
}

func (o SecretTagArrayOutput) ToSecretTagArrayOutputWithContext(ctx context.Context) SecretTagArrayOutput {
	return o
}

func (o SecretTagArrayOutput) Index(i pulumi.IntInput) SecretTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretTag {
		return vs[0].([]*SecretTag)[vs[1].(int)]
	}).(SecretTagOutput)
}

type SecretTagMapOutput struct{ *pulumi.OutputState }

func (SecretTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretTag)(nil)).Elem()
}

func (o SecretTagMapOutput) ToSecretTagMapOutput() SecretTagMapOutput {
	return o
}

func (o SecretTagMapOutput) ToSecretTagMapOutputWithContext(ctx context.Context) SecretTagMapOutput {
	return o
}

func (o SecretTagMapOutput) MapIndex(k pulumi.StringInput) SecretTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretTag {
		return vs[0].(map[string]*SecretTag)[vs[1].(string)]
	}).(SecretTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTagInput)(nil)).Elem(), &SecretTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTagArrayInput)(nil)).Elem(), SecretTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTagMapInput)(nil)).Elem(), SecretTagMap{})
	pulumi.RegisterOutputType(SecretTagOutput{})
	pulumi.RegisterOutputType(SecretTagArrayOutput{})
	pulumi.RegisterOutputType(SecretTagMapOutput{})
}
