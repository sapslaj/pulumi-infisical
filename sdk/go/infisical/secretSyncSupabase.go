// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncSupabase struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the supabase Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Supabase sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncSupabaseDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Supabase sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncSupabaseSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncSupabase registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncSupabase(ctx *pulumi.Context,
	name string, args *SecretSyncSupabaseArgs, opts ...pulumi.ResourceOption) (*SecretSyncSupabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncSupabase
	err := ctx.RegisterResource("infisical:index/secretSyncSupabase:SecretSyncSupabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncSupabase gets an existing SecretSyncSupabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncSupabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncSupabaseState, opts ...pulumi.ResourceOption) (*SecretSyncSupabase, error) {
	var resource SecretSyncSupabase
	err := ctx.ReadResource("infisical:index/secretSyncSupabase:SecretSyncSupabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncSupabase resources.
type secretSyncSupabaseState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the supabase Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Supabase sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncSupabaseDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Supabase sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncSupabaseSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncSupabaseState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the supabase Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Supabase sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncSupabaseDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Supabase sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncSupabaseSyncOptionsPtrInput
}

func (SecretSyncSupabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncSupabaseState)(nil)).Elem()
}

type secretSyncSupabaseArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the supabase Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Supabase sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncSupabaseDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Supabase sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncSupabaseSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncSupabase resource.
type SecretSyncSupabaseArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the supabase Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Supabase sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncSupabaseDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Supabase sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncSupabaseSyncOptionsInput
}

func (SecretSyncSupabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncSupabaseArgs)(nil)).Elem()
}

type SecretSyncSupabaseInput interface {
	pulumi.Input

	ToSecretSyncSupabaseOutput() SecretSyncSupabaseOutput
	ToSecretSyncSupabaseOutputWithContext(ctx context.Context) SecretSyncSupabaseOutput
}

func (*SecretSyncSupabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncSupabase)(nil)).Elem()
}

func (i *SecretSyncSupabase) ToSecretSyncSupabaseOutput() SecretSyncSupabaseOutput {
	return i.ToSecretSyncSupabaseOutputWithContext(context.Background())
}

func (i *SecretSyncSupabase) ToSecretSyncSupabaseOutputWithContext(ctx context.Context) SecretSyncSupabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncSupabaseOutput)
}

// SecretSyncSupabaseArrayInput is an input type that accepts SecretSyncSupabaseArray and SecretSyncSupabaseArrayOutput values.
// You can construct a concrete instance of `SecretSyncSupabaseArrayInput` via:
//
//	SecretSyncSupabaseArray{ SecretSyncSupabaseArgs{...} }
type SecretSyncSupabaseArrayInput interface {
	pulumi.Input

	ToSecretSyncSupabaseArrayOutput() SecretSyncSupabaseArrayOutput
	ToSecretSyncSupabaseArrayOutputWithContext(context.Context) SecretSyncSupabaseArrayOutput
}

type SecretSyncSupabaseArray []SecretSyncSupabaseInput

func (SecretSyncSupabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncSupabase)(nil)).Elem()
}

func (i SecretSyncSupabaseArray) ToSecretSyncSupabaseArrayOutput() SecretSyncSupabaseArrayOutput {
	return i.ToSecretSyncSupabaseArrayOutputWithContext(context.Background())
}

func (i SecretSyncSupabaseArray) ToSecretSyncSupabaseArrayOutputWithContext(ctx context.Context) SecretSyncSupabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncSupabaseArrayOutput)
}

// SecretSyncSupabaseMapInput is an input type that accepts SecretSyncSupabaseMap and SecretSyncSupabaseMapOutput values.
// You can construct a concrete instance of `SecretSyncSupabaseMapInput` via:
//
//	SecretSyncSupabaseMap{ "key": SecretSyncSupabaseArgs{...} }
type SecretSyncSupabaseMapInput interface {
	pulumi.Input

	ToSecretSyncSupabaseMapOutput() SecretSyncSupabaseMapOutput
	ToSecretSyncSupabaseMapOutputWithContext(context.Context) SecretSyncSupabaseMapOutput
}

type SecretSyncSupabaseMap map[string]SecretSyncSupabaseInput

func (SecretSyncSupabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncSupabase)(nil)).Elem()
}

func (i SecretSyncSupabaseMap) ToSecretSyncSupabaseMapOutput() SecretSyncSupabaseMapOutput {
	return i.ToSecretSyncSupabaseMapOutputWithContext(context.Background())
}

func (i SecretSyncSupabaseMap) ToSecretSyncSupabaseMapOutputWithContext(ctx context.Context) SecretSyncSupabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncSupabaseMapOutput)
}

type SecretSyncSupabaseOutput struct{ *pulumi.OutputState }

func (SecretSyncSupabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncSupabase)(nil)).Elem()
}

func (o SecretSyncSupabaseOutput) ToSecretSyncSupabaseOutput() SecretSyncSupabaseOutput {
	return o
}

func (o SecretSyncSupabaseOutput) ToSecretSyncSupabaseOutputWithContext(ctx context.Context) SecretSyncSupabaseOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncSupabaseOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the supabase Connection to use for syncing.
func (o SecretSyncSupabaseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Supabase sync.
func (o SecretSyncSupabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncSupabaseOutput) DestinationConfig() SecretSyncSupabaseDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) SecretSyncSupabaseDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncSupabaseDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncSupabaseOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Supabase sync to create. Must be slug-friendly.
func (o SecretSyncSupabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncSupabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncSupabaseOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncSupabaseOutput) SyncOptions() SecretSyncSupabaseSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncSupabase) SecretSyncSupabaseSyncOptionsOutput { return v.SyncOptions }).(SecretSyncSupabaseSyncOptionsOutput)
}

type SecretSyncSupabaseArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncSupabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncSupabase)(nil)).Elem()
}

func (o SecretSyncSupabaseArrayOutput) ToSecretSyncSupabaseArrayOutput() SecretSyncSupabaseArrayOutput {
	return o
}

func (o SecretSyncSupabaseArrayOutput) ToSecretSyncSupabaseArrayOutputWithContext(ctx context.Context) SecretSyncSupabaseArrayOutput {
	return o
}

func (o SecretSyncSupabaseArrayOutput) Index(i pulumi.IntInput) SecretSyncSupabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncSupabase {
		return vs[0].([]*SecretSyncSupabase)[vs[1].(int)]
	}).(SecretSyncSupabaseOutput)
}

type SecretSyncSupabaseMapOutput struct{ *pulumi.OutputState }

func (SecretSyncSupabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncSupabase)(nil)).Elem()
}

func (o SecretSyncSupabaseMapOutput) ToSecretSyncSupabaseMapOutput() SecretSyncSupabaseMapOutput {
	return o
}

func (o SecretSyncSupabaseMapOutput) ToSecretSyncSupabaseMapOutputWithContext(ctx context.Context) SecretSyncSupabaseMapOutput {
	return o
}

func (o SecretSyncSupabaseMapOutput) MapIndex(k pulumi.StringInput) SecretSyncSupabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncSupabase {
		return vs[0].(map[string]*SecretSyncSupabase)[vs[1].(string)]
	}).(SecretSyncSupabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncSupabaseInput)(nil)).Elem(), &SecretSyncSupabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncSupabaseArrayInput)(nil)).Elem(), SecretSyncSupabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncSupabaseMapInput)(nil)).Elem(), SecretSyncSupabaseMap{})
	pulumi.RegisterOutputType(SecretSyncSupabaseOutput{})
	pulumi.RegisterOutputType(SecretSyncSupabaseArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncSupabaseMapOutput{})
}
