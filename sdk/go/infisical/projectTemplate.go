// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectTemplate struct {
	pulumi.CustomResourceState

	// The description of the project template
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The environments for the project template
	Environments ProjectTemplateEnvironmentArrayOutput `pulumi:"environments"`
	// The name of the project template
	Name pulumi.StringOutput `pulumi:"name"`
	// The roles for the project template
	Roles ProjectTemplateRoleArrayOutput `pulumi:"roles"`
	// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProjectTemplate registers a new resource with the given unique name, arguments, and options.
func NewProjectTemplate(ctx *pulumi.Context,
	name string, args *ProjectTemplateArgs, opts ...pulumi.ResourceOption) (*ProjectTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectTemplate
	err := ctx.RegisterResource("infisical:index/projectTemplate:ProjectTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectTemplate gets an existing ProjectTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectTemplateState, opts ...pulumi.ResourceOption) (*ProjectTemplate, error) {
	var resource ProjectTemplate
	err := ctx.ReadResource("infisical:index/projectTemplate:ProjectTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectTemplate resources.
type projectTemplateState struct {
	// The description of the project template
	Description *string `pulumi:"description"`
	// The environments for the project template
	Environments []ProjectTemplateEnvironment `pulumi:"environments"`
	// The name of the project template
	Name *string `pulumi:"name"`
	// The roles for the project template
	Roles []ProjectTemplateRole `pulumi:"roles"`
	// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
	Type *string `pulumi:"type"`
}

type ProjectTemplateState struct {
	// The description of the project template
	Description pulumi.StringPtrInput
	// The environments for the project template
	Environments ProjectTemplateEnvironmentArrayInput
	// The name of the project template
	Name pulumi.StringPtrInput
	// The roles for the project template
	Roles ProjectTemplateRoleArrayInput
	// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
	Type pulumi.StringPtrInput
}

func (ProjectTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectTemplateState)(nil)).Elem()
}

type projectTemplateArgs struct {
	// The description of the project template
	Description *string `pulumi:"description"`
	// The environments for the project template
	Environments []ProjectTemplateEnvironment `pulumi:"environments"`
	// The name of the project template
	Name *string `pulumi:"name"`
	// The roles for the project template
	Roles []ProjectTemplateRole `pulumi:"roles"`
	// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ProjectTemplate resource.
type ProjectTemplateArgs struct {
	// The description of the project template
	Description pulumi.StringPtrInput
	// The environments for the project template
	Environments ProjectTemplateEnvironmentArrayInput
	// The name of the project template
	Name pulumi.StringPtrInput
	// The roles for the project template
	Roles ProjectTemplateRoleArrayInput
	// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
	Type pulumi.StringInput
}

func (ProjectTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectTemplateArgs)(nil)).Elem()
}

type ProjectTemplateInput interface {
	pulumi.Input

	ToProjectTemplateOutput() ProjectTemplateOutput
	ToProjectTemplateOutputWithContext(ctx context.Context) ProjectTemplateOutput
}

func (*ProjectTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTemplate)(nil)).Elem()
}

func (i *ProjectTemplate) ToProjectTemplateOutput() ProjectTemplateOutput {
	return i.ToProjectTemplateOutputWithContext(context.Background())
}

func (i *ProjectTemplate) ToProjectTemplateOutputWithContext(ctx context.Context) ProjectTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTemplateOutput)
}

// ProjectTemplateArrayInput is an input type that accepts ProjectTemplateArray and ProjectTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectTemplateArrayInput` via:
//
//	ProjectTemplateArray{ ProjectTemplateArgs{...} }
type ProjectTemplateArrayInput interface {
	pulumi.Input

	ToProjectTemplateArrayOutput() ProjectTemplateArrayOutput
	ToProjectTemplateArrayOutputWithContext(context.Context) ProjectTemplateArrayOutput
}

type ProjectTemplateArray []ProjectTemplateInput

func (ProjectTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectTemplate)(nil)).Elem()
}

func (i ProjectTemplateArray) ToProjectTemplateArrayOutput() ProjectTemplateArrayOutput {
	return i.ToProjectTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectTemplateArray) ToProjectTemplateArrayOutputWithContext(ctx context.Context) ProjectTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTemplateArrayOutput)
}

// ProjectTemplateMapInput is an input type that accepts ProjectTemplateMap and ProjectTemplateMapOutput values.
// You can construct a concrete instance of `ProjectTemplateMapInput` via:
//
//	ProjectTemplateMap{ "key": ProjectTemplateArgs{...} }
type ProjectTemplateMapInput interface {
	pulumi.Input

	ToProjectTemplateMapOutput() ProjectTemplateMapOutput
	ToProjectTemplateMapOutputWithContext(context.Context) ProjectTemplateMapOutput
}

type ProjectTemplateMap map[string]ProjectTemplateInput

func (ProjectTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectTemplate)(nil)).Elem()
}

func (i ProjectTemplateMap) ToProjectTemplateMapOutput() ProjectTemplateMapOutput {
	return i.ToProjectTemplateMapOutputWithContext(context.Background())
}

func (i ProjectTemplateMap) ToProjectTemplateMapOutputWithContext(ctx context.Context) ProjectTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTemplateMapOutput)
}

type ProjectTemplateOutput struct{ *pulumi.OutputState }

func (ProjectTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTemplate)(nil)).Elem()
}

func (o ProjectTemplateOutput) ToProjectTemplateOutput() ProjectTemplateOutput {
	return o
}

func (o ProjectTemplateOutput) ToProjectTemplateOutputWithContext(ctx context.Context) ProjectTemplateOutput {
	return o
}

// The description of the project template
func (o ProjectTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The environments for the project template
func (o ProjectTemplateOutput) Environments() ProjectTemplateEnvironmentArrayOutput {
	return o.ApplyT(func(v *ProjectTemplate) ProjectTemplateEnvironmentArrayOutput { return v.Environments }).(ProjectTemplateEnvironmentArrayOutput)
}

// The name of the project template
func (o ProjectTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The roles for the project template
func (o ProjectTemplateOutput) Roles() ProjectTemplateRoleArrayOutput {
	return o.ApplyT(func(v *ProjectTemplate) ProjectTemplateRoleArrayOutput { return v.Roles }).(ProjectTemplateRoleArrayOutput)
}

// The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options
func (o ProjectTemplateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectTemplate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ProjectTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectTemplate)(nil)).Elem()
}

func (o ProjectTemplateArrayOutput) ToProjectTemplateArrayOutput() ProjectTemplateArrayOutput {
	return o
}

func (o ProjectTemplateArrayOutput) ToProjectTemplateArrayOutputWithContext(ctx context.Context) ProjectTemplateArrayOutput {
	return o
}

func (o ProjectTemplateArrayOutput) Index(i pulumi.IntInput) ProjectTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectTemplate {
		return vs[0].([]*ProjectTemplate)[vs[1].(int)]
	}).(ProjectTemplateOutput)
}

type ProjectTemplateMapOutput struct{ *pulumi.OutputState }

func (ProjectTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectTemplate)(nil)).Elem()
}

func (o ProjectTemplateMapOutput) ToProjectTemplateMapOutput() ProjectTemplateMapOutput {
	return o
}

func (o ProjectTemplateMapOutput) ToProjectTemplateMapOutputWithContext(ctx context.Context) ProjectTemplateMapOutput {
	return o
}

func (o ProjectTemplateMapOutput) MapIndex(k pulumi.StringInput) ProjectTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectTemplate {
		return vs[0].(map[string]*ProjectTemplate)[vs[1].(string)]
	}).(ProjectTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTemplateInput)(nil)).Elem(), &ProjectTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTemplateArrayInput)(nil)).Elem(), ProjectTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTemplateMapInput)(nil)).Elem(), ProjectTemplateMap{})
	pulumi.RegisterOutputType(ProjectTemplateOutput{})
	pulumi.RegisterOutputType(ProjectTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectTemplateMapOutput{})
}
