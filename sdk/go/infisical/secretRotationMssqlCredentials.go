// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationMssqlCredentials struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMssqlCredentialsParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMssqlCredentialsRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMssqlCredentialsSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMssqlCredentialsTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationMssqlCredentials registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationMssqlCredentials(ctx *pulumi.Context,
	name string, args *SecretRotationMssqlCredentialsArgs, opts ...pulumi.ResourceOption) (*SecretRotationMssqlCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationMssqlCredentials
	err := ctx.RegisterResource("infisical:index/secretRotationMssqlCredentials:SecretRotationMssqlCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationMssqlCredentials gets an existing SecretRotationMssqlCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationMssqlCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationMssqlCredentialsState, opts ...pulumi.ResourceOption) (*SecretRotationMssqlCredentials, error) {
	var resource SecretRotationMssqlCredentials
	err := ctx.ReadResource("infisical:index/secretRotationMssqlCredentials:SecretRotationMssqlCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationMssqlCredentials resources.
type secretRotationMssqlCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationMssqlCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationMssqlCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationMssqlCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationMssqlCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationMssqlCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMssqlCredentialsParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMssqlCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMssqlCredentialsSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMssqlCredentialsTemporaryParametersPtrInput
}

func (SecretRotationMssqlCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationMssqlCredentialsState)(nil)).Elem()
}

type secretRotationMssqlCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMssqlCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationMssqlCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMssqlCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationMssqlCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationMssqlCredentials resource.
type SecretRotationMssqlCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMssqlCredentialsParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMssqlCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMssqlCredentialsSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMssqlCredentialsTemporaryParametersPtrInput
}

func (SecretRotationMssqlCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationMssqlCredentialsArgs)(nil)).Elem()
}

type SecretRotationMssqlCredentialsInput interface {
	pulumi.Input

	ToSecretRotationMssqlCredentialsOutput() SecretRotationMssqlCredentialsOutput
	ToSecretRotationMssqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsOutput
}

func (*SecretRotationMssqlCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationMssqlCredentials)(nil)).Elem()
}

func (i *SecretRotationMssqlCredentials) ToSecretRotationMssqlCredentialsOutput() SecretRotationMssqlCredentialsOutput {
	return i.ToSecretRotationMssqlCredentialsOutputWithContext(context.Background())
}

func (i *SecretRotationMssqlCredentials) ToSecretRotationMssqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMssqlCredentialsOutput)
}

// SecretRotationMssqlCredentialsArrayInput is an input type that accepts SecretRotationMssqlCredentialsArray and SecretRotationMssqlCredentialsArrayOutput values.
// You can construct a concrete instance of `SecretRotationMssqlCredentialsArrayInput` via:
//
//	SecretRotationMssqlCredentialsArray{ SecretRotationMssqlCredentialsArgs{...} }
type SecretRotationMssqlCredentialsArrayInput interface {
	pulumi.Input

	ToSecretRotationMssqlCredentialsArrayOutput() SecretRotationMssqlCredentialsArrayOutput
	ToSecretRotationMssqlCredentialsArrayOutputWithContext(context.Context) SecretRotationMssqlCredentialsArrayOutput
}

type SecretRotationMssqlCredentialsArray []SecretRotationMssqlCredentialsInput

func (SecretRotationMssqlCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationMssqlCredentials)(nil)).Elem()
}

func (i SecretRotationMssqlCredentialsArray) ToSecretRotationMssqlCredentialsArrayOutput() SecretRotationMssqlCredentialsArrayOutput {
	return i.ToSecretRotationMssqlCredentialsArrayOutputWithContext(context.Background())
}

func (i SecretRotationMssqlCredentialsArray) ToSecretRotationMssqlCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMssqlCredentialsArrayOutput)
}

// SecretRotationMssqlCredentialsMapInput is an input type that accepts SecretRotationMssqlCredentialsMap and SecretRotationMssqlCredentialsMapOutput values.
// You can construct a concrete instance of `SecretRotationMssqlCredentialsMapInput` via:
//
//	SecretRotationMssqlCredentialsMap{ "key": SecretRotationMssqlCredentialsArgs{...} }
type SecretRotationMssqlCredentialsMapInput interface {
	pulumi.Input

	ToSecretRotationMssqlCredentialsMapOutput() SecretRotationMssqlCredentialsMapOutput
	ToSecretRotationMssqlCredentialsMapOutputWithContext(context.Context) SecretRotationMssqlCredentialsMapOutput
}

type SecretRotationMssqlCredentialsMap map[string]SecretRotationMssqlCredentialsInput

func (SecretRotationMssqlCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationMssqlCredentials)(nil)).Elem()
}

func (i SecretRotationMssqlCredentialsMap) ToSecretRotationMssqlCredentialsMapOutput() SecretRotationMssqlCredentialsMapOutput {
	return i.ToSecretRotationMssqlCredentialsMapOutputWithContext(context.Background())
}

func (i SecretRotationMssqlCredentialsMap) ToSecretRotationMssqlCredentialsMapOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMssqlCredentialsMapOutput)
}

type SecretRotationMssqlCredentialsOutput struct{ *pulumi.OutputState }

func (SecretRotationMssqlCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationMssqlCredentials)(nil)).Elem()
}

func (o SecretRotationMssqlCredentialsOutput) ToSecretRotationMssqlCredentialsOutput() SecretRotationMssqlCredentialsOutput {
	return o
}

func (o SecretRotationMssqlCredentialsOutput) ToSecretRotationMssqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationMssqlCredentialsOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationMssqlCredentialsOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationMssqlCredentialsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationMssqlCredentialsOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationMssqlCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationMssqlCredentialsOutput) Parameters() SecretRotationMssqlCredentialsParametersOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) SecretRotationMssqlCredentialsParametersOutput {
		return v.Parameters
	}).(SecretRotationMssqlCredentialsParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationMssqlCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationMssqlCredentialsOutput) RotateAtUtc() SecretRotationMssqlCredentialsRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) SecretRotationMssqlCredentialsRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationMssqlCredentialsRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationMssqlCredentialsOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationMssqlCredentialsOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationMssqlCredentialsOutput) SecretsMapping() SecretRotationMssqlCredentialsSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) SecretRotationMssqlCredentialsSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationMssqlCredentialsSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationMssqlCredentialsOutput) TemporaryParameters() SecretRotationMssqlCredentialsTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationMssqlCredentials) SecretRotationMssqlCredentialsTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationMssqlCredentialsTemporaryParametersPtrOutput)
}

type SecretRotationMssqlCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationMssqlCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationMssqlCredentials)(nil)).Elem()
}

func (o SecretRotationMssqlCredentialsArrayOutput) ToSecretRotationMssqlCredentialsArrayOutput() SecretRotationMssqlCredentialsArrayOutput {
	return o
}

func (o SecretRotationMssqlCredentialsArrayOutput) ToSecretRotationMssqlCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsArrayOutput {
	return o
}

func (o SecretRotationMssqlCredentialsArrayOutput) Index(i pulumi.IntInput) SecretRotationMssqlCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationMssqlCredentials {
		return vs[0].([]*SecretRotationMssqlCredentials)[vs[1].(int)]
	}).(SecretRotationMssqlCredentialsOutput)
}

type SecretRotationMssqlCredentialsMapOutput struct{ *pulumi.OutputState }

func (SecretRotationMssqlCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationMssqlCredentials)(nil)).Elem()
}

func (o SecretRotationMssqlCredentialsMapOutput) ToSecretRotationMssqlCredentialsMapOutput() SecretRotationMssqlCredentialsMapOutput {
	return o
}

func (o SecretRotationMssqlCredentialsMapOutput) ToSecretRotationMssqlCredentialsMapOutputWithContext(ctx context.Context) SecretRotationMssqlCredentialsMapOutput {
	return o
}

func (o SecretRotationMssqlCredentialsMapOutput) MapIndex(k pulumi.StringInput) SecretRotationMssqlCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationMssqlCredentials {
		return vs[0].(map[string]*SecretRotationMssqlCredentials)[vs[1].(string)]
	}).(SecretRotationMssqlCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMssqlCredentialsInput)(nil)).Elem(), &SecretRotationMssqlCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMssqlCredentialsArrayInput)(nil)).Elem(), SecretRotationMssqlCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMssqlCredentialsMapInput)(nil)).Elem(), SecretRotationMssqlCredentialsMap{})
	pulumi.RegisterOutputType(SecretRotationMssqlCredentialsOutput{})
	pulumi.RegisterOutputType(SecretRotationMssqlCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationMssqlCredentialsMapOutput{})
}
