// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSync1password struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the 1password Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the 1Password sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSync1passwordDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the 1Password sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSync1passwordSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSync1password registers a new resource with the given unique name, arguments, and options.
func NewSecretSync1password(ctx *pulumi.Context,
	name string, args *SecretSync1passwordArgs, opts ...pulumi.ResourceOption) (*SecretSync1password, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSync1password
	err := ctx.RegisterResource("infisical:index/secretSync1password:SecretSync1password", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSync1password gets an existing SecretSync1password resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSync1password(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSync1passwordState, opts ...pulumi.ResourceOption) (*SecretSync1password, error) {
	var resource SecretSync1password
	err := ctx.ReadResource("infisical:index/secretSync1password:SecretSync1password", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSync1password resources.
type secretSync1passwordState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the 1password Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the 1Password sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSync1passwordDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the 1Password sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSync1passwordSyncOptions `pulumi:"syncOptions"`
}

type SecretSync1passwordState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the 1password Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the 1Password sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSync1passwordDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the 1Password sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSync1passwordSyncOptionsPtrInput
}

func (SecretSync1passwordState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSync1passwordState)(nil)).Elem()
}

type secretSync1passwordArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the 1password Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the 1Password sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSync1passwordDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the 1Password sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSync1passwordSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSync1password resource.
type SecretSync1passwordArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the 1password Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the 1Password sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSync1passwordDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the 1Password sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSync1passwordSyncOptionsInput
}

func (SecretSync1passwordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSync1passwordArgs)(nil)).Elem()
}

type SecretSync1passwordInput interface {
	pulumi.Input

	ToSecretSync1passwordOutput() SecretSync1passwordOutput
	ToSecretSync1passwordOutputWithContext(ctx context.Context) SecretSync1passwordOutput
}

func (*SecretSync1password) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSync1password)(nil)).Elem()
}

func (i *SecretSync1password) ToSecretSync1passwordOutput() SecretSync1passwordOutput {
	return i.ToSecretSync1passwordOutputWithContext(context.Background())
}

func (i *SecretSync1password) ToSecretSync1passwordOutputWithContext(ctx context.Context) SecretSync1passwordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSync1passwordOutput)
}

// SecretSync1passwordArrayInput is an input type that accepts SecretSync1passwordArray and SecretSync1passwordArrayOutput values.
// You can construct a concrete instance of `SecretSync1passwordArrayInput` via:
//
//	SecretSync1passwordArray{ SecretSync1passwordArgs{...} }
type SecretSync1passwordArrayInput interface {
	pulumi.Input

	ToSecretSync1passwordArrayOutput() SecretSync1passwordArrayOutput
	ToSecretSync1passwordArrayOutputWithContext(context.Context) SecretSync1passwordArrayOutput
}

type SecretSync1passwordArray []SecretSync1passwordInput

func (SecretSync1passwordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSync1password)(nil)).Elem()
}

func (i SecretSync1passwordArray) ToSecretSync1passwordArrayOutput() SecretSync1passwordArrayOutput {
	return i.ToSecretSync1passwordArrayOutputWithContext(context.Background())
}

func (i SecretSync1passwordArray) ToSecretSync1passwordArrayOutputWithContext(ctx context.Context) SecretSync1passwordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSync1passwordArrayOutput)
}

// SecretSync1passwordMapInput is an input type that accepts SecretSync1passwordMap and SecretSync1passwordMapOutput values.
// You can construct a concrete instance of `SecretSync1passwordMapInput` via:
//
//	SecretSync1passwordMap{ "key": SecretSync1passwordArgs{...} }
type SecretSync1passwordMapInput interface {
	pulumi.Input

	ToSecretSync1passwordMapOutput() SecretSync1passwordMapOutput
	ToSecretSync1passwordMapOutputWithContext(context.Context) SecretSync1passwordMapOutput
}

type SecretSync1passwordMap map[string]SecretSync1passwordInput

func (SecretSync1passwordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSync1password)(nil)).Elem()
}

func (i SecretSync1passwordMap) ToSecretSync1passwordMapOutput() SecretSync1passwordMapOutput {
	return i.ToSecretSync1passwordMapOutputWithContext(context.Background())
}

func (i SecretSync1passwordMap) ToSecretSync1passwordMapOutputWithContext(ctx context.Context) SecretSync1passwordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSync1passwordMapOutput)
}

type SecretSync1passwordOutput struct{ *pulumi.OutputState }

func (SecretSync1passwordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSync1password)(nil)).Elem()
}

func (o SecretSync1passwordOutput) ToSecretSync1passwordOutput() SecretSync1passwordOutput {
	return o
}

func (o SecretSync1passwordOutput) ToSecretSync1passwordOutputWithContext(ctx context.Context) SecretSync1passwordOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSync1passwordOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the 1password Connection to use for syncing.
func (o SecretSync1passwordOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the 1Password sync.
func (o SecretSync1passwordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSync1passwordOutput) DestinationConfig() SecretSync1passwordDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSync1password) SecretSync1passwordDestinationConfigOutput { return v.DestinationConfig }).(SecretSync1passwordDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSync1passwordOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the 1Password sync to create. Must be slug-friendly.
func (o SecretSync1passwordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSync1passwordOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSync1passwordOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSync1password) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSync1passwordOutput) SyncOptions() SecretSync1passwordSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSync1password) SecretSync1passwordSyncOptionsOutput { return v.SyncOptions }).(SecretSync1passwordSyncOptionsOutput)
}

type SecretSync1passwordArrayOutput struct{ *pulumi.OutputState }

func (SecretSync1passwordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSync1password)(nil)).Elem()
}

func (o SecretSync1passwordArrayOutput) ToSecretSync1passwordArrayOutput() SecretSync1passwordArrayOutput {
	return o
}

func (o SecretSync1passwordArrayOutput) ToSecretSync1passwordArrayOutputWithContext(ctx context.Context) SecretSync1passwordArrayOutput {
	return o
}

func (o SecretSync1passwordArrayOutput) Index(i pulumi.IntInput) SecretSync1passwordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSync1password {
		return vs[0].([]*SecretSync1password)[vs[1].(int)]
	}).(SecretSync1passwordOutput)
}

type SecretSync1passwordMapOutput struct{ *pulumi.OutputState }

func (SecretSync1passwordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSync1password)(nil)).Elem()
}

func (o SecretSync1passwordMapOutput) ToSecretSync1passwordMapOutput() SecretSync1passwordMapOutput {
	return o
}

func (o SecretSync1passwordMapOutput) ToSecretSync1passwordMapOutputWithContext(ctx context.Context) SecretSync1passwordMapOutput {
	return o
}

func (o SecretSync1passwordMapOutput) MapIndex(k pulumi.StringInput) SecretSync1passwordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSync1password {
		return vs[0].(map[string]*SecretSync1password)[vs[1].(string)]
	}).(SecretSync1passwordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSync1passwordInput)(nil)).Elem(), &SecretSync1password{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSync1passwordArrayInput)(nil)).Elem(), SecretSync1passwordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSync1passwordMapInput)(nil)).Elem(), SecretSync1passwordMap{})
	pulumi.RegisterOutputType(SecretSync1passwordOutput{})
	pulumi.RegisterOutputType(SecretSync1passwordArrayOutput{})
	pulumi.RegisterOutputType(SecretSync1passwordMapOutput{})
}
