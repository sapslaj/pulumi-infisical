// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type DynamicSecretSqlDatabase struct {
	pulumi.CustomResourceState

	// The configuration of the dynamic secret
	Configuration DynamicSecretSqlDatabaseConfigurationOutput `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringOutput `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringOutput `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrOutput `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretSqlDatabaseMetadataArrayOutput `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path pulumi.StringOutput `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringOutput `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewDynamicSecretSqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewDynamicSecretSqlDatabase(ctx *pulumi.Context,
	name string, args *DynamicSecretSqlDatabaseArgs, opts ...pulumi.ResourceOption) (*DynamicSecretSqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DefaultTtl == nil {
		return nil, errors.New("invalid value for required argument 'DefaultTtl'")
	}
	if args.EnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSlug'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ProjectSlug == nil {
		return nil, errors.New("invalid value for required argument 'ProjectSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicSecretSqlDatabase
	err := ctx.RegisterResource("infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicSecretSqlDatabase gets an existing DynamicSecretSqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicSecretSqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicSecretSqlDatabaseState, opts ...pulumi.ResourceOption) (*DynamicSecretSqlDatabase, error) {
	var resource DynamicSecretSqlDatabase
	err := ctx.ReadResource("infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicSecretSqlDatabase resources.
type dynamicSecretSqlDatabaseState struct {
	// The configuration of the dynamic secret
	Configuration *DynamicSecretSqlDatabaseConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl *string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretSqlDatabaseMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path *string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug *string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type DynamicSecretSqlDatabaseState struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretSqlDatabaseConfigurationPtrInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringPtrInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringPtrInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretSqlDatabaseMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringPtrInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringPtrInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretSqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretSqlDatabaseState)(nil)).Elem()
}

type dynamicSecretSqlDatabaseArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretSqlDatabaseConfiguration `pulumi:"configuration"`
	// The default TTL that will be applied for all the leases.
	DefaultTtl string `pulumi:"defaultTtl"`
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug string `pulumi:"environmentSlug"`
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl *string `pulumi:"maxTtl"`
	// The metadata associated with this dynamic secret
	Metadatas []DynamicSecretSqlDatabaseMetadata `pulumi:"metadatas"`
	// The name of the dynamic secret.
	Name *string `pulumi:"name"`
	// The path to create the dynamic secret in.
	Path string `pulumi:"path"`
	// The slug of the project to create dynamic secret in.
	ProjectSlug string `pulumi:"projectSlug"`
	// The username template of the dynamic secret
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a DynamicSecretSqlDatabase resource.
type DynamicSecretSqlDatabaseArgs struct {
	// The configuration of the dynamic secret
	Configuration DynamicSecretSqlDatabaseConfigurationInput
	// The default TTL that will be applied for all the leases.
	DefaultTtl pulumi.StringInput
	// The slug of the environment to create the dynamic secret in.
	EnvironmentSlug pulumi.StringInput
	// The maximum limit a TTL can be leases or renewed.
	MaxTtl pulumi.StringPtrInput
	// The metadata associated with this dynamic secret
	Metadatas DynamicSecretSqlDatabaseMetadataArrayInput
	// The name of the dynamic secret.
	Name pulumi.StringPtrInput
	// The path to create the dynamic secret in.
	Path pulumi.StringInput
	// The slug of the project to create dynamic secret in.
	ProjectSlug pulumi.StringInput
	// The username template of the dynamic secret
	UsernameTemplate pulumi.StringPtrInput
}

func (DynamicSecretSqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretSqlDatabaseArgs)(nil)).Elem()
}

type DynamicSecretSqlDatabaseInput interface {
	pulumi.Input

	ToDynamicSecretSqlDatabaseOutput() DynamicSecretSqlDatabaseOutput
	ToDynamicSecretSqlDatabaseOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseOutput
}

func (*DynamicSecretSqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretSqlDatabase)(nil)).Elem()
}

func (i *DynamicSecretSqlDatabase) ToDynamicSecretSqlDatabaseOutput() DynamicSecretSqlDatabaseOutput {
	return i.ToDynamicSecretSqlDatabaseOutputWithContext(context.Background())
}

func (i *DynamicSecretSqlDatabase) ToDynamicSecretSqlDatabaseOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretSqlDatabaseOutput)
}

// DynamicSecretSqlDatabaseArrayInput is an input type that accepts DynamicSecretSqlDatabaseArray and DynamicSecretSqlDatabaseArrayOutput values.
// You can construct a concrete instance of `DynamicSecretSqlDatabaseArrayInput` via:
//
//	DynamicSecretSqlDatabaseArray{ DynamicSecretSqlDatabaseArgs{...} }
type DynamicSecretSqlDatabaseArrayInput interface {
	pulumi.Input

	ToDynamicSecretSqlDatabaseArrayOutput() DynamicSecretSqlDatabaseArrayOutput
	ToDynamicSecretSqlDatabaseArrayOutputWithContext(context.Context) DynamicSecretSqlDatabaseArrayOutput
}

type DynamicSecretSqlDatabaseArray []DynamicSecretSqlDatabaseInput

func (DynamicSecretSqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretSqlDatabase)(nil)).Elem()
}

func (i DynamicSecretSqlDatabaseArray) ToDynamicSecretSqlDatabaseArrayOutput() DynamicSecretSqlDatabaseArrayOutput {
	return i.ToDynamicSecretSqlDatabaseArrayOutputWithContext(context.Background())
}

func (i DynamicSecretSqlDatabaseArray) ToDynamicSecretSqlDatabaseArrayOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretSqlDatabaseArrayOutput)
}

// DynamicSecretSqlDatabaseMapInput is an input type that accepts DynamicSecretSqlDatabaseMap and DynamicSecretSqlDatabaseMapOutput values.
// You can construct a concrete instance of `DynamicSecretSqlDatabaseMapInput` via:
//
//	DynamicSecretSqlDatabaseMap{ "key": DynamicSecretSqlDatabaseArgs{...} }
type DynamicSecretSqlDatabaseMapInput interface {
	pulumi.Input

	ToDynamicSecretSqlDatabaseMapOutput() DynamicSecretSqlDatabaseMapOutput
	ToDynamicSecretSqlDatabaseMapOutputWithContext(context.Context) DynamicSecretSqlDatabaseMapOutput
}

type DynamicSecretSqlDatabaseMap map[string]DynamicSecretSqlDatabaseInput

func (DynamicSecretSqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretSqlDatabase)(nil)).Elem()
}

func (i DynamicSecretSqlDatabaseMap) ToDynamicSecretSqlDatabaseMapOutput() DynamicSecretSqlDatabaseMapOutput {
	return i.ToDynamicSecretSqlDatabaseMapOutputWithContext(context.Background())
}

func (i DynamicSecretSqlDatabaseMap) ToDynamicSecretSqlDatabaseMapOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretSqlDatabaseMapOutput)
}

type DynamicSecretSqlDatabaseOutput struct{ *pulumi.OutputState }

func (DynamicSecretSqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretSqlDatabase)(nil)).Elem()
}

func (o DynamicSecretSqlDatabaseOutput) ToDynamicSecretSqlDatabaseOutput() DynamicSecretSqlDatabaseOutput {
	return o
}

func (o DynamicSecretSqlDatabaseOutput) ToDynamicSecretSqlDatabaseOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseOutput {
	return o
}

// The configuration of the dynamic secret
func (o DynamicSecretSqlDatabaseOutput) Configuration() DynamicSecretSqlDatabaseConfigurationOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) DynamicSecretSqlDatabaseConfigurationOutput { return v.Configuration }).(DynamicSecretSqlDatabaseConfigurationOutput)
}

// The default TTL that will be applied for all the leases.
func (o DynamicSecretSqlDatabaseOutput) DefaultTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringOutput { return v.DefaultTtl }).(pulumi.StringOutput)
}

// The slug of the environment to create the dynamic secret in.
func (o DynamicSecretSqlDatabaseOutput) EnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringOutput { return v.EnvironmentSlug }).(pulumi.StringOutput)
}

// The maximum limit a TTL can be leases or renewed.
func (o DynamicSecretSqlDatabaseOutput) MaxTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringPtrOutput { return v.MaxTtl }).(pulumi.StringPtrOutput)
}

// The metadata associated with this dynamic secret
func (o DynamicSecretSqlDatabaseOutput) Metadatas() DynamicSecretSqlDatabaseMetadataArrayOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) DynamicSecretSqlDatabaseMetadataArrayOutput { return v.Metadatas }).(DynamicSecretSqlDatabaseMetadataArrayOutput)
}

// The name of the dynamic secret.
func (o DynamicSecretSqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to create the dynamic secret in.
func (o DynamicSecretSqlDatabaseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The slug of the project to create dynamic secret in.
func (o DynamicSecretSqlDatabaseOutput) ProjectSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringOutput { return v.ProjectSlug }).(pulumi.StringOutput)
}

// The username template of the dynamic secret
func (o DynamicSecretSqlDatabaseOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretSqlDatabase) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type DynamicSecretSqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DynamicSecretSqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicSecretSqlDatabase)(nil)).Elem()
}

func (o DynamicSecretSqlDatabaseArrayOutput) ToDynamicSecretSqlDatabaseArrayOutput() DynamicSecretSqlDatabaseArrayOutput {
	return o
}

func (o DynamicSecretSqlDatabaseArrayOutput) ToDynamicSecretSqlDatabaseArrayOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseArrayOutput {
	return o
}

func (o DynamicSecretSqlDatabaseArrayOutput) Index(i pulumi.IntInput) DynamicSecretSqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicSecretSqlDatabase {
		return vs[0].([]*DynamicSecretSqlDatabase)[vs[1].(int)]
	}).(DynamicSecretSqlDatabaseOutput)
}

type DynamicSecretSqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (DynamicSecretSqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicSecretSqlDatabase)(nil)).Elem()
}

func (o DynamicSecretSqlDatabaseMapOutput) ToDynamicSecretSqlDatabaseMapOutput() DynamicSecretSqlDatabaseMapOutput {
	return o
}

func (o DynamicSecretSqlDatabaseMapOutput) ToDynamicSecretSqlDatabaseMapOutputWithContext(ctx context.Context) DynamicSecretSqlDatabaseMapOutput {
	return o
}

func (o DynamicSecretSqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) DynamicSecretSqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicSecretSqlDatabase {
		return vs[0].(map[string]*DynamicSecretSqlDatabase)[vs[1].(string)]
	}).(DynamicSecretSqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretSqlDatabaseInput)(nil)).Elem(), &DynamicSecretSqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretSqlDatabaseArrayInput)(nil)).Elem(), DynamicSecretSqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretSqlDatabaseMapInput)(nil)).Elem(), DynamicSecretSqlDatabaseMap{})
	pulumi.RegisterOutputType(DynamicSecretSqlDatabaseOutput{})
	pulumi.RegisterOutputType(DynamicSecretSqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DynamicSecretSqlDatabaseMapOutput{})
}
