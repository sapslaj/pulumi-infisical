// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncCloudflarePages struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Cloudflare Pages sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflarePagesDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflarePagesSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncCloudflarePages registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncCloudflarePages(ctx *pulumi.Context,
	name string, args *SecretSyncCloudflarePagesArgs, opts ...pulumi.ResourceOption) (*SecretSyncCloudflarePages, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncCloudflarePages
	err := ctx.RegisterResource("infisical:index/secretSyncCloudflarePages:SecretSyncCloudflarePages", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncCloudflarePages gets an existing SecretSyncCloudflarePages resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncCloudflarePages(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncCloudflarePagesState, opts ...pulumi.ResourceOption) (*SecretSyncCloudflarePages, error) {
	var resource SecretSyncCloudflarePages
	err := ctx.ReadResource("infisical:index/secretSyncCloudflarePages:SecretSyncCloudflarePages", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncCloudflarePages resources.
type secretSyncCloudflarePagesState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Cloudflare Pages sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncCloudflarePagesDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncCloudflarePagesSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncCloudflarePagesState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Cloudflare Pages sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflarePagesDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflarePagesSyncOptionsPtrInput
}

func (SecretSyncCloudflarePagesState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncCloudflarePagesState)(nil)).Elem()
}

type secretSyncCloudflarePagesArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Cloudflare Pages sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflarePagesDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflarePagesSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncCloudflarePages resource.
type SecretSyncCloudflarePagesArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the cloudflare Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Cloudflare Pages sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncCloudflarePagesDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncCloudflarePagesSyncOptionsInput
}

func (SecretSyncCloudflarePagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncCloudflarePagesArgs)(nil)).Elem()
}

type SecretSyncCloudflarePagesInput interface {
	pulumi.Input

	ToSecretSyncCloudflarePagesOutput() SecretSyncCloudflarePagesOutput
	ToSecretSyncCloudflarePagesOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesOutput
}

func (*SecretSyncCloudflarePages) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncCloudflarePages)(nil)).Elem()
}

func (i *SecretSyncCloudflarePages) ToSecretSyncCloudflarePagesOutput() SecretSyncCloudflarePagesOutput {
	return i.ToSecretSyncCloudflarePagesOutputWithContext(context.Background())
}

func (i *SecretSyncCloudflarePages) ToSecretSyncCloudflarePagesOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflarePagesOutput)
}

// SecretSyncCloudflarePagesArrayInput is an input type that accepts SecretSyncCloudflarePagesArray and SecretSyncCloudflarePagesArrayOutput values.
// You can construct a concrete instance of `SecretSyncCloudflarePagesArrayInput` via:
//
//	SecretSyncCloudflarePagesArray{ SecretSyncCloudflarePagesArgs{...} }
type SecretSyncCloudflarePagesArrayInput interface {
	pulumi.Input

	ToSecretSyncCloudflarePagesArrayOutput() SecretSyncCloudflarePagesArrayOutput
	ToSecretSyncCloudflarePagesArrayOutputWithContext(context.Context) SecretSyncCloudflarePagesArrayOutput
}

type SecretSyncCloudflarePagesArray []SecretSyncCloudflarePagesInput

func (SecretSyncCloudflarePagesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncCloudflarePages)(nil)).Elem()
}

func (i SecretSyncCloudflarePagesArray) ToSecretSyncCloudflarePagesArrayOutput() SecretSyncCloudflarePagesArrayOutput {
	return i.ToSecretSyncCloudflarePagesArrayOutputWithContext(context.Background())
}

func (i SecretSyncCloudflarePagesArray) ToSecretSyncCloudflarePagesArrayOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflarePagesArrayOutput)
}

// SecretSyncCloudflarePagesMapInput is an input type that accepts SecretSyncCloudflarePagesMap and SecretSyncCloudflarePagesMapOutput values.
// You can construct a concrete instance of `SecretSyncCloudflarePagesMapInput` via:
//
//	SecretSyncCloudflarePagesMap{ "key": SecretSyncCloudflarePagesArgs{...} }
type SecretSyncCloudflarePagesMapInput interface {
	pulumi.Input

	ToSecretSyncCloudflarePagesMapOutput() SecretSyncCloudflarePagesMapOutput
	ToSecretSyncCloudflarePagesMapOutputWithContext(context.Context) SecretSyncCloudflarePagesMapOutput
}

type SecretSyncCloudflarePagesMap map[string]SecretSyncCloudflarePagesInput

func (SecretSyncCloudflarePagesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncCloudflarePages)(nil)).Elem()
}

func (i SecretSyncCloudflarePagesMap) ToSecretSyncCloudflarePagesMapOutput() SecretSyncCloudflarePagesMapOutput {
	return i.ToSecretSyncCloudflarePagesMapOutputWithContext(context.Background())
}

func (i SecretSyncCloudflarePagesMap) ToSecretSyncCloudflarePagesMapOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncCloudflarePagesMapOutput)
}

type SecretSyncCloudflarePagesOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflarePagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncCloudflarePages)(nil)).Elem()
}

func (o SecretSyncCloudflarePagesOutput) ToSecretSyncCloudflarePagesOutput() SecretSyncCloudflarePagesOutput {
	return o
}

func (o SecretSyncCloudflarePagesOutput) ToSecretSyncCloudflarePagesOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncCloudflarePagesOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the cloudflare Connection to use for syncing.
func (o SecretSyncCloudflarePagesOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Cloudflare Pages sync.
func (o SecretSyncCloudflarePagesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncCloudflarePagesOutput) DestinationConfig() SecretSyncCloudflarePagesDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) SecretSyncCloudflarePagesDestinationConfigOutput {
		return v.DestinationConfig
	}).(SecretSyncCloudflarePagesDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncCloudflarePagesOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Cloudflare Pages sync to create. Must be slug-friendly.
func (o SecretSyncCloudflarePagesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncCloudflarePagesOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncCloudflarePagesOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncCloudflarePagesOutput) SyncOptions() SecretSyncCloudflarePagesSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncCloudflarePages) SecretSyncCloudflarePagesSyncOptionsOutput { return v.SyncOptions }).(SecretSyncCloudflarePagesSyncOptionsOutput)
}

type SecretSyncCloudflarePagesArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflarePagesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncCloudflarePages)(nil)).Elem()
}

func (o SecretSyncCloudflarePagesArrayOutput) ToSecretSyncCloudflarePagesArrayOutput() SecretSyncCloudflarePagesArrayOutput {
	return o
}

func (o SecretSyncCloudflarePagesArrayOutput) ToSecretSyncCloudflarePagesArrayOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesArrayOutput {
	return o
}

func (o SecretSyncCloudflarePagesArrayOutput) Index(i pulumi.IntInput) SecretSyncCloudflarePagesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncCloudflarePages {
		return vs[0].([]*SecretSyncCloudflarePages)[vs[1].(int)]
	}).(SecretSyncCloudflarePagesOutput)
}

type SecretSyncCloudflarePagesMapOutput struct{ *pulumi.OutputState }

func (SecretSyncCloudflarePagesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncCloudflarePages)(nil)).Elem()
}

func (o SecretSyncCloudflarePagesMapOutput) ToSecretSyncCloudflarePagesMapOutput() SecretSyncCloudflarePagesMapOutput {
	return o
}

func (o SecretSyncCloudflarePagesMapOutput) ToSecretSyncCloudflarePagesMapOutputWithContext(ctx context.Context) SecretSyncCloudflarePagesMapOutput {
	return o
}

func (o SecretSyncCloudflarePagesMapOutput) MapIndex(k pulumi.StringInput) SecretSyncCloudflarePagesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncCloudflarePages {
		return vs[0].(map[string]*SecretSyncCloudflarePages)[vs[1].(string)]
	}).(SecretSyncCloudflarePagesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflarePagesInput)(nil)).Elem(), &SecretSyncCloudflarePages{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflarePagesArrayInput)(nil)).Elem(), SecretSyncCloudflarePagesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncCloudflarePagesMapInput)(nil)).Elem(), SecretSyncCloudflarePagesMap{})
	pulumi.RegisterOutputType(SecretSyncCloudflarePagesOutput{})
	pulumi.RegisterOutputType(SecretSyncCloudflarePagesArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncCloudflarePagesMapOutput{})
}
