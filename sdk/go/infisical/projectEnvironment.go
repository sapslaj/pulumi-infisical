// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectEnvironment struct {
	pulumi.CustomResourceState

	// The name of the environment
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the environment
	Position pulumi.IntOutput `pulumi:"position"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The slug of the environment
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewProjectEnvironment registers a new resource with the given unique name, arguments, and options.
func NewProjectEnvironment(ctx *pulumi.Context,
	name string, args *ProjectEnvironmentArgs, opts ...pulumi.ResourceOption) (*ProjectEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectEnvironment
	err := ctx.RegisterResource("infisical:index/projectEnvironment:ProjectEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectEnvironment gets an existing ProjectEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectEnvironmentState, opts ...pulumi.ResourceOption) (*ProjectEnvironment, error) {
	var resource ProjectEnvironment
	err := ctx.ReadResource("infisical:index/projectEnvironment:ProjectEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectEnvironment resources.
type projectEnvironmentState struct {
	// The name of the environment
	Name *string `pulumi:"name"`
	// The position of the environment
	Position *int `pulumi:"position"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId *string `pulumi:"projectId"`
	// The slug of the environment
	Slug *string `pulumi:"slug"`
}

type ProjectEnvironmentState struct {
	// The name of the environment
	Name pulumi.StringPtrInput
	// The position of the environment
	Position pulumi.IntPtrInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringPtrInput
	// The slug of the environment
	Slug pulumi.StringPtrInput
}

func (ProjectEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentState)(nil)).Elem()
}

type projectEnvironmentArgs struct {
	// The name of the environment
	Name *string `pulumi:"name"`
	// The position of the environment
	Position *int `pulumi:"position"`
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId string `pulumi:"projectId"`
	// The slug of the environment
	Slug string `pulumi:"slug"`
}

// The set of arguments for constructing a ProjectEnvironment resource.
type ProjectEnvironmentArgs struct {
	// The name of the environment
	Name pulumi.StringPtrInput
	// The position of the environment
	Position pulumi.IntPtrInput
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectId pulumi.StringInput
	// The slug of the environment
	Slug pulumi.StringInput
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentArgs)(nil)).Elem()
}

type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput
}

func (*ProjectEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (i *ProjectEnvironment) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i *ProjectEnvironment) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

// ProjectEnvironmentArrayInput is an input type that accepts ProjectEnvironmentArray and ProjectEnvironmentArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentArrayInput` via:
//
//	ProjectEnvironmentArray{ ProjectEnvironmentArgs{...} }
type ProjectEnvironmentArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput
	ToProjectEnvironmentArrayOutputWithContext(context.Context) ProjectEnvironmentArrayOutput
}

type ProjectEnvironmentArray []ProjectEnvironmentInput

func (ProjectEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return i.ToProjectEnvironmentArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentArrayOutput)
}

// ProjectEnvironmentMapInput is an input type that accepts ProjectEnvironmentMap and ProjectEnvironmentMapOutput values.
// You can construct a concrete instance of `ProjectEnvironmentMapInput` via:
//
//	ProjectEnvironmentMap{ "key": ProjectEnvironmentArgs{...} }
type ProjectEnvironmentMapInput interface {
	pulumi.Input

	ToProjectEnvironmentMapOutput() ProjectEnvironmentMapOutput
	ToProjectEnvironmentMapOutputWithContext(context.Context) ProjectEnvironmentMapOutput
}

type ProjectEnvironmentMap map[string]ProjectEnvironmentInput

func (ProjectEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentMap) ToProjectEnvironmentMapOutput() ProjectEnvironmentMapOutput {
	return i.ToProjectEnvironmentMapOutputWithContext(context.Background())
}

func (i ProjectEnvironmentMap) ToProjectEnvironmentMapOutputWithContext(ctx context.Context) ProjectEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentMapOutput)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

// The name of the environment
func (o ProjectEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the environment
func (o ProjectEnvironmentOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectEnvironment) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
func (o ProjectEnvironmentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The slug of the environment
func (o ProjectEnvironmentOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironment) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type ProjectEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectEnvironment {
		return vs[0].([]*ProjectEnvironment)[vs[1].(int)]
	}).(ProjectEnvironmentOutput)
}

type ProjectEnvironmentMapOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentMapOutput) ToProjectEnvironmentMapOutput() ProjectEnvironmentMapOutput {
	return o
}

func (o ProjectEnvironmentMapOutput) ToProjectEnvironmentMapOutputWithContext(ctx context.Context) ProjectEnvironmentMapOutput {
	return o
}

func (o ProjectEnvironmentMapOutput) MapIndex(k pulumi.StringInput) ProjectEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectEnvironment {
		return vs[0].(map[string]*ProjectEnvironment)[vs[1].(string)]
	}).(ProjectEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentInput)(nil)).Elem(), &ProjectEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentArrayInput)(nil)).Elem(), ProjectEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentMapInput)(nil)).Elem(), ProjectEnvironmentMap{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentMapOutput{})
}
