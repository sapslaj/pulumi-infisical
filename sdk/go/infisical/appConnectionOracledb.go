// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionOracledb struct {
	pulumi.CustomResourceState

	// The credentials for the Oracle Database App Connection
	Credentials AppConnectionOracledbCredentialsOutput `pulumi:"credentials"`
	// The hash of the Oracle Database App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the Oracle Database App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with Oracle Database. Possible values are: username-and-password
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the Oracle Database App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionOracledb registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionOracledb(ctx *pulumi.Context,
	name string, args *AppConnectionOracledbArgs, opts ...pulumi.ResourceOption) (*AppConnectionOracledb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionOracledb
	err := ctx.RegisterResource("infisical:index/appConnectionOracledb:AppConnectionOracledb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionOracledb gets an existing AppConnectionOracledb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionOracledb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionOracledbState, opts ...pulumi.ResourceOption) (*AppConnectionOracledb, error) {
	var resource AppConnectionOracledb
	err := ctx.ReadResource("infisical:index/appConnectionOracledb:AppConnectionOracledb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionOracledb resources.
type appConnectionOracledbState struct {
	// The credentials for the Oracle Database App Connection
	Credentials *AppConnectionOracledbCredentials `pulumi:"credentials"`
	// The hash of the Oracle Database App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the Oracle Database App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Oracle Database. Possible values are: username-and-password
	Method *string `pulumi:"method"`
	// The name of the Oracle Database App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionOracledbState struct {
	// The credentials for the Oracle Database App Connection
	Credentials AppConnectionOracledbCredentialsPtrInput
	// The hash of the Oracle Database App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the Oracle Database App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Oracle Database. Possible values are: username-and-password
	Method pulumi.StringPtrInput
	// The name of the Oracle Database App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionOracledbState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionOracledbState)(nil)).Elem()
}

type appConnectionOracledbArgs struct {
	// The credentials for the Oracle Database App Connection
	Credentials AppConnectionOracledbCredentials `pulumi:"credentials"`
	// An optional description for the Oracle Database App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Oracle Database. Possible values are: username-and-password
	Method string `pulumi:"method"`
	// The name of the Oracle Database App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionOracledb resource.
type AppConnectionOracledbArgs struct {
	// The credentials for the Oracle Database App Connection
	Credentials AppConnectionOracledbCredentialsInput
	// An optional description for the Oracle Database App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Oracle Database. Possible values are: username-and-password
	Method pulumi.StringInput
	// The name of the Oracle Database App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionOracledbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionOracledbArgs)(nil)).Elem()
}

type AppConnectionOracledbInput interface {
	pulumi.Input

	ToAppConnectionOracledbOutput() AppConnectionOracledbOutput
	ToAppConnectionOracledbOutputWithContext(ctx context.Context) AppConnectionOracledbOutput
}

func (*AppConnectionOracledb) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionOracledb)(nil)).Elem()
}

func (i *AppConnectionOracledb) ToAppConnectionOracledbOutput() AppConnectionOracledbOutput {
	return i.ToAppConnectionOracledbOutputWithContext(context.Background())
}

func (i *AppConnectionOracledb) ToAppConnectionOracledbOutputWithContext(ctx context.Context) AppConnectionOracledbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionOracledbOutput)
}

// AppConnectionOracledbArrayInput is an input type that accepts AppConnectionOracledbArray and AppConnectionOracledbArrayOutput values.
// You can construct a concrete instance of `AppConnectionOracledbArrayInput` via:
//
//	AppConnectionOracledbArray{ AppConnectionOracledbArgs{...} }
type AppConnectionOracledbArrayInput interface {
	pulumi.Input

	ToAppConnectionOracledbArrayOutput() AppConnectionOracledbArrayOutput
	ToAppConnectionOracledbArrayOutputWithContext(context.Context) AppConnectionOracledbArrayOutput
}

type AppConnectionOracledbArray []AppConnectionOracledbInput

func (AppConnectionOracledbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionOracledb)(nil)).Elem()
}

func (i AppConnectionOracledbArray) ToAppConnectionOracledbArrayOutput() AppConnectionOracledbArrayOutput {
	return i.ToAppConnectionOracledbArrayOutputWithContext(context.Background())
}

func (i AppConnectionOracledbArray) ToAppConnectionOracledbArrayOutputWithContext(ctx context.Context) AppConnectionOracledbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionOracledbArrayOutput)
}

// AppConnectionOracledbMapInput is an input type that accepts AppConnectionOracledbMap and AppConnectionOracledbMapOutput values.
// You can construct a concrete instance of `AppConnectionOracledbMapInput` via:
//
//	AppConnectionOracledbMap{ "key": AppConnectionOracledbArgs{...} }
type AppConnectionOracledbMapInput interface {
	pulumi.Input

	ToAppConnectionOracledbMapOutput() AppConnectionOracledbMapOutput
	ToAppConnectionOracledbMapOutputWithContext(context.Context) AppConnectionOracledbMapOutput
}

type AppConnectionOracledbMap map[string]AppConnectionOracledbInput

func (AppConnectionOracledbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionOracledb)(nil)).Elem()
}

func (i AppConnectionOracledbMap) ToAppConnectionOracledbMapOutput() AppConnectionOracledbMapOutput {
	return i.ToAppConnectionOracledbMapOutputWithContext(context.Background())
}

func (i AppConnectionOracledbMap) ToAppConnectionOracledbMapOutputWithContext(ctx context.Context) AppConnectionOracledbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionOracledbMapOutput)
}

type AppConnectionOracledbOutput struct{ *pulumi.OutputState }

func (AppConnectionOracledbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionOracledb)(nil)).Elem()
}

func (o AppConnectionOracledbOutput) ToAppConnectionOracledbOutput() AppConnectionOracledbOutput {
	return o
}

func (o AppConnectionOracledbOutput) ToAppConnectionOracledbOutputWithContext(ctx context.Context) AppConnectionOracledbOutput {
	return o
}

// The credentials for the Oracle Database App Connection
func (o AppConnectionOracledbOutput) Credentials() AppConnectionOracledbCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionOracledb) AppConnectionOracledbCredentialsOutput { return v.Credentials }).(AppConnectionOracledbCredentialsOutput)
}

// The hash of the Oracle Database App Connection credentials
func (o AppConnectionOracledbOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionOracledb) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the Oracle Database App Connection.
func (o AppConnectionOracledbOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionOracledb) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with Oracle Database. Possible values are: username-and-password
func (o AppConnectionOracledbOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionOracledb) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the Oracle Database App Connection to create. Must be slug-friendly
func (o AppConnectionOracledbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionOracledb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionOracledbArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionOracledbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionOracledb)(nil)).Elem()
}

func (o AppConnectionOracledbArrayOutput) ToAppConnectionOracledbArrayOutput() AppConnectionOracledbArrayOutput {
	return o
}

func (o AppConnectionOracledbArrayOutput) ToAppConnectionOracledbArrayOutputWithContext(ctx context.Context) AppConnectionOracledbArrayOutput {
	return o
}

func (o AppConnectionOracledbArrayOutput) Index(i pulumi.IntInput) AppConnectionOracledbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionOracledb {
		return vs[0].([]*AppConnectionOracledb)[vs[1].(int)]
	}).(AppConnectionOracledbOutput)
}

type AppConnectionOracledbMapOutput struct{ *pulumi.OutputState }

func (AppConnectionOracledbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionOracledb)(nil)).Elem()
}

func (o AppConnectionOracledbMapOutput) ToAppConnectionOracledbMapOutput() AppConnectionOracledbMapOutput {
	return o
}

func (o AppConnectionOracledbMapOutput) ToAppConnectionOracledbMapOutputWithContext(ctx context.Context) AppConnectionOracledbMapOutput {
	return o
}

func (o AppConnectionOracledbMapOutput) MapIndex(k pulumi.StringInput) AppConnectionOracledbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionOracledb {
		return vs[0].(map[string]*AppConnectionOracledb)[vs[1].(string)]
	}).(AppConnectionOracledbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionOracledbInput)(nil)).Elem(), &AppConnectionOracledb{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionOracledbArrayInput)(nil)).Elem(), AppConnectionOracledbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionOracledbMapInput)(nil)).Elem(), AppConnectionOracledbMap{})
	pulumi.RegisterOutputType(AppConnectionOracledbOutput{})
	pulumi.RegisterOutputType(AppConnectionOracledbArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionOracledbMapOutput{})
}
