// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationMysqlCredentials struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMysqlCredentialsParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMysqlCredentialsRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMysqlCredentialsSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMysqlCredentialsTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationMysqlCredentials registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationMysqlCredentials(ctx *pulumi.Context,
	name string, args *SecretRotationMysqlCredentialsArgs, opts ...pulumi.ResourceOption) (*SecretRotationMysqlCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationMysqlCredentials
	err := ctx.RegisterResource("infisical:index/secretRotationMysqlCredentials:SecretRotationMysqlCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationMysqlCredentials gets an existing SecretRotationMysqlCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationMysqlCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationMysqlCredentialsState, opts ...pulumi.ResourceOption) (*SecretRotationMysqlCredentials, error) {
	var resource SecretRotationMysqlCredentials
	err := ctx.ReadResource("infisical:index/secretRotationMysqlCredentials:SecretRotationMysqlCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationMysqlCredentials resources.
type secretRotationMysqlCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationMysqlCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationMysqlCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationMysqlCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationMysqlCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationMysqlCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMysqlCredentialsParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMysqlCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMysqlCredentialsSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMysqlCredentialsTemporaryParametersPtrInput
}

func (SecretRotationMysqlCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationMysqlCredentialsState)(nil)).Elem()
}

type secretRotationMysqlCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMysqlCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationMysqlCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMysqlCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationMysqlCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationMysqlCredentials resource.
type SecretRotationMysqlCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationMysqlCredentialsParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationMysqlCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationMysqlCredentialsSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationMysqlCredentialsTemporaryParametersPtrInput
}

func (SecretRotationMysqlCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationMysqlCredentialsArgs)(nil)).Elem()
}

type SecretRotationMysqlCredentialsInput interface {
	pulumi.Input

	ToSecretRotationMysqlCredentialsOutput() SecretRotationMysqlCredentialsOutput
	ToSecretRotationMysqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsOutput
}

func (*SecretRotationMysqlCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationMysqlCredentials)(nil)).Elem()
}

func (i *SecretRotationMysqlCredentials) ToSecretRotationMysqlCredentialsOutput() SecretRotationMysqlCredentialsOutput {
	return i.ToSecretRotationMysqlCredentialsOutputWithContext(context.Background())
}

func (i *SecretRotationMysqlCredentials) ToSecretRotationMysqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMysqlCredentialsOutput)
}

// SecretRotationMysqlCredentialsArrayInput is an input type that accepts SecretRotationMysqlCredentialsArray and SecretRotationMysqlCredentialsArrayOutput values.
// You can construct a concrete instance of `SecretRotationMysqlCredentialsArrayInput` via:
//
//	SecretRotationMysqlCredentialsArray{ SecretRotationMysqlCredentialsArgs{...} }
type SecretRotationMysqlCredentialsArrayInput interface {
	pulumi.Input

	ToSecretRotationMysqlCredentialsArrayOutput() SecretRotationMysqlCredentialsArrayOutput
	ToSecretRotationMysqlCredentialsArrayOutputWithContext(context.Context) SecretRotationMysqlCredentialsArrayOutput
}

type SecretRotationMysqlCredentialsArray []SecretRotationMysqlCredentialsInput

func (SecretRotationMysqlCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationMysqlCredentials)(nil)).Elem()
}

func (i SecretRotationMysqlCredentialsArray) ToSecretRotationMysqlCredentialsArrayOutput() SecretRotationMysqlCredentialsArrayOutput {
	return i.ToSecretRotationMysqlCredentialsArrayOutputWithContext(context.Background())
}

func (i SecretRotationMysqlCredentialsArray) ToSecretRotationMysqlCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMysqlCredentialsArrayOutput)
}

// SecretRotationMysqlCredentialsMapInput is an input type that accepts SecretRotationMysqlCredentialsMap and SecretRotationMysqlCredentialsMapOutput values.
// You can construct a concrete instance of `SecretRotationMysqlCredentialsMapInput` via:
//
//	SecretRotationMysqlCredentialsMap{ "key": SecretRotationMysqlCredentialsArgs{...} }
type SecretRotationMysqlCredentialsMapInput interface {
	pulumi.Input

	ToSecretRotationMysqlCredentialsMapOutput() SecretRotationMysqlCredentialsMapOutput
	ToSecretRotationMysqlCredentialsMapOutputWithContext(context.Context) SecretRotationMysqlCredentialsMapOutput
}

type SecretRotationMysqlCredentialsMap map[string]SecretRotationMysqlCredentialsInput

func (SecretRotationMysqlCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationMysqlCredentials)(nil)).Elem()
}

func (i SecretRotationMysqlCredentialsMap) ToSecretRotationMysqlCredentialsMapOutput() SecretRotationMysqlCredentialsMapOutput {
	return i.ToSecretRotationMysqlCredentialsMapOutputWithContext(context.Background())
}

func (i SecretRotationMysqlCredentialsMap) ToSecretRotationMysqlCredentialsMapOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMysqlCredentialsMapOutput)
}

type SecretRotationMysqlCredentialsOutput struct{ *pulumi.OutputState }

func (SecretRotationMysqlCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationMysqlCredentials)(nil)).Elem()
}

func (o SecretRotationMysqlCredentialsOutput) ToSecretRotationMysqlCredentialsOutput() SecretRotationMysqlCredentialsOutput {
	return o
}

func (o SecretRotationMysqlCredentialsOutput) ToSecretRotationMysqlCredentialsOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationMysqlCredentialsOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationMysqlCredentialsOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationMysqlCredentialsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationMysqlCredentialsOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationMysqlCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationMysqlCredentialsOutput) Parameters() SecretRotationMysqlCredentialsParametersOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) SecretRotationMysqlCredentialsParametersOutput {
		return v.Parameters
	}).(SecretRotationMysqlCredentialsParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationMysqlCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationMysqlCredentialsOutput) RotateAtUtc() SecretRotationMysqlCredentialsRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) SecretRotationMysqlCredentialsRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationMysqlCredentialsRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationMysqlCredentialsOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationMysqlCredentialsOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationMysqlCredentialsOutput) SecretsMapping() SecretRotationMysqlCredentialsSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) SecretRotationMysqlCredentialsSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationMysqlCredentialsSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationMysqlCredentialsOutput) TemporaryParameters() SecretRotationMysqlCredentialsTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationMysqlCredentials) SecretRotationMysqlCredentialsTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationMysqlCredentialsTemporaryParametersPtrOutput)
}

type SecretRotationMysqlCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationMysqlCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationMysqlCredentials)(nil)).Elem()
}

func (o SecretRotationMysqlCredentialsArrayOutput) ToSecretRotationMysqlCredentialsArrayOutput() SecretRotationMysqlCredentialsArrayOutput {
	return o
}

func (o SecretRotationMysqlCredentialsArrayOutput) ToSecretRotationMysqlCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsArrayOutput {
	return o
}

func (o SecretRotationMysqlCredentialsArrayOutput) Index(i pulumi.IntInput) SecretRotationMysqlCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationMysqlCredentials {
		return vs[0].([]*SecretRotationMysqlCredentials)[vs[1].(int)]
	}).(SecretRotationMysqlCredentialsOutput)
}

type SecretRotationMysqlCredentialsMapOutput struct{ *pulumi.OutputState }

func (SecretRotationMysqlCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationMysqlCredentials)(nil)).Elem()
}

func (o SecretRotationMysqlCredentialsMapOutput) ToSecretRotationMysqlCredentialsMapOutput() SecretRotationMysqlCredentialsMapOutput {
	return o
}

func (o SecretRotationMysqlCredentialsMapOutput) ToSecretRotationMysqlCredentialsMapOutputWithContext(ctx context.Context) SecretRotationMysqlCredentialsMapOutput {
	return o
}

func (o SecretRotationMysqlCredentialsMapOutput) MapIndex(k pulumi.StringInput) SecretRotationMysqlCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationMysqlCredentials {
		return vs[0].(map[string]*SecretRotationMysqlCredentials)[vs[1].(string)]
	}).(SecretRotationMysqlCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMysqlCredentialsInput)(nil)).Elem(), &SecretRotationMysqlCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMysqlCredentialsArrayInput)(nil)).Elem(), SecretRotationMysqlCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMysqlCredentialsMapInput)(nil)).Elem(), SecretRotationMysqlCredentialsMap{})
	pulumi.RegisterOutputType(SecretRotationMysqlCredentialsOutput{})
	pulumi.RegisterOutputType(SecretRotationMysqlCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationMysqlCredentialsMapOutput{})
}
