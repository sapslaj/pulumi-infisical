// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectRole struct {
	pulumi.CustomResourceState

	// The description for the new role. Defaults to an empty string.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name for the new role
	Name pulumi.StringOutput `pulumi:"name"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
	Permissions ProjectRolePermissionArrayOutput `pulumi:"permissions"`
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectRolePermissionsV2ArrayOutput `pulumi:"permissionsV2s"`
	// The slug of the project to create role
	ProjectSlug pulumi.StringOutput `pulumi:"projectSlug"`
	// The slug for the new role
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewProjectRole registers a new resource with the given unique name, arguments, and options.
func NewProjectRole(ctx *pulumi.Context,
	name string, args *ProjectRoleArgs, opts ...pulumi.ResourceOption) (*ProjectRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectSlug == nil {
		return nil, errors.New("invalid value for required argument 'ProjectSlug'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRole
	err := ctx.RegisterResource("infisical:index/projectRole:ProjectRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRole gets an existing ProjectRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRoleState, opts ...pulumi.ResourceOption) (*ProjectRole, error) {
	var resource ProjectRole
	err := ctx.ReadResource("infisical:index/projectRole:ProjectRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRole resources.
type projectRoleState struct {
	// The description for the new role. Defaults to an empty string.
	Description *string `pulumi:"description"`
	// The name for the new role
	Name *string `pulumi:"name"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
	Permissions []ProjectRolePermission `pulumi:"permissions"`
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s []ProjectRolePermissionsV2 `pulumi:"permissionsV2s"`
	// The slug of the project to create role
	ProjectSlug *string `pulumi:"projectSlug"`
	// The slug for the new role
	Slug *string `pulumi:"slug"`
}

type ProjectRoleState struct {
	// The description for the new role. Defaults to an empty string.
	Description pulumi.StringPtrInput
	// The name for the new role
	Name pulumi.StringPtrInput
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
	Permissions ProjectRolePermissionArrayInput
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectRolePermissionsV2ArrayInput
	// The slug of the project to create role
	ProjectSlug pulumi.StringPtrInput
	// The slug for the new role
	Slug pulumi.StringPtrInput
}

func (ProjectRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRoleState)(nil)).Elem()
}

type projectRoleArgs struct {
	// The description for the new role. Defaults to an empty string.
	Description *string `pulumi:"description"`
	// The name for the new role
	Name *string `pulumi:"name"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
	Permissions []ProjectRolePermission `pulumi:"permissions"`
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s []ProjectRolePermissionsV2 `pulumi:"permissionsV2s"`
	// The slug of the project to create role
	ProjectSlug string `pulumi:"projectSlug"`
	// The slug for the new role
	Slug string `pulumi:"slug"`
}

// The set of arguments for constructing a ProjectRole resource.
type ProjectRoleArgs struct {
	// The description for the new role. Defaults to an empty string.
	Description pulumi.StringPtrInput
	// The name for the new role
	Name pulumi.StringPtrInput
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
	Permissions ProjectRolePermissionArrayInput
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectRolePermissionsV2ArrayInput
	// The slug of the project to create role
	ProjectSlug pulumi.StringInput
	// The slug for the new role
	Slug pulumi.StringInput
}

func (ProjectRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRoleArgs)(nil)).Elem()
}

type ProjectRoleInput interface {
	pulumi.Input

	ToProjectRoleOutput() ProjectRoleOutput
	ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput
}

func (*ProjectRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRole)(nil)).Elem()
}

func (i *ProjectRole) ToProjectRoleOutput() ProjectRoleOutput {
	return i.ToProjectRoleOutputWithContext(context.Background())
}

func (i *ProjectRole) ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleOutput)
}

// ProjectRoleArrayInput is an input type that accepts ProjectRoleArray and ProjectRoleArrayOutput values.
// You can construct a concrete instance of `ProjectRoleArrayInput` via:
//
//	ProjectRoleArray{ ProjectRoleArgs{...} }
type ProjectRoleArrayInput interface {
	pulumi.Input

	ToProjectRoleArrayOutput() ProjectRoleArrayOutput
	ToProjectRoleArrayOutputWithContext(context.Context) ProjectRoleArrayOutput
}

type ProjectRoleArray []ProjectRoleInput

func (ProjectRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRole)(nil)).Elem()
}

func (i ProjectRoleArray) ToProjectRoleArrayOutput() ProjectRoleArrayOutput {
	return i.ToProjectRoleArrayOutputWithContext(context.Background())
}

func (i ProjectRoleArray) ToProjectRoleArrayOutputWithContext(ctx context.Context) ProjectRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleArrayOutput)
}

// ProjectRoleMapInput is an input type that accepts ProjectRoleMap and ProjectRoleMapOutput values.
// You can construct a concrete instance of `ProjectRoleMapInput` via:
//
//	ProjectRoleMap{ "key": ProjectRoleArgs{...} }
type ProjectRoleMapInput interface {
	pulumi.Input

	ToProjectRoleMapOutput() ProjectRoleMapOutput
	ToProjectRoleMapOutputWithContext(context.Context) ProjectRoleMapOutput
}

type ProjectRoleMap map[string]ProjectRoleInput

func (ProjectRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRole)(nil)).Elem()
}

func (i ProjectRoleMap) ToProjectRoleMapOutput() ProjectRoleMapOutput {
	return i.ToProjectRoleMapOutputWithContext(context.Background())
}

func (i ProjectRoleMap) ToProjectRoleMapOutputWithContext(ctx context.Context) ProjectRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRoleMapOutput)
}

type ProjectRoleOutput struct{ *pulumi.OutputState }

func (ProjectRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRole)(nil)).Elem()
}

func (o ProjectRoleOutput) ToProjectRoleOutput() ProjectRoleOutput {
	return o
}

func (o ProjectRoleOutput) ToProjectRoleOutputWithContext(ctx context.Context) ProjectRoleOutput {
	return o
}

// The description for the new role. Defaults to an empty string.
func (o ProjectRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name for the new role
func (o ProjectRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
func (o ProjectRoleOutput) Permissions() ProjectRolePermissionArrayOutput {
	return o.ApplyT(func(v *ProjectRole) ProjectRolePermissionArrayOutput { return v.Permissions }).(ProjectRolePermissionArrayOutput)
}

// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
func (o ProjectRoleOutput) PermissionsV2s() ProjectRolePermissionsV2ArrayOutput {
	return o.ApplyT(func(v *ProjectRole) ProjectRolePermissionsV2ArrayOutput { return v.PermissionsV2s }).(ProjectRolePermissionsV2ArrayOutput)
}

// The slug of the project to create role
func (o ProjectRoleOutput) ProjectSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.ProjectSlug }).(pulumi.StringOutput)
}

// The slug for the new role
func (o ProjectRoleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRole) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type ProjectRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRole)(nil)).Elem()
}

func (o ProjectRoleArrayOutput) ToProjectRoleArrayOutput() ProjectRoleArrayOutput {
	return o
}

func (o ProjectRoleArrayOutput) ToProjectRoleArrayOutputWithContext(ctx context.Context) ProjectRoleArrayOutput {
	return o
}

func (o ProjectRoleArrayOutput) Index(i pulumi.IntInput) ProjectRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRole {
		return vs[0].([]*ProjectRole)[vs[1].(int)]
	}).(ProjectRoleOutput)
}

type ProjectRoleMapOutput struct{ *pulumi.OutputState }

func (ProjectRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRole)(nil)).Elem()
}

func (o ProjectRoleMapOutput) ToProjectRoleMapOutput() ProjectRoleMapOutput {
	return o
}

func (o ProjectRoleMapOutput) ToProjectRoleMapOutputWithContext(ctx context.Context) ProjectRoleMapOutput {
	return o
}

func (o ProjectRoleMapOutput) MapIndex(k pulumi.StringInput) ProjectRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRole {
		return vs[0].(map[string]*ProjectRole)[vs[1].(string)]
	}).(ProjectRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleInput)(nil)).Elem(), &ProjectRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleArrayInput)(nil)).Elem(), ProjectRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRoleMapInput)(nil)).Elem(), ProjectRoleMap{})
	pulumi.RegisterOutputType(ProjectRoleOutput{})
	pulumi.RegisterOutputType(ProjectRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectRoleMapOutput{})
}
