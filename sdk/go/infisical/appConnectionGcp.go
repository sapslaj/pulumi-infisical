// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionGcp struct {
	pulumi.CustomResourceState

	// The credentials for the GCP App Connection
	Credentials AppConnectionGcpCredentialsOutput `pulumi:"credentials"`
	// The hash of the GCP App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the GCP App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with GCP. Possible values are: service-account-impersonation
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the GCP App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionGcp registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionGcp(ctx *pulumi.Context,
	name string, args *AppConnectionGcpArgs, opts ...pulumi.ResourceOption) (*AppConnectionGcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionGcp
	err := ctx.RegisterResource("infisical:index/appConnectionGcp:AppConnectionGcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionGcp gets an existing AppConnectionGcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionGcpState, opts ...pulumi.ResourceOption) (*AppConnectionGcp, error) {
	var resource AppConnectionGcp
	err := ctx.ReadResource("infisical:index/appConnectionGcp:AppConnectionGcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionGcp resources.
type appConnectionGcpState struct {
	// The credentials for the GCP App Connection
	Credentials *AppConnectionGcpCredentials `pulumi:"credentials"`
	// The hash of the GCP App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the GCP App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with GCP. Possible values are: service-account-impersonation
	Method *string `pulumi:"method"`
	// The name of the GCP App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionGcpState struct {
	// The credentials for the GCP App Connection
	Credentials AppConnectionGcpCredentialsPtrInput
	// The hash of the GCP App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the GCP App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with GCP. Possible values are: service-account-impersonation
	Method pulumi.StringPtrInput
	// The name of the GCP App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionGcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionGcpState)(nil)).Elem()
}

type appConnectionGcpArgs struct {
	// The credentials for the GCP App Connection
	Credentials AppConnectionGcpCredentials `pulumi:"credentials"`
	// An optional description for the GCP App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with GCP. Possible values are: service-account-impersonation
	Method string `pulumi:"method"`
	// The name of the GCP App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionGcp resource.
type AppConnectionGcpArgs struct {
	// The credentials for the GCP App Connection
	Credentials AppConnectionGcpCredentialsInput
	// An optional description for the GCP App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with GCP. Possible values are: service-account-impersonation
	Method pulumi.StringInput
	// The name of the GCP App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionGcpArgs)(nil)).Elem()
}

type AppConnectionGcpInput interface {
	pulumi.Input

	ToAppConnectionGcpOutput() AppConnectionGcpOutput
	ToAppConnectionGcpOutputWithContext(ctx context.Context) AppConnectionGcpOutput
}

func (*AppConnectionGcp) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionGcp)(nil)).Elem()
}

func (i *AppConnectionGcp) ToAppConnectionGcpOutput() AppConnectionGcpOutput {
	return i.ToAppConnectionGcpOutputWithContext(context.Background())
}

func (i *AppConnectionGcp) ToAppConnectionGcpOutputWithContext(ctx context.Context) AppConnectionGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionGcpOutput)
}

// AppConnectionGcpArrayInput is an input type that accepts AppConnectionGcpArray and AppConnectionGcpArrayOutput values.
// You can construct a concrete instance of `AppConnectionGcpArrayInput` via:
//
//	AppConnectionGcpArray{ AppConnectionGcpArgs{...} }
type AppConnectionGcpArrayInput interface {
	pulumi.Input

	ToAppConnectionGcpArrayOutput() AppConnectionGcpArrayOutput
	ToAppConnectionGcpArrayOutputWithContext(context.Context) AppConnectionGcpArrayOutput
}

type AppConnectionGcpArray []AppConnectionGcpInput

func (AppConnectionGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionGcp)(nil)).Elem()
}

func (i AppConnectionGcpArray) ToAppConnectionGcpArrayOutput() AppConnectionGcpArrayOutput {
	return i.ToAppConnectionGcpArrayOutputWithContext(context.Background())
}

func (i AppConnectionGcpArray) ToAppConnectionGcpArrayOutputWithContext(ctx context.Context) AppConnectionGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionGcpArrayOutput)
}

// AppConnectionGcpMapInput is an input type that accepts AppConnectionGcpMap and AppConnectionGcpMapOutput values.
// You can construct a concrete instance of `AppConnectionGcpMapInput` via:
//
//	AppConnectionGcpMap{ "key": AppConnectionGcpArgs{...} }
type AppConnectionGcpMapInput interface {
	pulumi.Input

	ToAppConnectionGcpMapOutput() AppConnectionGcpMapOutput
	ToAppConnectionGcpMapOutputWithContext(context.Context) AppConnectionGcpMapOutput
}

type AppConnectionGcpMap map[string]AppConnectionGcpInput

func (AppConnectionGcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionGcp)(nil)).Elem()
}

func (i AppConnectionGcpMap) ToAppConnectionGcpMapOutput() AppConnectionGcpMapOutput {
	return i.ToAppConnectionGcpMapOutputWithContext(context.Background())
}

func (i AppConnectionGcpMap) ToAppConnectionGcpMapOutputWithContext(ctx context.Context) AppConnectionGcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionGcpMapOutput)
}

type AppConnectionGcpOutput struct{ *pulumi.OutputState }

func (AppConnectionGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionGcp)(nil)).Elem()
}

func (o AppConnectionGcpOutput) ToAppConnectionGcpOutput() AppConnectionGcpOutput {
	return o
}

func (o AppConnectionGcpOutput) ToAppConnectionGcpOutputWithContext(ctx context.Context) AppConnectionGcpOutput {
	return o
}

// The credentials for the GCP App Connection
func (o AppConnectionGcpOutput) Credentials() AppConnectionGcpCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionGcp) AppConnectionGcpCredentialsOutput { return v.Credentials }).(AppConnectionGcpCredentialsOutput)
}

// The hash of the GCP App Connection credentials
func (o AppConnectionGcpOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionGcp) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the GCP App Connection.
func (o AppConnectionGcpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionGcp) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with GCP. Possible values are: service-account-impersonation
func (o AppConnectionGcpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionGcp) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the GCP App Connection to create. Must be slug-friendly
func (o AppConnectionGcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionGcp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionGcpArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionGcp)(nil)).Elem()
}

func (o AppConnectionGcpArrayOutput) ToAppConnectionGcpArrayOutput() AppConnectionGcpArrayOutput {
	return o
}

func (o AppConnectionGcpArrayOutput) ToAppConnectionGcpArrayOutputWithContext(ctx context.Context) AppConnectionGcpArrayOutput {
	return o
}

func (o AppConnectionGcpArrayOutput) Index(i pulumi.IntInput) AppConnectionGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionGcp {
		return vs[0].([]*AppConnectionGcp)[vs[1].(int)]
	}).(AppConnectionGcpOutput)
}

type AppConnectionGcpMapOutput struct{ *pulumi.OutputState }

func (AppConnectionGcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionGcp)(nil)).Elem()
}

func (o AppConnectionGcpMapOutput) ToAppConnectionGcpMapOutput() AppConnectionGcpMapOutput {
	return o
}

func (o AppConnectionGcpMapOutput) ToAppConnectionGcpMapOutputWithContext(ctx context.Context) AppConnectionGcpMapOutput {
	return o
}

func (o AppConnectionGcpMapOutput) MapIndex(k pulumi.StringInput) AppConnectionGcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionGcp {
		return vs[0].(map[string]*AppConnectionGcp)[vs[1].(string)]
	}).(AppConnectionGcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionGcpInput)(nil)).Elem(), &AppConnectionGcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionGcpArrayInput)(nil)).Elem(), AppConnectionGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionGcpMapInput)(nil)).Elem(), AppConnectionGcpMap{})
	pulumi.RegisterOutputType(AppConnectionGcpOutput{})
	pulumi.RegisterOutputType(AppConnectionGcpArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionGcpMapOutput{})
}
