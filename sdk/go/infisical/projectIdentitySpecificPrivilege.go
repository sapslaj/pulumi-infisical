// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectIdentitySpecificPrivilege struct {
	pulumi.CustomResourceState

	// The identity id to create identity specific privilege
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
	IsTemporary pulumi.BoolOutput `pulumi:"isTemporary"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
	Permission ProjectIdentitySpecificPrivilegePermissionPtrOutput `pulumi:"permission"`
	// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectIdentitySpecificPrivilegePermissionsV2ArrayOutput `pulumi:"permissionsV2s"`
	// The slug of the project to create identity specific privilege
	ProjectSlug pulumi.StringOutput `pulumi:"projectSlug"`
	// The slug for the new privilege
	Slug pulumi.StringOutput `pulumi:"slug"`
	// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
	TemporaryAccessEndTime pulumi.StringOutput `pulumi:"temporaryAccessEndTime"`
	// ISO time for which temporary access should begin. The current time is used by default.
	TemporaryAccessStartTime pulumi.StringOutput `pulumi:"temporaryAccessStartTime"`
	// Type of temporary access given. Types: relative. Default: relative
	TemporaryMode pulumi.StringOutput `pulumi:"temporaryMode"`
	// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
	TemporaryRange pulumi.StringOutput `pulumi:"temporaryRange"`
}

// NewProjectIdentitySpecificPrivilege registers a new resource with the given unique name, arguments, and options.
func NewProjectIdentitySpecificPrivilege(ctx *pulumi.Context,
	name string, args *ProjectIdentitySpecificPrivilegeArgs, opts ...pulumi.ResourceOption) (*ProjectIdentitySpecificPrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.ProjectSlug == nil {
		return nil, errors.New("invalid value for required argument 'ProjectSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIdentitySpecificPrivilege
	err := ctx.RegisterResource("infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIdentitySpecificPrivilege gets an existing ProjectIdentitySpecificPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIdentitySpecificPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIdentitySpecificPrivilegeState, opts ...pulumi.ResourceOption) (*ProjectIdentitySpecificPrivilege, error) {
	var resource ProjectIdentitySpecificPrivilege
	err := ctx.ReadResource("infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIdentitySpecificPrivilege resources.
type projectIdentitySpecificPrivilegeState struct {
	// The identity id to create identity specific privilege
	IdentityId *string `pulumi:"identityId"`
	// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
	IsTemporary *bool `pulumi:"isTemporary"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
	Permission *ProjectIdentitySpecificPrivilegePermission `pulumi:"permission"`
	// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s []ProjectIdentitySpecificPrivilegePermissionsV2 `pulumi:"permissionsV2s"`
	// The slug of the project to create identity specific privilege
	ProjectSlug *string `pulumi:"projectSlug"`
	// The slug for the new privilege
	Slug *string `pulumi:"slug"`
	// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
	TemporaryAccessEndTime *string `pulumi:"temporaryAccessEndTime"`
	// ISO time for which temporary access should begin. The current time is used by default.
	TemporaryAccessStartTime *string `pulumi:"temporaryAccessStartTime"`
	// Type of temporary access given. Types: relative. Default: relative
	TemporaryMode *string `pulumi:"temporaryMode"`
	// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
	TemporaryRange *string `pulumi:"temporaryRange"`
}

type ProjectIdentitySpecificPrivilegeState struct {
	// The identity id to create identity specific privilege
	IdentityId pulumi.StringPtrInput
	// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
	IsTemporary pulumi.BoolPtrInput
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
	Permission ProjectIdentitySpecificPrivilegePermissionPtrInput
	// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectIdentitySpecificPrivilegePermissionsV2ArrayInput
	// The slug of the project to create identity specific privilege
	ProjectSlug pulumi.StringPtrInput
	// The slug for the new privilege
	Slug pulumi.StringPtrInput
	// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
	TemporaryAccessEndTime pulumi.StringPtrInput
	// ISO time for which temporary access should begin. The current time is used by default.
	TemporaryAccessStartTime pulumi.StringPtrInput
	// Type of temporary access given. Types: relative. Default: relative
	TemporaryMode pulumi.StringPtrInput
	// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
	TemporaryRange pulumi.StringPtrInput
}

func (ProjectIdentitySpecificPrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIdentitySpecificPrivilegeState)(nil)).Elem()
}

type projectIdentitySpecificPrivilegeArgs struct {
	// The identity id to create identity specific privilege
	IdentityId string `pulumi:"identityId"`
	// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
	IsTemporary *bool `pulumi:"isTemporary"`
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
	Permission *ProjectIdentitySpecificPrivilegePermission `pulumi:"permission"`
	// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s []ProjectIdentitySpecificPrivilegePermissionsV2 `pulumi:"permissionsV2s"`
	// The slug of the project to create identity specific privilege
	ProjectSlug string `pulumi:"projectSlug"`
	// The slug for the new privilege
	Slug *string `pulumi:"slug"`
	// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
	TemporaryAccessEndTime *string `pulumi:"temporaryAccessEndTime"`
	// ISO time for which temporary access should begin. The current time is used by default.
	TemporaryAccessStartTime *string `pulumi:"temporaryAccessStartTime"`
	// Type of temporary access given. Types: relative. Default: relative
	TemporaryMode *string `pulumi:"temporaryMode"`
	// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
	TemporaryRange *string `pulumi:"temporaryRange"`
}

// The set of arguments for constructing a ProjectIdentitySpecificPrivilege resource.
type ProjectIdentitySpecificPrivilegeArgs struct {
	// The identity id to create identity specific privilege
	IdentityId pulumi.StringInput
	// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
	IsTemporary pulumi.BoolPtrInput
	// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
	Permission ProjectIdentitySpecificPrivilegePermissionPtrInput
	// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
	PermissionsV2s ProjectIdentitySpecificPrivilegePermissionsV2ArrayInput
	// The slug of the project to create identity specific privilege
	ProjectSlug pulumi.StringInput
	// The slug for the new privilege
	Slug pulumi.StringPtrInput
	// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
	TemporaryAccessEndTime pulumi.StringPtrInput
	// ISO time for which temporary access should begin. The current time is used by default.
	TemporaryAccessStartTime pulumi.StringPtrInput
	// Type of temporary access given. Types: relative. Default: relative
	TemporaryMode pulumi.StringPtrInput
	// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
	TemporaryRange pulumi.StringPtrInput
}

func (ProjectIdentitySpecificPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIdentitySpecificPrivilegeArgs)(nil)).Elem()
}

type ProjectIdentitySpecificPrivilegeInput interface {
	pulumi.Input

	ToProjectIdentitySpecificPrivilegeOutput() ProjectIdentitySpecificPrivilegeOutput
	ToProjectIdentitySpecificPrivilegeOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeOutput
}

func (*ProjectIdentitySpecificPrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (i *ProjectIdentitySpecificPrivilege) ToProjectIdentitySpecificPrivilegeOutput() ProjectIdentitySpecificPrivilegeOutput {
	return i.ToProjectIdentitySpecificPrivilegeOutputWithContext(context.Background())
}

func (i *ProjectIdentitySpecificPrivilege) ToProjectIdentitySpecificPrivilegeOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentitySpecificPrivilegeOutput)
}

// ProjectIdentitySpecificPrivilegeArrayInput is an input type that accepts ProjectIdentitySpecificPrivilegeArray and ProjectIdentitySpecificPrivilegeArrayOutput values.
// You can construct a concrete instance of `ProjectIdentitySpecificPrivilegeArrayInput` via:
//
//	ProjectIdentitySpecificPrivilegeArray{ ProjectIdentitySpecificPrivilegeArgs{...} }
type ProjectIdentitySpecificPrivilegeArrayInput interface {
	pulumi.Input

	ToProjectIdentitySpecificPrivilegeArrayOutput() ProjectIdentitySpecificPrivilegeArrayOutput
	ToProjectIdentitySpecificPrivilegeArrayOutputWithContext(context.Context) ProjectIdentitySpecificPrivilegeArrayOutput
}

type ProjectIdentitySpecificPrivilegeArray []ProjectIdentitySpecificPrivilegeInput

func (ProjectIdentitySpecificPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (i ProjectIdentitySpecificPrivilegeArray) ToProjectIdentitySpecificPrivilegeArrayOutput() ProjectIdentitySpecificPrivilegeArrayOutput {
	return i.ToProjectIdentitySpecificPrivilegeArrayOutputWithContext(context.Background())
}

func (i ProjectIdentitySpecificPrivilegeArray) ToProjectIdentitySpecificPrivilegeArrayOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentitySpecificPrivilegeArrayOutput)
}

// ProjectIdentitySpecificPrivilegeMapInput is an input type that accepts ProjectIdentitySpecificPrivilegeMap and ProjectIdentitySpecificPrivilegeMapOutput values.
// You can construct a concrete instance of `ProjectIdentitySpecificPrivilegeMapInput` via:
//
//	ProjectIdentitySpecificPrivilegeMap{ "key": ProjectIdentitySpecificPrivilegeArgs{...} }
type ProjectIdentitySpecificPrivilegeMapInput interface {
	pulumi.Input

	ToProjectIdentitySpecificPrivilegeMapOutput() ProjectIdentitySpecificPrivilegeMapOutput
	ToProjectIdentitySpecificPrivilegeMapOutputWithContext(context.Context) ProjectIdentitySpecificPrivilegeMapOutput
}

type ProjectIdentitySpecificPrivilegeMap map[string]ProjectIdentitySpecificPrivilegeInput

func (ProjectIdentitySpecificPrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (i ProjectIdentitySpecificPrivilegeMap) ToProjectIdentitySpecificPrivilegeMapOutput() ProjectIdentitySpecificPrivilegeMapOutput {
	return i.ToProjectIdentitySpecificPrivilegeMapOutputWithContext(context.Background())
}

func (i ProjectIdentitySpecificPrivilegeMap) ToProjectIdentitySpecificPrivilegeMapOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentitySpecificPrivilegeMapOutput)
}

type ProjectIdentitySpecificPrivilegeOutput struct{ *pulumi.OutputState }

func (ProjectIdentitySpecificPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (o ProjectIdentitySpecificPrivilegeOutput) ToProjectIdentitySpecificPrivilegeOutput() ProjectIdentitySpecificPrivilegeOutput {
	return o
}

func (o ProjectIdentitySpecificPrivilegeOutput) ToProjectIdentitySpecificPrivilegeOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeOutput {
	return o
}

// The identity id to create identity specific privilege
func (o ProjectIdentitySpecificPrivilegeOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// Flag to indicate the assigned specific privilege is temporary or not. When isTemporary is true fields temporary_mode, temporaryRange and temporaryAccessStartTime is required.
func (o ProjectIdentitySpecificPrivilegeOutput) IsTemporary() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.BoolOutput { return v.IsTemporary }).(pulumi.BoolOutput)
}

// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
func (o ProjectIdentitySpecificPrivilegeOutput) Permission() ProjectIdentitySpecificPrivilegePermissionPtrOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) ProjectIdentitySpecificPrivilegePermissionPtrOutput {
		return v.Permission
	}).(ProjectIdentitySpecificPrivilegePermissionPtrOutput)
}

// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
func (o ProjectIdentitySpecificPrivilegeOutput) PermissionsV2s() ProjectIdentitySpecificPrivilegePermissionsV2ArrayOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) ProjectIdentitySpecificPrivilegePermissionsV2ArrayOutput {
		return v.PermissionsV2s
	}).(ProjectIdentitySpecificPrivilegePermissionsV2ArrayOutput)
}

// The slug of the project to create identity specific privilege
func (o ProjectIdentitySpecificPrivilegeOutput) ProjectSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.ProjectSlug }).(pulumi.StringOutput)
}

// The slug for the new privilege
func (o ProjectIdentitySpecificPrivilegeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// ISO time for which temporary access will end. Computed based on temporaryRange and temporary_access_start_time
func (o ProjectIdentitySpecificPrivilegeOutput) TemporaryAccessEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.TemporaryAccessEndTime }).(pulumi.StringOutput)
}

// ISO time for which temporary access should begin. The current time is used by default.
func (o ProjectIdentitySpecificPrivilegeOutput) TemporaryAccessStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.TemporaryAccessStartTime }).(pulumi.StringOutput)
}

// Type of temporary access given. Types: relative. Default: relative
func (o ProjectIdentitySpecificPrivilegeOutput) TemporaryMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.TemporaryMode }).(pulumi.StringOutput)
}

// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
func (o ProjectIdentitySpecificPrivilegeOutput) TemporaryRange() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIdentitySpecificPrivilege) pulumi.StringOutput { return v.TemporaryRange }).(pulumi.StringOutput)
}

type ProjectIdentitySpecificPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (ProjectIdentitySpecificPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (o ProjectIdentitySpecificPrivilegeArrayOutput) ToProjectIdentitySpecificPrivilegeArrayOutput() ProjectIdentitySpecificPrivilegeArrayOutput {
	return o
}

func (o ProjectIdentitySpecificPrivilegeArrayOutput) ToProjectIdentitySpecificPrivilegeArrayOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeArrayOutput {
	return o
}

func (o ProjectIdentitySpecificPrivilegeArrayOutput) Index(i pulumi.IntInput) ProjectIdentitySpecificPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIdentitySpecificPrivilege {
		return vs[0].([]*ProjectIdentitySpecificPrivilege)[vs[1].(int)]
	}).(ProjectIdentitySpecificPrivilegeOutput)
}

type ProjectIdentitySpecificPrivilegeMapOutput struct{ *pulumi.OutputState }

func (ProjectIdentitySpecificPrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIdentitySpecificPrivilege)(nil)).Elem()
}

func (o ProjectIdentitySpecificPrivilegeMapOutput) ToProjectIdentitySpecificPrivilegeMapOutput() ProjectIdentitySpecificPrivilegeMapOutput {
	return o
}

func (o ProjectIdentitySpecificPrivilegeMapOutput) ToProjectIdentitySpecificPrivilegeMapOutputWithContext(ctx context.Context) ProjectIdentitySpecificPrivilegeMapOutput {
	return o
}

func (o ProjectIdentitySpecificPrivilegeMapOutput) MapIndex(k pulumi.StringInput) ProjectIdentitySpecificPrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIdentitySpecificPrivilege {
		return vs[0].(map[string]*ProjectIdentitySpecificPrivilege)[vs[1].(string)]
	}).(ProjectIdentitySpecificPrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentitySpecificPrivilegeInput)(nil)).Elem(), &ProjectIdentitySpecificPrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentitySpecificPrivilegeArrayInput)(nil)).Elem(), ProjectIdentitySpecificPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentitySpecificPrivilegeMapInput)(nil)).Elem(), ProjectIdentitySpecificPrivilegeMap{})
	pulumi.RegisterOutputType(ProjectIdentitySpecificPrivilegeOutput{})
	pulumi.RegisterOutputType(ProjectIdentitySpecificPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(ProjectIdentitySpecificPrivilegeMapOutput{})
}
