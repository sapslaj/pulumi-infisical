// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionMysql struct {
	pulumi.CustomResourceState

	// The credentials for the MySQL App Connection
	Credentials AppConnectionMysqlCredentialsOutput `pulumi:"credentials"`
	// The hash of the MySQL App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the MySQL App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with MySQL. Possible values are: username-and-password
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the MySQL App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionMysql registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionMysql(ctx *pulumi.Context,
	name string, args *AppConnectionMysqlArgs, opts ...pulumi.ResourceOption) (*AppConnectionMysql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionMysql
	err := ctx.RegisterResource("infisical:index/appConnectionMysql:AppConnectionMysql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionMysql gets an existing AppConnectionMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionMysqlState, opts ...pulumi.ResourceOption) (*AppConnectionMysql, error) {
	var resource AppConnectionMysql
	err := ctx.ReadResource("infisical:index/appConnectionMysql:AppConnectionMysql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionMysql resources.
type appConnectionMysqlState struct {
	// The credentials for the MySQL App Connection
	Credentials *AppConnectionMysqlCredentials `pulumi:"credentials"`
	// The hash of the MySQL App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the MySQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with MySQL. Possible values are: username-and-password
	Method *string `pulumi:"method"`
	// The name of the MySQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionMysqlState struct {
	// The credentials for the MySQL App Connection
	Credentials AppConnectionMysqlCredentialsPtrInput
	// The hash of the MySQL App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the MySQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with MySQL. Possible values are: username-and-password
	Method pulumi.StringPtrInput
	// The name of the MySQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionMysqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionMysqlState)(nil)).Elem()
}

type appConnectionMysqlArgs struct {
	// The credentials for the MySQL App Connection
	Credentials AppConnectionMysqlCredentials `pulumi:"credentials"`
	// An optional description for the MySQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with MySQL. Possible values are: username-and-password
	Method string `pulumi:"method"`
	// The name of the MySQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionMysql resource.
type AppConnectionMysqlArgs struct {
	// The credentials for the MySQL App Connection
	Credentials AppConnectionMysqlCredentialsInput
	// An optional description for the MySQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with MySQL. Possible values are: username-and-password
	Method pulumi.StringInput
	// The name of the MySQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionMysqlArgs)(nil)).Elem()
}

type AppConnectionMysqlInput interface {
	pulumi.Input

	ToAppConnectionMysqlOutput() AppConnectionMysqlOutput
	ToAppConnectionMysqlOutputWithContext(ctx context.Context) AppConnectionMysqlOutput
}

func (*AppConnectionMysql) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionMysql)(nil)).Elem()
}

func (i *AppConnectionMysql) ToAppConnectionMysqlOutput() AppConnectionMysqlOutput {
	return i.ToAppConnectionMysqlOutputWithContext(context.Background())
}

func (i *AppConnectionMysql) ToAppConnectionMysqlOutputWithContext(ctx context.Context) AppConnectionMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMysqlOutput)
}

// AppConnectionMysqlArrayInput is an input type that accepts AppConnectionMysqlArray and AppConnectionMysqlArrayOutput values.
// You can construct a concrete instance of `AppConnectionMysqlArrayInput` via:
//
//	AppConnectionMysqlArray{ AppConnectionMysqlArgs{...} }
type AppConnectionMysqlArrayInput interface {
	pulumi.Input

	ToAppConnectionMysqlArrayOutput() AppConnectionMysqlArrayOutput
	ToAppConnectionMysqlArrayOutputWithContext(context.Context) AppConnectionMysqlArrayOutput
}

type AppConnectionMysqlArray []AppConnectionMysqlInput

func (AppConnectionMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionMysql)(nil)).Elem()
}

func (i AppConnectionMysqlArray) ToAppConnectionMysqlArrayOutput() AppConnectionMysqlArrayOutput {
	return i.ToAppConnectionMysqlArrayOutputWithContext(context.Background())
}

func (i AppConnectionMysqlArray) ToAppConnectionMysqlArrayOutputWithContext(ctx context.Context) AppConnectionMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMysqlArrayOutput)
}

// AppConnectionMysqlMapInput is an input type that accepts AppConnectionMysqlMap and AppConnectionMysqlMapOutput values.
// You can construct a concrete instance of `AppConnectionMysqlMapInput` via:
//
//	AppConnectionMysqlMap{ "key": AppConnectionMysqlArgs{...} }
type AppConnectionMysqlMapInput interface {
	pulumi.Input

	ToAppConnectionMysqlMapOutput() AppConnectionMysqlMapOutput
	ToAppConnectionMysqlMapOutputWithContext(context.Context) AppConnectionMysqlMapOutput
}

type AppConnectionMysqlMap map[string]AppConnectionMysqlInput

func (AppConnectionMysqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionMysql)(nil)).Elem()
}

func (i AppConnectionMysqlMap) ToAppConnectionMysqlMapOutput() AppConnectionMysqlMapOutput {
	return i.ToAppConnectionMysqlMapOutputWithContext(context.Background())
}

func (i AppConnectionMysqlMap) ToAppConnectionMysqlMapOutputWithContext(ctx context.Context) AppConnectionMysqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMysqlMapOutput)
}

type AppConnectionMysqlOutput struct{ *pulumi.OutputState }

func (AppConnectionMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionMysql)(nil)).Elem()
}

func (o AppConnectionMysqlOutput) ToAppConnectionMysqlOutput() AppConnectionMysqlOutput {
	return o
}

func (o AppConnectionMysqlOutput) ToAppConnectionMysqlOutputWithContext(ctx context.Context) AppConnectionMysqlOutput {
	return o
}

// The credentials for the MySQL App Connection
func (o AppConnectionMysqlOutput) Credentials() AppConnectionMysqlCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionMysql) AppConnectionMysqlCredentialsOutput { return v.Credentials }).(AppConnectionMysqlCredentialsOutput)
}

// The hash of the MySQL App Connection credentials
func (o AppConnectionMysqlOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMysql) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the MySQL App Connection.
func (o AppConnectionMysqlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionMysql) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with MySQL. Possible values are: username-and-password
func (o AppConnectionMysqlOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMysql) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the MySQL App Connection to create. Must be slug-friendly
func (o AppConnectionMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMysql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionMysqlArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionMysql)(nil)).Elem()
}

func (o AppConnectionMysqlArrayOutput) ToAppConnectionMysqlArrayOutput() AppConnectionMysqlArrayOutput {
	return o
}

func (o AppConnectionMysqlArrayOutput) ToAppConnectionMysqlArrayOutputWithContext(ctx context.Context) AppConnectionMysqlArrayOutput {
	return o
}

func (o AppConnectionMysqlArrayOutput) Index(i pulumi.IntInput) AppConnectionMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionMysql {
		return vs[0].([]*AppConnectionMysql)[vs[1].(int)]
	}).(AppConnectionMysqlOutput)
}

type AppConnectionMysqlMapOutput struct{ *pulumi.OutputState }

func (AppConnectionMysqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionMysql)(nil)).Elem()
}

func (o AppConnectionMysqlMapOutput) ToAppConnectionMysqlMapOutput() AppConnectionMysqlMapOutput {
	return o
}

func (o AppConnectionMysqlMapOutput) ToAppConnectionMysqlMapOutputWithContext(ctx context.Context) AppConnectionMysqlMapOutput {
	return o
}

func (o AppConnectionMysqlMapOutput) MapIndex(k pulumi.StringInput) AppConnectionMysqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionMysql {
		return vs[0].(map[string]*AppConnectionMysql)[vs[1].(string)]
	}).(AppConnectionMysqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMysqlInput)(nil)).Elem(), &AppConnectionMysql{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMysqlArrayInput)(nil)).Elem(), AppConnectionMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMysqlMapInput)(nil)).Elem(), AppConnectionMysqlMap{})
	pulumi.RegisterOutputType(AppConnectionMysqlOutput{})
	pulumi.RegisterOutputType(AppConnectionMysqlArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionMysqlMapOutput{})
}
