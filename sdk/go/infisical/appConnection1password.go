// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnection1password struct {
	pulumi.CustomResourceState

	// The credentials for the 1Password App Connection
	Credentials AppConnection1passwordCredentialsOutput `pulumi:"credentials"`
	// The hash of the 1Password App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the 1Password App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with 1Password. Possible values are: api-token
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the 1Password App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnection1password registers a new resource with the given unique name, arguments, and options.
func NewAppConnection1password(ctx *pulumi.Context,
	name string, args *AppConnection1passwordArgs, opts ...pulumi.ResourceOption) (*AppConnection1password, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnection1password
	err := ctx.RegisterResource("infisical:index/appConnection1password:AppConnection1password", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnection1password gets an existing AppConnection1password resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnection1password(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnection1passwordState, opts ...pulumi.ResourceOption) (*AppConnection1password, error) {
	var resource AppConnection1password
	err := ctx.ReadResource("infisical:index/appConnection1password:AppConnection1password", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnection1password resources.
type appConnection1passwordState struct {
	// The credentials for the 1Password App Connection
	Credentials *AppConnection1passwordCredentials `pulumi:"credentials"`
	// The hash of the 1Password App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the 1Password App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with 1Password. Possible values are: api-token
	Method *string `pulumi:"method"`
	// The name of the 1Password App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnection1passwordState struct {
	// The credentials for the 1Password App Connection
	Credentials AppConnection1passwordCredentialsPtrInput
	// The hash of the 1Password App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the 1Password App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with 1Password. Possible values are: api-token
	Method pulumi.StringPtrInput
	// The name of the 1Password App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnection1passwordState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnection1passwordState)(nil)).Elem()
}

type appConnection1passwordArgs struct {
	// The credentials for the 1Password App Connection
	Credentials AppConnection1passwordCredentials `pulumi:"credentials"`
	// An optional description for the 1Password App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with 1Password. Possible values are: api-token
	Method string `pulumi:"method"`
	// The name of the 1Password App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnection1password resource.
type AppConnection1passwordArgs struct {
	// The credentials for the 1Password App Connection
	Credentials AppConnection1passwordCredentialsInput
	// An optional description for the 1Password App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with 1Password. Possible values are: api-token
	Method pulumi.StringInput
	// The name of the 1Password App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnection1passwordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnection1passwordArgs)(nil)).Elem()
}

type AppConnection1passwordInput interface {
	pulumi.Input

	ToAppConnection1passwordOutput() AppConnection1passwordOutput
	ToAppConnection1passwordOutputWithContext(ctx context.Context) AppConnection1passwordOutput
}

func (*AppConnection1password) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnection1password)(nil)).Elem()
}

func (i *AppConnection1password) ToAppConnection1passwordOutput() AppConnection1passwordOutput {
	return i.ToAppConnection1passwordOutputWithContext(context.Background())
}

func (i *AppConnection1password) ToAppConnection1passwordOutputWithContext(ctx context.Context) AppConnection1passwordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnection1passwordOutput)
}

// AppConnection1passwordArrayInput is an input type that accepts AppConnection1passwordArray and AppConnection1passwordArrayOutput values.
// You can construct a concrete instance of `AppConnection1passwordArrayInput` via:
//
//	AppConnection1passwordArray{ AppConnection1passwordArgs{...} }
type AppConnection1passwordArrayInput interface {
	pulumi.Input

	ToAppConnection1passwordArrayOutput() AppConnection1passwordArrayOutput
	ToAppConnection1passwordArrayOutputWithContext(context.Context) AppConnection1passwordArrayOutput
}

type AppConnection1passwordArray []AppConnection1passwordInput

func (AppConnection1passwordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnection1password)(nil)).Elem()
}

func (i AppConnection1passwordArray) ToAppConnection1passwordArrayOutput() AppConnection1passwordArrayOutput {
	return i.ToAppConnection1passwordArrayOutputWithContext(context.Background())
}

func (i AppConnection1passwordArray) ToAppConnection1passwordArrayOutputWithContext(ctx context.Context) AppConnection1passwordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnection1passwordArrayOutput)
}

// AppConnection1passwordMapInput is an input type that accepts AppConnection1passwordMap and AppConnection1passwordMapOutput values.
// You can construct a concrete instance of `AppConnection1passwordMapInput` via:
//
//	AppConnection1passwordMap{ "key": AppConnection1passwordArgs{...} }
type AppConnection1passwordMapInput interface {
	pulumi.Input

	ToAppConnection1passwordMapOutput() AppConnection1passwordMapOutput
	ToAppConnection1passwordMapOutputWithContext(context.Context) AppConnection1passwordMapOutput
}

type AppConnection1passwordMap map[string]AppConnection1passwordInput

func (AppConnection1passwordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnection1password)(nil)).Elem()
}

func (i AppConnection1passwordMap) ToAppConnection1passwordMapOutput() AppConnection1passwordMapOutput {
	return i.ToAppConnection1passwordMapOutputWithContext(context.Background())
}

func (i AppConnection1passwordMap) ToAppConnection1passwordMapOutputWithContext(ctx context.Context) AppConnection1passwordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnection1passwordMapOutput)
}

type AppConnection1passwordOutput struct{ *pulumi.OutputState }

func (AppConnection1passwordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnection1password)(nil)).Elem()
}

func (o AppConnection1passwordOutput) ToAppConnection1passwordOutput() AppConnection1passwordOutput {
	return o
}

func (o AppConnection1passwordOutput) ToAppConnection1passwordOutputWithContext(ctx context.Context) AppConnection1passwordOutput {
	return o
}

// The credentials for the 1Password App Connection
func (o AppConnection1passwordOutput) Credentials() AppConnection1passwordCredentialsOutput {
	return o.ApplyT(func(v *AppConnection1password) AppConnection1passwordCredentialsOutput { return v.Credentials }).(AppConnection1passwordCredentialsOutput)
}

// The hash of the 1Password App Connection credentials
func (o AppConnection1passwordOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnection1password) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the 1Password App Connection.
func (o AppConnection1passwordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnection1password) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with 1Password. Possible values are: api-token
func (o AppConnection1passwordOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnection1password) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the 1Password App Connection to create. Must be slug-friendly
func (o AppConnection1passwordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnection1password) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnection1passwordArrayOutput struct{ *pulumi.OutputState }

func (AppConnection1passwordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnection1password)(nil)).Elem()
}

func (o AppConnection1passwordArrayOutput) ToAppConnection1passwordArrayOutput() AppConnection1passwordArrayOutput {
	return o
}

func (o AppConnection1passwordArrayOutput) ToAppConnection1passwordArrayOutputWithContext(ctx context.Context) AppConnection1passwordArrayOutput {
	return o
}

func (o AppConnection1passwordArrayOutput) Index(i pulumi.IntInput) AppConnection1passwordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnection1password {
		return vs[0].([]*AppConnection1password)[vs[1].(int)]
	}).(AppConnection1passwordOutput)
}

type AppConnection1passwordMapOutput struct{ *pulumi.OutputState }

func (AppConnection1passwordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnection1password)(nil)).Elem()
}

func (o AppConnection1passwordMapOutput) ToAppConnection1passwordMapOutput() AppConnection1passwordMapOutput {
	return o
}

func (o AppConnection1passwordMapOutput) ToAppConnection1passwordMapOutputWithContext(ctx context.Context) AppConnection1passwordMapOutput {
	return o
}

func (o AppConnection1passwordMapOutput) MapIndex(k pulumi.StringInput) AppConnection1passwordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnection1password {
		return vs[0].(map[string]*AppConnection1password)[vs[1].(string)]
	}).(AppConnection1passwordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnection1passwordInput)(nil)).Elem(), &AppConnection1password{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnection1passwordArrayInput)(nil)).Elem(), AppConnection1passwordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnection1passwordMapInput)(nil)).Elem(), AppConnection1passwordMap{})
	pulumi.RegisterOutputType(AppConnection1passwordOutput{})
	pulumi.RegisterOutputType(AppConnection1passwordArrayOutput{})
	pulumi.RegisterOutputType(AppConnection1passwordMapOutput{})
}
