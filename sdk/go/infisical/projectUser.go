// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectUser struct {
	pulumi.CustomResourceState

	// The membershipId of the project user
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// The id of the project
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The roles assigned to the project user
	Roles ProjectUserRoleArrayOutput `pulumi:"roles"`
	// The user details of the project user
	User ProjectUserUserOutput `pulumi:"user"`
	// The usename of the user. By default its the email
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewProjectUser registers a new resource with the given unique name, arguments, and options.
func NewProjectUser(ctx *pulumi.Context,
	name string, args *ProjectUserArgs, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectUser
	err := ctx.RegisterResource("infisical:index/projectUser:ProjectUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUser gets an existing ProjectUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUserState, opts ...pulumi.ResourceOption) (*ProjectUser, error) {
	var resource ProjectUser
	err := ctx.ReadResource("infisical:index/projectUser:ProjectUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUser resources.
type projectUserState struct {
	// The membershipId of the project user
	MembershipId *string `pulumi:"membershipId"`
	// The id of the project
	ProjectId *string `pulumi:"projectId"`
	// The roles assigned to the project user
	Roles []ProjectUserRole `pulumi:"roles"`
	// The user details of the project user
	User *ProjectUserUser `pulumi:"user"`
	// The usename of the user. By default its the email
	Username *string `pulumi:"username"`
}

type ProjectUserState struct {
	// The membershipId of the project user
	MembershipId pulumi.StringPtrInput
	// The id of the project
	ProjectId pulumi.StringPtrInput
	// The roles assigned to the project user
	Roles ProjectUserRoleArrayInput
	// The user details of the project user
	User ProjectUserUserPtrInput
	// The usename of the user. By default its the email
	Username pulumi.StringPtrInput
}

func (ProjectUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserState)(nil)).Elem()
}

type projectUserArgs struct {
	// The id of the project
	ProjectId string `pulumi:"projectId"`
	// The roles assigned to the project user
	Roles []ProjectUserRole `pulumi:"roles"`
	// The usename of the user. By default its the email
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ProjectUser resource.
type ProjectUserArgs struct {
	// The id of the project
	ProjectId pulumi.StringInput
	// The roles assigned to the project user
	Roles ProjectUserRoleArrayInput
	// The usename of the user. By default its the email
	Username pulumi.StringInput
}

func (ProjectUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserArgs)(nil)).Elem()
}

type ProjectUserInput interface {
	pulumi.Input

	ToProjectUserOutput() ProjectUserOutput
	ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput
}

func (*ProjectUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUser)(nil)).Elem()
}

func (i *ProjectUser) ToProjectUserOutput() ProjectUserOutput {
	return i.ToProjectUserOutputWithContext(context.Background())
}

func (i *ProjectUser) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserOutput)
}

// ProjectUserArrayInput is an input type that accepts ProjectUserArray and ProjectUserArrayOutput values.
// You can construct a concrete instance of `ProjectUserArrayInput` via:
//
//	ProjectUserArray{ ProjectUserArgs{...} }
type ProjectUserArrayInput interface {
	pulumi.Input

	ToProjectUserArrayOutput() ProjectUserArrayOutput
	ToProjectUserArrayOutputWithContext(context.Context) ProjectUserArrayOutput
}

type ProjectUserArray []ProjectUserInput

func (ProjectUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUser)(nil)).Elem()
}

func (i ProjectUserArray) ToProjectUserArrayOutput() ProjectUserArrayOutput {
	return i.ToProjectUserArrayOutputWithContext(context.Background())
}

func (i ProjectUserArray) ToProjectUserArrayOutputWithContext(ctx context.Context) ProjectUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserArrayOutput)
}

// ProjectUserMapInput is an input type that accepts ProjectUserMap and ProjectUserMapOutput values.
// You can construct a concrete instance of `ProjectUserMapInput` via:
//
//	ProjectUserMap{ "key": ProjectUserArgs{...} }
type ProjectUserMapInput interface {
	pulumi.Input

	ToProjectUserMapOutput() ProjectUserMapOutput
	ToProjectUserMapOutputWithContext(context.Context) ProjectUserMapOutput
}

type ProjectUserMap map[string]ProjectUserInput

func (ProjectUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUser)(nil)).Elem()
}

func (i ProjectUserMap) ToProjectUserMapOutput() ProjectUserMapOutput {
	return i.ToProjectUserMapOutputWithContext(context.Background())
}

func (i ProjectUserMap) ToProjectUserMapOutputWithContext(ctx context.Context) ProjectUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserMapOutput)
}

type ProjectUserOutput struct{ *pulumi.OutputState }

func (ProjectUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUser)(nil)).Elem()
}

func (o ProjectUserOutput) ToProjectUserOutput() ProjectUserOutput {
	return o
}

func (o ProjectUserOutput) ToProjectUserOutputWithContext(ctx context.Context) ProjectUserOutput {
	return o
}

// The membershipId of the project user
func (o ProjectUserOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The id of the project
func (o ProjectUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The roles assigned to the project user
func (o ProjectUserOutput) Roles() ProjectUserRoleArrayOutput {
	return o.ApplyT(func(v *ProjectUser) ProjectUserRoleArrayOutput { return v.Roles }).(ProjectUserRoleArrayOutput)
}

// The user details of the project user
func (o ProjectUserOutput) User() ProjectUserUserOutput {
	return o.ApplyT(func(v *ProjectUser) ProjectUserUserOutput { return v.User }).(ProjectUserUserOutput)
}

// The usename of the user. By default its the email
func (o ProjectUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ProjectUserArrayOutput struct{ *pulumi.OutputState }

func (ProjectUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUser)(nil)).Elem()
}

func (o ProjectUserArrayOutput) ToProjectUserArrayOutput() ProjectUserArrayOutput {
	return o
}

func (o ProjectUserArrayOutput) ToProjectUserArrayOutputWithContext(ctx context.Context) ProjectUserArrayOutput {
	return o
}

func (o ProjectUserArrayOutput) Index(i pulumi.IntInput) ProjectUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectUser {
		return vs[0].([]*ProjectUser)[vs[1].(int)]
	}).(ProjectUserOutput)
}

type ProjectUserMapOutput struct{ *pulumi.OutputState }

func (ProjectUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUser)(nil)).Elem()
}

func (o ProjectUserMapOutput) ToProjectUserMapOutput() ProjectUserMapOutput {
	return o
}

func (o ProjectUserMapOutput) ToProjectUserMapOutputWithContext(ctx context.Context) ProjectUserMapOutput {
	return o
}

func (o ProjectUserMapOutput) MapIndex(k pulumi.StringInput) ProjectUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectUser {
		return vs[0].(map[string]*ProjectUser)[vs[1].(string)]
	}).(ProjectUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserInput)(nil)).Elem(), &ProjectUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserArrayInput)(nil)).Elem(), ProjectUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserMapInput)(nil)).Elem(), ProjectUserMap{})
	pulumi.RegisterOutputType(ProjectUserOutput{})
	pulumi.RegisterOutputType(ProjectUserArrayOutput{})
	pulumi.RegisterOutputType(ProjectUserMapOutput{})
}
