// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncFlyio struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the flyio Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Fly.io sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncFlyioDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Fly.io sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncFlyioSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncFlyio registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncFlyio(ctx *pulumi.Context,
	name string, args *SecretSyncFlyioArgs, opts ...pulumi.ResourceOption) (*SecretSyncFlyio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncFlyio
	err := ctx.RegisterResource("infisical:index/secretSyncFlyio:SecretSyncFlyio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncFlyio gets an existing SecretSyncFlyio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncFlyio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncFlyioState, opts ...pulumi.ResourceOption) (*SecretSyncFlyio, error) {
	var resource SecretSyncFlyio
	err := ctx.ReadResource("infisical:index/secretSyncFlyio:SecretSyncFlyio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncFlyio resources.
type secretSyncFlyioState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the flyio Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Fly.io sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncFlyioDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Fly.io sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncFlyioSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncFlyioState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the flyio Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Fly.io sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncFlyioDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Fly.io sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncFlyioSyncOptionsPtrInput
}

func (SecretSyncFlyioState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncFlyioState)(nil)).Elem()
}

type secretSyncFlyioArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the flyio Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Fly.io sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncFlyioDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Fly.io sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncFlyioSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncFlyio resource.
type SecretSyncFlyioArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the flyio Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Fly.io sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncFlyioDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Fly.io sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncFlyioSyncOptionsInput
}

func (SecretSyncFlyioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncFlyioArgs)(nil)).Elem()
}

type SecretSyncFlyioInput interface {
	pulumi.Input

	ToSecretSyncFlyioOutput() SecretSyncFlyioOutput
	ToSecretSyncFlyioOutputWithContext(ctx context.Context) SecretSyncFlyioOutput
}

func (*SecretSyncFlyio) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncFlyio)(nil)).Elem()
}

func (i *SecretSyncFlyio) ToSecretSyncFlyioOutput() SecretSyncFlyioOutput {
	return i.ToSecretSyncFlyioOutputWithContext(context.Background())
}

func (i *SecretSyncFlyio) ToSecretSyncFlyioOutputWithContext(ctx context.Context) SecretSyncFlyioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncFlyioOutput)
}

// SecretSyncFlyioArrayInput is an input type that accepts SecretSyncFlyioArray and SecretSyncFlyioArrayOutput values.
// You can construct a concrete instance of `SecretSyncFlyioArrayInput` via:
//
//	SecretSyncFlyioArray{ SecretSyncFlyioArgs{...} }
type SecretSyncFlyioArrayInput interface {
	pulumi.Input

	ToSecretSyncFlyioArrayOutput() SecretSyncFlyioArrayOutput
	ToSecretSyncFlyioArrayOutputWithContext(context.Context) SecretSyncFlyioArrayOutput
}

type SecretSyncFlyioArray []SecretSyncFlyioInput

func (SecretSyncFlyioArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncFlyio)(nil)).Elem()
}

func (i SecretSyncFlyioArray) ToSecretSyncFlyioArrayOutput() SecretSyncFlyioArrayOutput {
	return i.ToSecretSyncFlyioArrayOutputWithContext(context.Background())
}

func (i SecretSyncFlyioArray) ToSecretSyncFlyioArrayOutputWithContext(ctx context.Context) SecretSyncFlyioArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncFlyioArrayOutput)
}

// SecretSyncFlyioMapInput is an input type that accepts SecretSyncFlyioMap and SecretSyncFlyioMapOutput values.
// You can construct a concrete instance of `SecretSyncFlyioMapInput` via:
//
//	SecretSyncFlyioMap{ "key": SecretSyncFlyioArgs{...} }
type SecretSyncFlyioMapInput interface {
	pulumi.Input

	ToSecretSyncFlyioMapOutput() SecretSyncFlyioMapOutput
	ToSecretSyncFlyioMapOutputWithContext(context.Context) SecretSyncFlyioMapOutput
}

type SecretSyncFlyioMap map[string]SecretSyncFlyioInput

func (SecretSyncFlyioMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncFlyio)(nil)).Elem()
}

func (i SecretSyncFlyioMap) ToSecretSyncFlyioMapOutput() SecretSyncFlyioMapOutput {
	return i.ToSecretSyncFlyioMapOutputWithContext(context.Background())
}

func (i SecretSyncFlyioMap) ToSecretSyncFlyioMapOutputWithContext(ctx context.Context) SecretSyncFlyioMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncFlyioMapOutput)
}

type SecretSyncFlyioOutput struct{ *pulumi.OutputState }

func (SecretSyncFlyioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncFlyio)(nil)).Elem()
}

func (o SecretSyncFlyioOutput) ToSecretSyncFlyioOutput() SecretSyncFlyioOutput {
	return o
}

func (o SecretSyncFlyioOutput) ToSecretSyncFlyioOutputWithContext(ctx context.Context) SecretSyncFlyioOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncFlyioOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the flyio Connection to use for syncing.
func (o SecretSyncFlyioOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Fly.io sync.
func (o SecretSyncFlyioOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncFlyioOutput) DestinationConfig() SecretSyncFlyioDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) SecretSyncFlyioDestinationConfigOutput { return v.DestinationConfig }).(SecretSyncFlyioDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncFlyioOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Fly.io sync to create. Must be slug-friendly.
func (o SecretSyncFlyioOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncFlyioOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncFlyioOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncFlyioOutput) SyncOptions() SecretSyncFlyioSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncFlyio) SecretSyncFlyioSyncOptionsOutput { return v.SyncOptions }).(SecretSyncFlyioSyncOptionsOutput)
}

type SecretSyncFlyioArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncFlyioArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncFlyio)(nil)).Elem()
}

func (o SecretSyncFlyioArrayOutput) ToSecretSyncFlyioArrayOutput() SecretSyncFlyioArrayOutput {
	return o
}

func (o SecretSyncFlyioArrayOutput) ToSecretSyncFlyioArrayOutputWithContext(ctx context.Context) SecretSyncFlyioArrayOutput {
	return o
}

func (o SecretSyncFlyioArrayOutput) Index(i pulumi.IntInput) SecretSyncFlyioOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncFlyio {
		return vs[0].([]*SecretSyncFlyio)[vs[1].(int)]
	}).(SecretSyncFlyioOutput)
}

type SecretSyncFlyioMapOutput struct{ *pulumi.OutputState }

func (SecretSyncFlyioMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncFlyio)(nil)).Elem()
}

func (o SecretSyncFlyioMapOutput) ToSecretSyncFlyioMapOutput() SecretSyncFlyioMapOutput {
	return o
}

func (o SecretSyncFlyioMapOutput) ToSecretSyncFlyioMapOutputWithContext(ctx context.Context) SecretSyncFlyioMapOutput {
	return o
}

func (o SecretSyncFlyioMapOutput) MapIndex(k pulumi.StringInput) SecretSyncFlyioOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncFlyio {
		return vs[0].(map[string]*SecretSyncFlyio)[vs[1].(string)]
	}).(SecretSyncFlyioOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncFlyioInput)(nil)).Elem(), &SecretSyncFlyio{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncFlyioArrayInput)(nil)).Elem(), SecretSyncFlyioArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncFlyioMapInput)(nil)).Elem(), SecretSyncFlyioMap{})
	pulumi.RegisterOutputType(SecretSyncFlyioOutput{})
	pulumi.RegisterOutputType(SecretSyncFlyioArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncFlyioMapOutput{})
}
