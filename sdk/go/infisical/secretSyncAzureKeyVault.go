// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretSyncAzureKeyVault struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolOutput `pulumi:"autoSyncEnabled"`
	// The ID of the azure Connection to use for syncing.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// An optional description for the Azure Key Vault sync.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncAzureKeyVaultDestinationConfigOutput `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the Azure Key Vault sync to create. Must be slug-friendly.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncAzureKeyVaultSyncOptionsOutput `pulumi:"syncOptions"`
}

// NewSecretSyncAzureKeyVault registers a new resource with the given unique name, arguments, and options.
func NewSecretSyncAzureKeyVault(ctx *pulumi.Context,
	name string, args *SecretSyncAzureKeyVaultArgs, opts ...pulumi.ResourceOption) (*SecretSyncAzureKeyVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DestinationConfig == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfig'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SyncOptions == nil {
		return nil, errors.New("invalid value for required argument 'SyncOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretSyncAzureKeyVault
	err := ctx.RegisterResource("infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSyncAzureKeyVault gets an existing SecretSyncAzureKeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSyncAzureKeyVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSyncAzureKeyVaultState, opts ...pulumi.ResourceOption) (*SecretSyncAzureKeyVault, error) {
	var resource SecretSyncAzureKeyVault
	err := ctx.ReadResource("infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSyncAzureKeyVault resources.
type secretSyncAzureKeyVaultState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the azure Connection to use for syncing.
	ConnectionId *string `pulumi:"connectionId"`
	// An optional description for the Azure Key Vault sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig *SecretSyncAzureKeyVaultDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the Azure Key Vault sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId *string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions *SecretSyncAzureKeyVaultSyncOptions `pulumi:"syncOptions"`
}

type SecretSyncAzureKeyVaultState struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the azure Connection to use for syncing.
	ConnectionId pulumi.StringPtrInput
	// An optional description for the Azure Key Vault sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncAzureKeyVaultDestinationConfigPtrInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringPtrInput
	// The name of the Azure Key Vault sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringPtrInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncAzureKeyVaultSyncOptionsPtrInput
}

func (SecretSyncAzureKeyVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncAzureKeyVaultState)(nil)).Elem()
}

type secretSyncAzureKeyVaultArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `pulumi:"autoSyncEnabled"`
	// The ID of the azure Connection to use for syncing.
	ConnectionId string `pulumi:"connectionId"`
	// An optional description for the Azure Key Vault sync.
	Description *string `pulumi:"description"`
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncAzureKeyVaultDestinationConfig `pulumi:"destinationConfig"`
	// The slug of the project environment to sync secrets from.
	Environment string `pulumi:"environment"`
	// The name of the Azure Key Vault sync to create. Must be slug-friendly.
	Name *string `pulumi:"name"`
	// The ID of the Infisical project to create the sync in.
	ProjectId string `pulumi:"projectId"`
	// The folder path to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncAzureKeyVaultSyncOptions `pulumi:"syncOptions"`
}

// The set of arguments for constructing a SecretSyncAzureKeyVault resource.
type SecretSyncAzureKeyVaultArgs struct {
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled pulumi.BoolPtrInput
	// The ID of the azure Connection to use for syncing.
	ConnectionId pulumi.StringInput
	// An optional description for the Azure Key Vault sync.
	Description pulumi.StringPtrInput
	// The destination configuration for the secret sync.
	DestinationConfig SecretSyncAzureKeyVaultDestinationConfigInput
	// The slug of the project environment to sync secrets from.
	Environment pulumi.StringInput
	// The name of the Azure Key Vault sync to create. Must be slug-friendly.
	Name pulumi.StringPtrInput
	// The ID of the Infisical project to create the sync in.
	ProjectId pulumi.StringInput
	// The folder path to sync secrets from.
	SecretPath pulumi.StringInput
	// Parameters to modify how secrets are synced.
	SyncOptions SecretSyncAzureKeyVaultSyncOptionsInput
}

func (SecretSyncAzureKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSyncAzureKeyVaultArgs)(nil)).Elem()
}

type SecretSyncAzureKeyVaultInput interface {
	pulumi.Input

	ToSecretSyncAzureKeyVaultOutput() SecretSyncAzureKeyVaultOutput
	ToSecretSyncAzureKeyVaultOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultOutput
}

func (*SecretSyncAzureKeyVault) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncAzureKeyVault)(nil)).Elem()
}

func (i *SecretSyncAzureKeyVault) ToSecretSyncAzureKeyVaultOutput() SecretSyncAzureKeyVaultOutput {
	return i.ToSecretSyncAzureKeyVaultOutputWithContext(context.Background())
}

func (i *SecretSyncAzureKeyVault) ToSecretSyncAzureKeyVaultOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncAzureKeyVaultOutput)
}

// SecretSyncAzureKeyVaultArrayInput is an input type that accepts SecretSyncAzureKeyVaultArray and SecretSyncAzureKeyVaultArrayOutput values.
// You can construct a concrete instance of `SecretSyncAzureKeyVaultArrayInput` via:
//
//	SecretSyncAzureKeyVaultArray{ SecretSyncAzureKeyVaultArgs{...} }
type SecretSyncAzureKeyVaultArrayInput interface {
	pulumi.Input

	ToSecretSyncAzureKeyVaultArrayOutput() SecretSyncAzureKeyVaultArrayOutput
	ToSecretSyncAzureKeyVaultArrayOutputWithContext(context.Context) SecretSyncAzureKeyVaultArrayOutput
}

type SecretSyncAzureKeyVaultArray []SecretSyncAzureKeyVaultInput

func (SecretSyncAzureKeyVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncAzureKeyVault)(nil)).Elem()
}

func (i SecretSyncAzureKeyVaultArray) ToSecretSyncAzureKeyVaultArrayOutput() SecretSyncAzureKeyVaultArrayOutput {
	return i.ToSecretSyncAzureKeyVaultArrayOutputWithContext(context.Background())
}

func (i SecretSyncAzureKeyVaultArray) ToSecretSyncAzureKeyVaultArrayOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncAzureKeyVaultArrayOutput)
}

// SecretSyncAzureKeyVaultMapInput is an input type that accepts SecretSyncAzureKeyVaultMap and SecretSyncAzureKeyVaultMapOutput values.
// You can construct a concrete instance of `SecretSyncAzureKeyVaultMapInput` via:
//
//	SecretSyncAzureKeyVaultMap{ "key": SecretSyncAzureKeyVaultArgs{...} }
type SecretSyncAzureKeyVaultMapInput interface {
	pulumi.Input

	ToSecretSyncAzureKeyVaultMapOutput() SecretSyncAzureKeyVaultMapOutput
	ToSecretSyncAzureKeyVaultMapOutputWithContext(context.Context) SecretSyncAzureKeyVaultMapOutput
}

type SecretSyncAzureKeyVaultMap map[string]SecretSyncAzureKeyVaultInput

func (SecretSyncAzureKeyVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncAzureKeyVault)(nil)).Elem()
}

func (i SecretSyncAzureKeyVaultMap) ToSecretSyncAzureKeyVaultMapOutput() SecretSyncAzureKeyVaultMapOutput {
	return i.ToSecretSyncAzureKeyVaultMapOutputWithContext(context.Background())
}

func (i SecretSyncAzureKeyVaultMap) ToSecretSyncAzureKeyVaultMapOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSyncAzureKeyVaultMapOutput)
}

type SecretSyncAzureKeyVaultOutput struct{ *pulumi.OutputState }

func (SecretSyncAzureKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSyncAzureKeyVault)(nil)).Elem()
}

func (o SecretSyncAzureKeyVaultOutput) ToSecretSyncAzureKeyVaultOutput() SecretSyncAzureKeyVaultOutput {
	return o
}

func (o SecretSyncAzureKeyVaultOutput) ToSecretSyncAzureKeyVaultOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultOutput {
	return o
}

// Whether secrets should be automatically synced when changes occur at the source location or not.
func (o SecretSyncAzureKeyVaultOutput) AutoSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.BoolOutput { return v.AutoSyncEnabled }).(pulumi.BoolOutput)
}

// The ID of the azure Connection to use for syncing.
func (o SecretSyncAzureKeyVaultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// An optional description for the Azure Key Vault sync.
func (o SecretSyncAzureKeyVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination configuration for the secret sync.
func (o SecretSyncAzureKeyVaultOutput) DestinationConfig() SecretSyncAzureKeyVaultDestinationConfigOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) SecretSyncAzureKeyVaultDestinationConfigOutput {
		return v.DestinationConfig
	}).(SecretSyncAzureKeyVaultDestinationConfigOutput)
}

// The slug of the project environment to sync secrets from.
func (o SecretSyncAzureKeyVaultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the Azure Key Vault sync to create. Must be slug-friendly.
func (o SecretSyncAzureKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Infisical project to create the sync in.
func (o SecretSyncAzureKeyVaultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The folder path to sync secrets from.
func (o SecretSyncAzureKeyVaultOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are synced.
func (o SecretSyncAzureKeyVaultOutput) SyncOptions() SecretSyncAzureKeyVaultSyncOptionsOutput {
	return o.ApplyT(func(v *SecretSyncAzureKeyVault) SecretSyncAzureKeyVaultSyncOptionsOutput { return v.SyncOptions }).(SecretSyncAzureKeyVaultSyncOptionsOutput)
}

type SecretSyncAzureKeyVaultArrayOutput struct{ *pulumi.OutputState }

func (SecretSyncAzureKeyVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSyncAzureKeyVault)(nil)).Elem()
}

func (o SecretSyncAzureKeyVaultArrayOutput) ToSecretSyncAzureKeyVaultArrayOutput() SecretSyncAzureKeyVaultArrayOutput {
	return o
}

func (o SecretSyncAzureKeyVaultArrayOutput) ToSecretSyncAzureKeyVaultArrayOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultArrayOutput {
	return o
}

func (o SecretSyncAzureKeyVaultArrayOutput) Index(i pulumi.IntInput) SecretSyncAzureKeyVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSyncAzureKeyVault {
		return vs[0].([]*SecretSyncAzureKeyVault)[vs[1].(int)]
	}).(SecretSyncAzureKeyVaultOutput)
}

type SecretSyncAzureKeyVaultMapOutput struct{ *pulumi.OutputState }

func (SecretSyncAzureKeyVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSyncAzureKeyVault)(nil)).Elem()
}

func (o SecretSyncAzureKeyVaultMapOutput) ToSecretSyncAzureKeyVaultMapOutput() SecretSyncAzureKeyVaultMapOutput {
	return o
}

func (o SecretSyncAzureKeyVaultMapOutput) ToSecretSyncAzureKeyVaultMapOutputWithContext(ctx context.Context) SecretSyncAzureKeyVaultMapOutput {
	return o
}

func (o SecretSyncAzureKeyVaultMapOutput) MapIndex(k pulumi.StringInput) SecretSyncAzureKeyVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSyncAzureKeyVault {
		return vs[0].(map[string]*SecretSyncAzureKeyVault)[vs[1].(string)]
	}).(SecretSyncAzureKeyVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncAzureKeyVaultInput)(nil)).Elem(), &SecretSyncAzureKeyVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncAzureKeyVaultArrayInput)(nil)).Elem(), SecretSyncAzureKeyVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSyncAzureKeyVaultMapInput)(nil)).Elem(), SecretSyncAzureKeyVaultMap{})
	pulumi.RegisterOutputType(SecretSyncAzureKeyVaultOutput{})
	pulumi.RegisterOutputType(SecretSyncAzureKeyVaultArrayOutput{})
	pulumi.RegisterOutputType(SecretSyncAzureKeyVaultMapOutput{})
}
