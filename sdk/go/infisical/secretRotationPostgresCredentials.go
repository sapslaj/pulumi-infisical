// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationPostgresCredentials struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationPostgresCredentialsParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationPostgresCredentialsRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationPostgresCredentialsSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationPostgresCredentialsTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationPostgresCredentials registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationPostgresCredentials(ctx *pulumi.Context,
	name string, args *SecretRotationPostgresCredentialsArgs, opts ...pulumi.ResourceOption) (*SecretRotationPostgresCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationPostgresCredentials
	err := ctx.RegisterResource("infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationPostgresCredentials gets an existing SecretRotationPostgresCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationPostgresCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationPostgresCredentialsState, opts ...pulumi.ResourceOption) (*SecretRotationPostgresCredentials, error) {
	var resource SecretRotationPostgresCredentials
	err := ctx.ReadResource("infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationPostgresCredentials resources.
type secretRotationPostgresCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationPostgresCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationPostgresCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationPostgresCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationPostgresCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationPostgresCredentialsState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationPostgresCredentialsParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationPostgresCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationPostgresCredentialsSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationPostgresCredentialsTemporaryParametersPtrInput
}

func (SecretRotationPostgresCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationPostgresCredentialsState)(nil)).Elem()
}

type secretRotationPostgresCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationPostgresCredentialsParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationPostgresCredentialsRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationPostgresCredentialsSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationPostgresCredentialsTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationPostgresCredentials resource.
type SecretRotationPostgresCredentialsArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationPostgresCredentialsParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationPostgresCredentialsRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationPostgresCredentialsSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationPostgresCredentialsTemporaryParametersPtrInput
}

func (SecretRotationPostgresCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationPostgresCredentialsArgs)(nil)).Elem()
}

type SecretRotationPostgresCredentialsInput interface {
	pulumi.Input

	ToSecretRotationPostgresCredentialsOutput() SecretRotationPostgresCredentialsOutput
	ToSecretRotationPostgresCredentialsOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsOutput
}

func (*SecretRotationPostgresCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationPostgresCredentials)(nil)).Elem()
}

func (i *SecretRotationPostgresCredentials) ToSecretRotationPostgresCredentialsOutput() SecretRotationPostgresCredentialsOutput {
	return i.ToSecretRotationPostgresCredentialsOutputWithContext(context.Background())
}

func (i *SecretRotationPostgresCredentials) ToSecretRotationPostgresCredentialsOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationPostgresCredentialsOutput)
}

// SecretRotationPostgresCredentialsArrayInput is an input type that accepts SecretRotationPostgresCredentialsArray and SecretRotationPostgresCredentialsArrayOutput values.
// You can construct a concrete instance of `SecretRotationPostgresCredentialsArrayInput` via:
//
//	SecretRotationPostgresCredentialsArray{ SecretRotationPostgresCredentialsArgs{...} }
type SecretRotationPostgresCredentialsArrayInput interface {
	pulumi.Input

	ToSecretRotationPostgresCredentialsArrayOutput() SecretRotationPostgresCredentialsArrayOutput
	ToSecretRotationPostgresCredentialsArrayOutputWithContext(context.Context) SecretRotationPostgresCredentialsArrayOutput
}

type SecretRotationPostgresCredentialsArray []SecretRotationPostgresCredentialsInput

func (SecretRotationPostgresCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationPostgresCredentials)(nil)).Elem()
}

func (i SecretRotationPostgresCredentialsArray) ToSecretRotationPostgresCredentialsArrayOutput() SecretRotationPostgresCredentialsArrayOutput {
	return i.ToSecretRotationPostgresCredentialsArrayOutputWithContext(context.Background())
}

func (i SecretRotationPostgresCredentialsArray) ToSecretRotationPostgresCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationPostgresCredentialsArrayOutput)
}

// SecretRotationPostgresCredentialsMapInput is an input type that accepts SecretRotationPostgresCredentialsMap and SecretRotationPostgresCredentialsMapOutput values.
// You can construct a concrete instance of `SecretRotationPostgresCredentialsMapInput` via:
//
//	SecretRotationPostgresCredentialsMap{ "key": SecretRotationPostgresCredentialsArgs{...} }
type SecretRotationPostgresCredentialsMapInput interface {
	pulumi.Input

	ToSecretRotationPostgresCredentialsMapOutput() SecretRotationPostgresCredentialsMapOutput
	ToSecretRotationPostgresCredentialsMapOutputWithContext(context.Context) SecretRotationPostgresCredentialsMapOutput
}

type SecretRotationPostgresCredentialsMap map[string]SecretRotationPostgresCredentialsInput

func (SecretRotationPostgresCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationPostgresCredentials)(nil)).Elem()
}

func (i SecretRotationPostgresCredentialsMap) ToSecretRotationPostgresCredentialsMapOutput() SecretRotationPostgresCredentialsMapOutput {
	return i.ToSecretRotationPostgresCredentialsMapOutputWithContext(context.Background())
}

func (i SecretRotationPostgresCredentialsMap) ToSecretRotationPostgresCredentialsMapOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationPostgresCredentialsMapOutput)
}

type SecretRotationPostgresCredentialsOutput struct{ *pulumi.OutputState }

func (SecretRotationPostgresCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationPostgresCredentials)(nil)).Elem()
}

func (o SecretRotationPostgresCredentialsOutput) ToSecretRotationPostgresCredentialsOutput() SecretRotationPostgresCredentialsOutput {
	return o
}

func (o SecretRotationPostgresCredentialsOutput) ToSecretRotationPostgresCredentialsOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationPostgresCredentialsOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationPostgresCredentialsOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationPostgresCredentialsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationPostgresCredentialsOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationPostgresCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationPostgresCredentialsOutput) Parameters() SecretRotationPostgresCredentialsParametersOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) SecretRotationPostgresCredentialsParametersOutput {
		return v.Parameters
	}).(SecretRotationPostgresCredentialsParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationPostgresCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationPostgresCredentialsOutput) RotateAtUtc() SecretRotationPostgresCredentialsRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) SecretRotationPostgresCredentialsRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationPostgresCredentialsRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationPostgresCredentialsOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationPostgresCredentialsOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationPostgresCredentialsOutput) SecretsMapping() SecretRotationPostgresCredentialsSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) SecretRotationPostgresCredentialsSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationPostgresCredentialsSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationPostgresCredentialsOutput) TemporaryParameters() SecretRotationPostgresCredentialsTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationPostgresCredentials) SecretRotationPostgresCredentialsTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationPostgresCredentialsTemporaryParametersPtrOutput)
}

type SecretRotationPostgresCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationPostgresCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationPostgresCredentials)(nil)).Elem()
}

func (o SecretRotationPostgresCredentialsArrayOutput) ToSecretRotationPostgresCredentialsArrayOutput() SecretRotationPostgresCredentialsArrayOutput {
	return o
}

func (o SecretRotationPostgresCredentialsArrayOutput) ToSecretRotationPostgresCredentialsArrayOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsArrayOutput {
	return o
}

func (o SecretRotationPostgresCredentialsArrayOutput) Index(i pulumi.IntInput) SecretRotationPostgresCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationPostgresCredentials {
		return vs[0].([]*SecretRotationPostgresCredentials)[vs[1].(int)]
	}).(SecretRotationPostgresCredentialsOutput)
}

type SecretRotationPostgresCredentialsMapOutput struct{ *pulumi.OutputState }

func (SecretRotationPostgresCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationPostgresCredentials)(nil)).Elem()
}

func (o SecretRotationPostgresCredentialsMapOutput) ToSecretRotationPostgresCredentialsMapOutput() SecretRotationPostgresCredentialsMapOutput {
	return o
}

func (o SecretRotationPostgresCredentialsMapOutput) ToSecretRotationPostgresCredentialsMapOutputWithContext(ctx context.Context) SecretRotationPostgresCredentialsMapOutput {
	return o
}

func (o SecretRotationPostgresCredentialsMapOutput) MapIndex(k pulumi.StringInput) SecretRotationPostgresCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationPostgresCredentials {
		return vs[0].(map[string]*SecretRotationPostgresCredentials)[vs[1].(string)]
	}).(SecretRotationPostgresCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationPostgresCredentialsInput)(nil)).Elem(), &SecretRotationPostgresCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationPostgresCredentialsArrayInput)(nil)).Elem(), SecretRotationPostgresCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationPostgresCredentialsMapInput)(nil)).Elem(), SecretRotationPostgresCredentialsMap{})
	pulumi.RegisterOutputType(SecretRotationPostgresCredentialsOutput{})
	pulumi.RegisterOutputType(SecretRotationPostgresCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationPostgresCredentialsMapOutput{})
}
