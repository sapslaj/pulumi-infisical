// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionLdap struct {
	pulumi.CustomResourceState

	// The credentials for the LDAP App Connection
	Credentials AppConnectionLdapCredentialsOutput `pulumi:"credentials"`
	// The hash of the LDAP App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the LDAP App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with LDAP. Possible values are: simple-bind
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the LDAP App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionLdap registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionLdap(ctx *pulumi.Context,
	name string, args *AppConnectionLdapArgs, opts ...pulumi.ResourceOption) (*AppConnectionLdap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionLdap
	err := ctx.RegisterResource("infisical:index/appConnectionLdap:AppConnectionLdap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionLdap gets an existing AppConnectionLdap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionLdap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionLdapState, opts ...pulumi.ResourceOption) (*AppConnectionLdap, error) {
	var resource AppConnectionLdap
	err := ctx.ReadResource("infisical:index/appConnectionLdap:AppConnectionLdap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionLdap resources.
type appConnectionLdapState struct {
	// The credentials for the LDAP App Connection
	Credentials *AppConnectionLdapCredentials `pulumi:"credentials"`
	// The hash of the LDAP App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the LDAP App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with LDAP. Possible values are: simple-bind
	Method *string `pulumi:"method"`
	// The name of the LDAP App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionLdapState struct {
	// The credentials for the LDAP App Connection
	Credentials AppConnectionLdapCredentialsPtrInput
	// The hash of the LDAP App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the LDAP App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with LDAP. Possible values are: simple-bind
	Method pulumi.StringPtrInput
	// The name of the LDAP App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionLdapState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionLdapState)(nil)).Elem()
}

type appConnectionLdapArgs struct {
	// The credentials for the LDAP App Connection
	Credentials AppConnectionLdapCredentials `pulumi:"credentials"`
	// An optional description for the LDAP App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with LDAP. Possible values are: simple-bind
	Method string `pulumi:"method"`
	// The name of the LDAP App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionLdap resource.
type AppConnectionLdapArgs struct {
	// The credentials for the LDAP App Connection
	Credentials AppConnectionLdapCredentialsInput
	// An optional description for the LDAP App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with LDAP. Possible values are: simple-bind
	Method pulumi.StringInput
	// The name of the LDAP App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionLdapArgs)(nil)).Elem()
}

type AppConnectionLdapInput interface {
	pulumi.Input

	ToAppConnectionLdapOutput() AppConnectionLdapOutput
	ToAppConnectionLdapOutputWithContext(ctx context.Context) AppConnectionLdapOutput
}

func (*AppConnectionLdap) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionLdap)(nil)).Elem()
}

func (i *AppConnectionLdap) ToAppConnectionLdapOutput() AppConnectionLdapOutput {
	return i.ToAppConnectionLdapOutputWithContext(context.Background())
}

func (i *AppConnectionLdap) ToAppConnectionLdapOutputWithContext(ctx context.Context) AppConnectionLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionLdapOutput)
}

// AppConnectionLdapArrayInput is an input type that accepts AppConnectionLdapArray and AppConnectionLdapArrayOutput values.
// You can construct a concrete instance of `AppConnectionLdapArrayInput` via:
//
//	AppConnectionLdapArray{ AppConnectionLdapArgs{...} }
type AppConnectionLdapArrayInput interface {
	pulumi.Input

	ToAppConnectionLdapArrayOutput() AppConnectionLdapArrayOutput
	ToAppConnectionLdapArrayOutputWithContext(context.Context) AppConnectionLdapArrayOutput
}

type AppConnectionLdapArray []AppConnectionLdapInput

func (AppConnectionLdapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionLdap)(nil)).Elem()
}

func (i AppConnectionLdapArray) ToAppConnectionLdapArrayOutput() AppConnectionLdapArrayOutput {
	return i.ToAppConnectionLdapArrayOutputWithContext(context.Background())
}

func (i AppConnectionLdapArray) ToAppConnectionLdapArrayOutputWithContext(ctx context.Context) AppConnectionLdapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionLdapArrayOutput)
}

// AppConnectionLdapMapInput is an input type that accepts AppConnectionLdapMap and AppConnectionLdapMapOutput values.
// You can construct a concrete instance of `AppConnectionLdapMapInput` via:
//
//	AppConnectionLdapMap{ "key": AppConnectionLdapArgs{...} }
type AppConnectionLdapMapInput interface {
	pulumi.Input

	ToAppConnectionLdapMapOutput() AppConnectionLdapMapOutput
	ToAppConnectionLdapMapOutputWithContext(context.Context) AppConnectionLdapMapOutput
}

type AppConnectionLdapMap map[string]AppConnectionLdapInput

func (AppConnectionLdapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionLdap)(nil)).Elem()
}

func (i AppConnectionLdapMap) ToAppConnectionLdapMapOutput() AppConnectionLdapMapOutput {
	return i.ToAppConnectionLdapMapOutputWithContext(context.Background())
}

func (i AppConnectionLdapMap) ToAppConnectionLdapMapOutputWithContext(ctx context.Context) AppConnectionLdapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionLdapMapOutput)
}

type AppConnectionLdapOutput struct{ *pulumi.OutputState }

func (AppConnectionLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionLdap)(nil)).Elem()
}

func (o AppConnectionLdapOutput) ToAppConnectionLdapOutput() AppConnectionLdapOutput {
	return o
}

func (o AppConnectionLdapOutput) ToAppConnectionLdapOutputWithContext(ctx context.Context) AppConnectionLdapOutput {
	return o
}

// The credentials for the LDAP App Connection
func (o AppConnectionLdapOutput) Credentials() AppConnectionLdapCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionLdap) AppConnectionLdapCredentialsOutput { return v.Credentials }).(AppConnectionLdapCredentialsOutput)
}

// The hash of the LDAP App Connection credentials
func (o AppConnectionLdapOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionLdap) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the LDAP App Connection.
func (o AppConnectionLdapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionLdap) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with LDAP. Possible values are: simple-bind
func (o AppConnectionLdapOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionLdap) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the LDAP App Connection to create. Must be slug-friendly
func (o AppConnectionLdapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionLdap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionLdapArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionLdapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionLdap)(nil)).Elem()
}

func (o AppConnectionLdapArrayOutput) ToAppConnectionLdapArrayOutput() AppConnectionLdapArrayOutput {
	return o
}

func (o AppConnectionLdapArrayOutput) ToAppConnectionLdapArrayOutputWithContext(ctx context.Context) AppConnectionLdapArrayOutput {
	return o
}

func (o AppConnectionLdapArrayOutput) Index(i pulumi.IntInput) AppConnectionLdapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionLdap {
		return vs[0].([]*AppConnectionLdap)[vs[1].(int)]
	}).(AppConnectionLdapOutput)
}

type AppConnectionLdapMapOutput struct{ *pulumi.OutputState }

func (AppConnectionLdapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionLdap)(nil)).Elem()
}

func (o AppConnectionLdapMapOutput) ToAppConnectionLdapMapOutput() AppConnectionLdapMapOutput {
	return o
}

func (o AppConnectionLdapMapOutput) ToAppConnectionLdapMapOutputWithContext(ctx context.Context) AppConnectionLdapMapOutput {
	return o
}

func (o AppConnectionLdapMapOutput) MapIndex(k pulumi.StringInput) AppConnectionLdapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionLdap {
		return vs[0].(map[string]*AppConnectionLdap)[vs[1].(string)]
	}).(AppConnectionLdapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionLdapInput)(nil)).Elem(), &AppConnectionLdap{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionLdapArrayInput)(nil)).Elem(), AppConnectionLdapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionLdapMapInput)(nil)).Elem(), AppConnectionLdapMap{})
	pulumi.RegisterOutputType(AppConnectionLdapOutput{})
	pulumi.RegisterOutputType(AppConnectionLdapArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionLdapMapOutput{})
}
