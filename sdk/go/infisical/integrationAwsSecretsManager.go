// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IntegrationAwsSecretsManager struct {
	pulumi.CustomResourceState

	// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrOutput `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrOutput `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringOutput `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringOutput `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
	MappingBehavior pulumi.StringOutput `pulumi:"mappingBehavior"`
	// Integration options
	Options IntegrationAwsSecretsManagerOptionsOutput `pulumi:"options"`
	// The ID of your Infisical project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrOutput `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
	SecretsManagerPath pulumi.StringPtrOutput `pulumi:"secretsManagerPath"`
}

// NewIntegrationAwsSecretsManager registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAwsSecretsManager(ctx *pulumi.Context,
	name string, args *IntegrationAwsSecretsManagerArgs, opts ...pulumi.ResourceOption) (*IntegrationAwsSecretsManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRegion == nil {
		return nil, errors.New("invalid value for required argument 'AwsRegion'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.AccessKeyId != nil {
		args.AccessKeyId = pulumi.ToSecret(args.AccessKeyId).(pulumi.StringPtrInput)
	}
	if args.SecretAccessKey != nil {
		args.SecretAccessKey = pulumi.ToSecret(args.SecretAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKeyId",
		"secretAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAwsSecretsManager
	err := ctx.RegisterResource("infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAwsSecretsManager gets an existing IntegrationAwsSecretsManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAwsSecretsManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAwsSecretsManagerState, opts ...pulumi.ResourceOption) (*IntegrationAwsSecretsManager, error) {
	var resource IntegrationAwsSecretsManager
	err := ctx.ReadResource("infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAwsSecretsManager resources.
type integrationAwsSecretsManagerState struct {
	// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion *string `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
	Environment *string `pulumi:"environment"`
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId *string `pulumi:"integrationAuthId"`
	// The ID of the integration, used internally by Infisical.
	IntegrationId *string `pulumi:"integrationId"`
	// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
	MappingBehavior *string `pulumi:"mappingBehavior"`
	// Integration options
	Options *IntegrationAwsSecretsManagerOptions `pulumi:"options"`
	// The ID of your Infisical project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
	SecretsManagerPath *string `pulumi:"secretsManagerPath"`
}

type IntegrationAwsSecretsManagerState struct {
	// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrInput
	// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrInput
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringPtrInput
	// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
	Environment pulumi.StringPtrInput
	// The ID of the integration auth, used internally by Infisical.
	IntegrationAuthId pulumi.StringPtrInput
	// The ID of the integration, used internally by Infisical.
	IntegrationId pulumi.StringPtrInput
	// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
	MappingBehavior pulumi.StringPtrInput
	// Integration options
	Options IntegrationAwsSecretsManagerOptionsPtrInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringPtrInput
	// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringPtrInput
	// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
	SecretsManagerPath pulumi.StringPtrInput
}

func (IntegrationAwsSecretsManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAwsSecretsManagerState)(nil)).Elem()
}

type integrationAwsSecretsManagerArgs struct {
	// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion string `pulumi:"awsRegion"`
	// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
	Environment string `pulumi:"environment"`
	// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
	MappingBehavior *string `pulumi:"mappingBehavior"`
	// Integration options
	Options *IntegrationAwsSecretsManagerOptions `pulumi:"options"`
	// The ID of your Infisical project.
	ProjectId string `pulumi:"projectId"`
	// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The secret path in Infisical to sync secrets from.
	SecretPath string `pulumi:"secretPath"`
	// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
	SecretsManagerPath *string `pulumi:"secretsManagerPath"`
}

// The set of arguments for constructing a IntegrationAwsSecretsManager resource.
type IntegrationAwsSecretsManagerArgs struct {
	// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AccessKeyId pulumi.StringPtrInput
	// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	AssumeRoleArn pulumi.StringPtrInput
	// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
	AwsRegion pulumi.StringInput
	// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
	Environment pulumi.StringInput
	// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
	MappingBehavior pulumi.StringPtrInput
	// Integration options
	Options IntegrationAwsSecretsManagerOptionsPtrInput
	// The ID of your Infisical project.
	ProjectId pulumi.StringInput
	// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
	SecretAccessKey pulumi.StringPtrInput
	// The secret path in Infisical to sync secrets from.
	SecretPath pulumi.StringInput
	// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
	SecretsManagerPath pulumi.StringPtrInput
}

func (IntegrationAwsSecretsManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAwsSecretsManagerArgs)(nil)).Elem()
}

type IntegrationAwsSecretsManagerInput interface {
	pulumi.Input

	ToIntegrationAwsSecretsManagerOutput() IntegrationAwsSecretsManagerOutput
	ToIntegrationAwsSecretsManagerOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerOutput
}

func (*IntegrationAwsSecretsManager) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAwsSecretsManager)(nil)).Elem()
}

func (i *IntegrationAwsSecretsManager) ToIntegrationAwsSecretsManagerOutput() IntegrationAwsSecretsManagerOutput {
	return i.ToIntegrationAwsSecretsManagerOutputWithContext(context.Background())
}

func (i *IntegrationAwsSecretsManager) ToIntegrationAwsSecretsManagerOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsSecretsManagerOutput)
}

// IntegrationAwsSecretsManagerArrayInput is an input type that accepts IntegrationAwsSecretsManagerArray and IntegrationAwsSecretsManagerArrayOutput values.
// You can construct a concrete instance of `IntegrationAwsSecretsManagerArrayInput` via:
//
//	IntegrationAwsSecretsManagerArray{ IntegrationAwsSecretsManagerArgs{...} }
type IntegrationAwsSecretsManagerArrayInput interface {
	pulumi.Input

	ToIntegrationAwsSecretsManagerArrayOutput() IntegrationAwsSecretsManagerArrayOutput
	ToIntegrationAwsSecretsManagerArrayOutputWithContext(context.Context) IntegrationAwsSecretsManagerArrayOutput
}

type IntegrationAwsSecretsManagerArray []IntegrationAwsSecretsManagerInput

func (IntegrationAwsSecretsManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAwsSecretsManager)(nil)).Elem()
}

func (i IntegrationAwsSecretsManagerArray) ToIntegrationAwsSecretsManagerArrayOutput() IntegrationAwsSecretsManagerArrayOutput {
	return i.ToIntegrationAwsSecretsManagerArrayOutputWithContext(context.Background())
}

func (i IntegrationAwsSecretsManagerArray) ToIntegrationAwsSecretsManagerArrayOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsSecretsManagerArrayOutput)
}

// IntegrationAwsSecretsManagerMapInput is an input type that accepts IntegrationAwsSecretsManagerMap and IntegrationAwsSecretsManagerMapOutput values.
// You can construct a concrete instance of `IntegrationAwsSecretsManagerMapInput` via:
//
//	IntegrationAwsSecretsManagerMap{ "key": IntegrationAwsSecretsManagerArgs{...} }
type IntegrationAwsSecretsManagerMapInput interface {
	pulumi.Input

	ToIntegrationAwsSecretsManagerMapOutput() IntegrationAwsSecretsManagerMapOutput
	ToIntegrationAwsSecretsManagerMapOutputWithContext(context.Context) IntegrationAwsSecretsManagerMapOutput
}

type IntegrationAwsSecretsManagerMap map[string]IntegrationAwsSecretsManagerInput

func (IntegrationAwsSecretsManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAwsSecretsManager)(nil)).Elem()
}

func (i IntegrationAwsSecretsManagerMap) ToIntegrationAwsSecretsManagerMapOutput() IntegrationAwsSecretsManagerMapOutput {
	return i.ToIntegrationAwsSecretsManagerMapOutputWithContext(context.Background())
}

func (i IntegrationAwsSecretsManagerMap) ToIntegrationAwsSecretsManagerMapOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAwsSecretsManagerMapOutput)
}

type IntegrationAwsSecretsManagerOutput struct{ *pulumi.OutputState }

func (IntegrationAwsSecretsManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAwsSecretsManager)(nil)).Elem()
}

func (o IntegrationAwsSecretsManagerOutput) ToIntegrationAwsSecretsManagerOutput() IntegrationAwsSecretsManagerOutput {
	return o
}

func (o IntegrationAwsSecretsManagerOutput) ToIntegrationAwsSecretsManagerOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerOutput {
	return o
}

// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsSecretsManagerOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringPtrOutput { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsSecretsManagerOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringPtrOutput { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
func (o IntegrationAwsSecretsManagerOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.AwsRegion }).(pulumi.StringOutput)
}

// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
func (o IntegrationAwsSecretsManagerOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the integration auth, used internally by Infisical.
func (o IntegrationAwsSecretsManagerOutput) IntegrationAuthId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.IntegrationAuthId }).(pulumi.StringOutput)
}

// The ID of the integration, used internally by Infisical.
func (o IntegrationAwsSecretsManagerOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
func (o IntegrationAwsSecretsManagerOutput) MappingBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.MappingBehavior }).(pulumi.StringOutput)
}

// Integration options
func (o IntegrationAwsSecretsManagerOutput) Options() IntegrationAwsSecretsManagerOptionsOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) IntegrationAwsSecretsManagerOptionsOutput { return v.Options }).(IntegrationAwsSecretsManagerOptionsOutput)
}

// The ID of your Infisical project.
func (o IntegrationAwsSecretsManagerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secretAccessKey and access_key_id, or set assumeRoleArn to assume a role.
func (o IntegrationAwsSecretsManagerOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringPtrOutput { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// The secret path in Infisical to sync secrets from.
func (o IntegrationAwsSecretsManagerOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// The path in AWS Secrets Manager to sync secrets to. This is required if mappingBehavior is 'many-to-one'.
func (o IntegrationAwsSecretsManagerOutput) SecretsManagerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAwsSecretsManager) pulumi.StringPtrOutput { return v.SecretsManagerPath }).(pulumi.StringPtrOutput)
}

type IntegrationAwsSecretsManagerArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAwsSecretsManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAwsSecretsManager)(nil)).Elem()
}

func (o IntegrationAwsSecretsManagerArrayOutput) ToIntegrationAwsSecretsManagerArrayOutput() IntegrationAwsSecretsManagerArrayOutput {
	return o
}

func (o IntegrationAwsSecretsManagerArrayOutput) ToIntegrationAwsSecretsManagerArrayOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerArrayOutput {
	return o
}

func (o IntegrationAwsSecretsManagerArrayOutput) Index(i pulumi.IntInput) IntegrationAwsSecretsManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAwsSecretsManager {
		return vs[0].([]*IntegrationAwsSecretsManager)[vs[1].(int)]
	}).(IntegrationAwsSecretsManagerOutput)
}

type IntegrationAwsSecretsManagerMapOutput struct{ *pulumi.OutputState }

func (IntegrationAwsSecretsManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAwsSecretsManager)(nil)).Elem()
}

func (o IntegrationAwsSecretsManagerMapOutput) ToIntegrationAwsSecretsManagerMapOutput() IntegrationAwsSecretsManagerMapOutput {
	return o
}

func (o IntegrationAwsSecretsManagerMapOutput) ToIntegrationAwsSecretsManagerMapOutputWithContext(ctx context.Context) IntegrationAwsSecretsManagerMapOutput {
	return o
}

func (o IntegrationAwsSecretsManagerMapOutput) MapIndex(k pulumi.StringInput) IntegrationAwsSecretsManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAwsSecretsManager {
		return vs[0].(map[string]*IntegrationAwsSecretsManager)[vs[1].(string)]
	}).(IntegrationAwsSecretsManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsSecretsManagerInput)(nil)).Elem(), &IntegrationAwsSecretsManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsSecretsManagerArrayInput)(nil)).Elem(), IntegrationAwsSecretsManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAwsSecretsManagerMapInput)(nil)).Elem(), IntegrationAwsSecretsManagerMap{})
	pulumi.RegisterOutputType(IntegrationAwsSecretsManagerOutput{})
	pulumi.RegisterOutputType(IntegrationAwsSecretsManagerArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAwsSecretsManagerMapOutput{})
}
