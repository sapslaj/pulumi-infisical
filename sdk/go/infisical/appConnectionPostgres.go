// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionPostgres struct {
	pulumi.CustomResourceState

	// The credentials for the PostgreSQL App Connection
	Credentials AppConnectionPostgresCredentialsOutput `pulumi:"credentials"`
	// The hash of the PostgreSQL App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the PostgreSQL App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the PostgreSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionPostgres registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionPostgres(ctx *pulumi.Context,
	name string, args *AppConnectionPostgresArgs, opts ...pulumi.ResourceOption) (*AppConnectionPostgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionPostgres
	err := ctx.RegisterResource("infisical:index/appConnectionPostgres:AppConnectionPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionPostgres gets an existing AppConnectionPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionPostgresState, opts ...pulumi.ResourceOption) (*AppConnectionPostgres, error) {
	var resource AppConnectionPostgres
	err := ctx.ReadResource("infisical:index/appConnectionPostgres:AppConnectionPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionPostgres resources.
type appConnectionPostgresState struct {
	// The credentials for the PostgreSQL App Connection
	Credentials *AppConnectionPostgresCredentials `pulumi:"credentials"`
	// The hash of the PostgreSQL App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the PostgreSQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
	Method *string `pulumi:"method"`
	// The name of the PostgreSQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionPostgresState struct {
	// The credentials for the PostgreSQL App Connection
	Credentials AppConnectionPostgresCredentialsPtrInput
	// The hash of the PostgreSQL App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the PostgreSQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
	Method pulumi.StringPtrInput
	// The name of the PostgreSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionPostgresState)(nil)).Elem()
}

type appConnectionPostgresArgs struct {
	// The credentials for the PostgreSQL App Connection
	Credentials AppConnectionPostgresCredentials `pulumi:"credentials"`
	// An optional description for the PostgreSQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
	Method string `pulumi:"method"`
	// The name of the PostgreSQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionPostgres resource.
type AppConnectionPostgresArgs struct {
	// The credentials for the PostgreSQL App Connection
	Credentials AppConnectionPostgresCredentialsInput
	// An optional description for the PostgreSQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
	Method pulumi.StringInput
	// The name of the PostgreSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionPostgresArgs)(nil)).Elem()
}

type AppConnectionPostgresInput interface {
	pulumi.Input

	ToAppConnectionPostgresOutput() AppConnectionPostgresOutput
	ToAppConnectionPostgresOutputWithContext(ctx context.Context) AppConnectionPostgresOutput
}

func (*AppConnectionPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionPostgres)(nil)).Elem()
}

func (i *AppConnectionPostgres) ToAppConnectionPostgresOutput() AppConnectionPostgresOutput {
	return i.ToAppConnectionPostgresOutputWithContext(context.Background())
}

func (i *AppConnectionPostgres) ToAppConnectionPostgresOutputWithContext(ctx context.Context) AppConnectionPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionPostgresOutput)
}

// AppConnectionPostgresArrayInput is an input type that accepts AppConnectionPostgresArray and AppConnectionPostgresArrayOutput values.
// You can construct a concrete instance of `AppConnectionPostgresArrayInput` via:
//
//	AppConnectionPostgresArray{ AppConnectionPostgresArgs{...} }
type AppConnectionPostgresArrayInput interface {
	pulumi.Input

	ToAppConnectionPostgresArrayOutput() AppConnectionPostgresArrayOutput
	ToAppConnectionPostgresArrayOutputWithContext(context.Context) AppConnectionPostgresArrayOutput
}

type AppConnectionPostgresArray []AppConnectionPostgresInput

func (AppConnectionPostgresArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionPostgres)(nil)).Elem()
}

func (i AppConnectionPostgresArray) ToAppConnectionPostgresArrayOutput() AppConnectionPostgresArrayOutput {
	return i.ToAppConnectionPostgresArrayOutputWithContext(context.Background())
}

func (i AppConnectionPostgresArray) ToAppConnectionPostgresArrayOutputWithContext(ctx context.Context) AppConnectionPostgresArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionPostgresArrayOutput)
}

// AppConnectionPostgresMapInput is an input type that accepts AppConnectionPostgresMap and AppConnectionPostgresMapOutput values.
// You can construct a concrete instance of `AppConnectionPostgresMapInput` via:
//
//	AppConnectionPostgresMap{ "key": AppConnectionPostgresArgs{...} }
type AppConnectionPostgresMapInput interface {
	pulumi.Input

	ToAppConnectionPostgresMapOutput() AppConnectionPostgresMapOutput
	ToAppConnectionPostgresMapOutputWithContext(context.Context) AppConnectionPostgresMapOutput
}

type AppConnectionPostgresMap map[string]AppConnectionPostgresInput

func (AppConnectionPostgresMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionPostgres)(nil)).Elem()
}

func (i AppConnectionPostgresMap) ToAppConnectionPostgresMapOutput() AppConnectionPostgresMapOutput {
	return i.ToAppConnectionPostgresMapOutputWithContext(context.Background())
}

func (i AppConnectionPostgresMap) ToAppConnectionPostgresMapOutputWithContext(ctx context.Context) AppConnectionPostgresMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionPostgresMapOutput)
}

type AppConnectionPostgresOutput struct{ *pulumi.OutputState }

func (AppConnectionPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionPostgres)(nil)).Elem()
}

func (o AppConnectionPostgresOutput) ToAppConnectionPostgresOutput() AppConnectionPostgresOutput {
	return o
}

func (o AppConnectionPostgresOutput) ToAppConnectionPostgresOutputWithContext(ctx context.Context) AppConnectionPostgresOutput {
	return o
}

// The credentials for the PostgreSQL App Connection
func (o AppConnectionPostgresOutput) Credentials() AppConnectionPostgresCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionPostgres) AppConnectionPostgresCredentialsOutput { return v.Credentials }).(AppConnectionPostgresCredentialsOutput)
}

// The hash of the PostgreSQL App Connection credentials
func (o AppConnectionPostgresOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionPostgres) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the PostgreSQL App Connection.
func (o AppConnectionPostgresOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionPostgres) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with PostgreSQL. Possible values are: username-and-password
func (o AppConnectionPostgresOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionPostgres) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the PostgreSQL App Connection to create. Must be slug-friendly
func (o AppConnectionPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionPostgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionPostgresArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionPostgresArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionPostgres)(nil)).Elem()
}

func (o AppConnectionPostgresArrayOutput) ToAppConnectionPostgresArrayOutput() AppConnectionPostgresArrayOutput {
	return o
}

func (o AppConnectionPostgresArrayOutput) ToAppConnectionPostgresArrayOutputWithContext(ctx context.Context) AppConnectionPostgresArrayOutput {
	return o
}

func (o AppConnectionPostgresArrayOutput) Index(i pulumi.IntInput) AppConnectionPostgresOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionPostgres {
		return vs[0].([]*AppConnectionPostgres)[vs[1].(int)]
	}).(AppConnectionPostgresOutput)
}

type AppConnectionPostgresMapOutput struct{ *pulumi.OutputState }

func (AppConnectionPostgresMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionPostgres)(nil)).Elem()
}

func (o AppConnectionPostgresMapOutput) ToAppConnectionPostgresMapOutput() AppConnectionPostgresMapOutput {
	return o
}

func (o AppConnectionPostgresMapOutput) ToAppConnectionPostgresMapOutputWithContext(ctx context.Context) AppConnectionPostgresMapOutput {
	return o
}

func (o AppConnectionPostgresMapOutput) MapIndex(k pulumi.StringInput) AppConnectionPostgresOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionPostgres {
		return vs[0].(map[string]*AppConnectionPostgres)[vs[1].(string)]
	}).(AppConnectionPostgresOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionPostgresInput)(nil)).Elem(), &AppConnectionPostgres{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionPostgresArrayInput)(nil)).Elem(), AppConnectionPostgresArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionPostgresMapInput)(nil)).Elem(), AppConnectionPostgresMap{})
	pulumi.RegisterOutputType(AppConnectionPostgresOutput{})
	pulumi.RegisterOutputType(AppConnectionPostgresArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionPostgresMapOutput{})
}
