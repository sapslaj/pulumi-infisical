// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretRotationAwsIamUserSecret struct {
	pulumi.CustomResourceState

	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolOutput `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The name of the secret rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAwsIamUserSecretParametersOutput `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAwsIamUserSecretRotateAtUtcOutput `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntOutput `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAwsIamUserSecretSecretsMappingOutput `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAwsIamUserSecretTemporaryParametersPtrOutput `pulumi:"temporaryParameters"`
}

// NewSecretRotationAwsIamUserSecret registers a new resource with the given unique name, arguments, and options.
func NewSecretRotationAwsIamUserSecret(ctx *pulumi.Context,
	name string, args *SecretRotationAwsIamUserSecretArgs, opts ...pulumi.ResourceOption) (*SecretRotationAwsIamUserSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	if args.SecretsMapping == nil {
		return nil, errors.New("invalid value for required argument 'SecretsMapping'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotationAwsIamUserSecret
	err := ctx.RegisterResource("infisical:index/secretRotationAwsIamUserSecret:SecretRotationAwsIamUserSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotationAwsIamUserSecret gets an existing SecretRotationAwsIamUserSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotationAwsIamUserSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationAwsIamUserSecretState, opts ...pulumi.ResourceOption) (*SecretRotationAwsIamUserSecret, error) {
	var resource SecretRotationAwsIamUserSecret
	err := ctx.ReadResource("infisical:index/secretRotationAwsIamUserSecret:SecretRotationAwsIamUserSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotationAwsIamUserSecret resources.
type secretRotationAwsIamUserSecretState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId *string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment *string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters *SecretRotationAwsIamUserSecretParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId *string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationAwsIamUserSecretRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath *string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping *SecretRotationAwsIamUserSecretSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationAwsIamUserSecretTemporaryParameters `pulumi:"temporaryParameters"`
}

type SecretRotationAwsIamUserSecretState struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringPtrInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringPtrInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAwsIamUserSecretParametersPtrInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringPtrInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAwsIamUserSecretRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringPtrInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAwsIamUserSecretSecretsMappingPtrInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAwsIamUserSecretTemporaryParametersPtrInput
}

func (SecretRotationAwsIamUserSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationAwsIamUserSecretState)(nil)).Elem()
}

type secretRotationAwsIamUserSecretArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// The ID of the connection to use for the secret rotation.
	ConnectionId string `pulumi:"connectionId"`
	// The description of the secret rotation.
	Description *string `pulumi:"description"`
	// The slug of the project environment to rotate secrets from.
	Environment string `pulumi:"environment"`
	// The name of the secret rotation.
	Name *string `pulumi:"name"`
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAwsIamUserSecretParameters `pulumi:"parameters"`
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId string `pulumi:"projectId"`
	// At which UTC time the rotation should occur.
	RotateAtUtc *SecretRotationAwsIamUserSecretRotateAtUtc `pulumi:"rotateAtUtc"`
	// How many days to wait between each rotation.
	RotationInterval *int `pulumi:"rotationInterval"`
	// The folder path to rotate secrets from.
	SecretPath string `pulumi:"secretPath"`
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAwsIamUserSecretSecretsMapping `pulumi:"secretsMapping"`
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters *SecretRotationAwsIamUserSecretTemporaryParameters `pulumi:"temporaryParameters"`
}

// The set of arguments for constructing a SecretRotationAwsIamUserSecret resource.
type SecretRotationAwsIamUserSecretArgs struct {
	// Whether secrets should be automatically rotated.
	AutoRotationEnabled pulumi.BoolPtrInput
	// The ID of the connection to use for the secret rotation.
	ConnectionId pulumi.StringInput
	// The description of the secret rotation.
	Description pulumi.StringPtrInput
	// The slug of the project environment to rotate secrets from.
	Environment pulumi.StringInput
	// The name of the secret rotation.
	Name pulumi.StringPtrInput
	// Parameters to modify how secrets are rotated.
	Parameters SecretRotationAwsIamUserSecretParametersInput
	// The ID of the Infisical project to create the secret rotation in.
	ProjectId pulumi.StringInput
	// At which UTC time the rotation should occur.
	RotateAtUtc SecretRotationAwsIamUserSecretRotateAtUtcPtrInput
	// How many days to wait between each rotation.
	RotationInterval pulumi.IntPtrInput
	// The folder path to rotate secrets from.
	SecretPath pulumi.StringInput
	// Secret mappings to modify how secrets are rotated.
	SecretsMapping SecretRotationAwsIamUserSecretSecretsMappingInput
	// Temporary parameters to modify how secrets are rotated.
	TemporaryParameters SecretRotationAwsIamUserSecretTemporaryParametersPtrInput
}

func (SecretRotationAwsIamUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationAwsIamUserSecretArgs)(nil)).Elem()
}

type SecretRotationAwsIamUserSecretInput interface {
	pulumi.Input

	ToSecretRotationAwsIamUserSecretOutput() SecretRotationAwsIamUserSecretOutput
	ToSecretRotationAwsIamUserSecretOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretOutput
}

func (*SecretRotationAwsIamUserSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (i *SecretRotationAwsIamUserSecret) ToSecretRotationAwsIamUserSecretOutput() SecretRotationAwsIamUserSecretOutput {
	return i.ToSecretRotationAwsIamUserSecretOutputWithContext(context.Background())
}

func (i *SecretRotationAwsIamUserSecret) ToSecretRotationAwsIamUserSecretOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAwsIamUserSecretOutput)
}

// SecretRotationAwsIamUserSecretArrayInput is an input type that accepts SecretRotationAwsIamUserSecretArray and SecretRotationAwsIamUserSecretArrayOutput values.
// You can construct a concrete instance of `SecretRotationAwsIamUserSecretArrayInput` via:
//
//	SecretRotationAwsIamUserSecretArray{ SecretRotationAwsIamUserSecretArgs{...} }
type SecretRotationAwsIamUserSecretArrayInput interface {
	pulumi.Input

	ToSecretRotationAwsIamUserSecretArrayOutput() SecretRotationAwsIamUserSecretArrayOutput
	ToSecretRotationAwsIamUserSecretArrayOutputWithContext(context.Context) SecretRotationAwsIamUserSecretArrayOutput
}

type SecretRotationAwsIamUserSecretArray []SecretRotationAwsIamUserSecretInput

func (SecretRotationAwsIamUserSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (i SecretRotationAwsIamUserSecretArray) ToSecretRotationAwsIamUserSecretArrayOutput() SecretRotationAwsIamUserSecretArrayOutput {
	return i.ToSecretRotationAwsIamUserSecretArrayOutputWithContext(context.Background())
}

func (i SecretRotationAwsIamUserSecretArray) ToSecretRotationAwsIamUserSecretArrayOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAwsIamUserSecretArrayOutput)
}

// SecretRotationAwsIamUserSecretMapInput is an input type that accepts SecretRotationAwsIamUserSecretMap and SecretRotationAwsIamUserSecretMapOutput values.
// You can construct a concrete instance of `SecretRotationAwsIamUserSecretMapInput` via:
//
//	SecretRotationAwsIamUserSecretMap{ "key": SecretRotationAwsIamUserSecretArgs{...} }
type SecretRotationAwsIamUserSecretMapInput interface {
	pulumi.Input

	ToSecretRotationAwsIamUserSecretMapOutput() SecretRotationAwsIamUserSecretMapOutput
	ToSecretRotationAwsIamUserSecretMapOutputWithContext(context.Context) SecretRotationAwsIamUserSecretMapOutput
}

type SecretRotationAwsIamUserSecretMap map[string]SecretRotationAwsIamUserSecretInput

func (SecretRotationAwsIamUserSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (i SecretRotationAwsIamUserSecretMap) ToSecretRotationAwsIamUserSecretMapOutput() SecretRotationAwsIamUserSecretMapOutput {
	return i.ToSecretRotationAwsIamUserSecretMapOutputWithContext(context.Background())
}

func (i SecretRotationAwsIamUserSecretMap) ToSecretRotationAwsIamUserSecretMapOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationAwsIamUserSecretMapOutput)
}

type SecretRotationAwsIamUserSecretOutput struct{ *pulumi.OutputState }

func (SecretRotationAwsIamUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (o SecretRotationAwsIamUserSecretOutput) ToSecretRotationAwsIamUserSecretOutput() SecretRotationAwsIamUserSecretOutput {
	return o
}

func (o SecretRotationAwsIamUserSecretOutput) ToSecretRotationAwsIamUserSecretOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretOutput {
	return o
}

// Whether secrets should be automatically rotated.
func (o SecretRotationAwsIamUserSecretOutput) AutoRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.BoolOutput { return v.AutoRotationEnabled }).(pulumi.BoolOutput)
}

// The ID of the connection to use for the secret rotation.
func (o SecretRotationAwsIamUserSecretOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The description of the secret rotation.
func (o SecretRotationAwsIamUserSecretOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The slug of the project environment to rotate secrets from.
func (o SecretRotationAwsIamUserSecretOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The name of the secret rotation.
func (o SecretRotationAwsIamUserSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters to modify how secrets are rotated.
func (o SecretRotationAwsIamUserSecretOutput) Parameters() SecretRotationAwsIamUserSecretParametersOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) SecretRotationAwsIamUserSecretParametersOutput {
		return v.Parameters
	}).(SecretRotationAwsIamUserSecretParametersOutput)
}

// The ID of the Infisical project to create the secret rotation in.
func (o SecretRotationAwsIamUserSecretOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// At which UTC time the rotation should occur.
func (o SecretRotationAwsIamUserSecretOutput) RotateAtUtc() SecretRotationAwsIamUserSecretRotateAtUtcOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) SecretRotationAwsIamUserSecretRotateAtUtcOutput {
		return v.RotateAtUtc
	}).(SecretRotationAwsIamUserSecretRotateAtUtcOutput)
}

// How many days to wait between each rotation.
func (o SecretRotationAwsIamUserSecretOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

// The folder path to rotate secrets from.
func (o SecretRotationAwsIamUserSecretOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

// Secret mappings to modify how secrets are rotated.
func (o SecretRotationAwsIamUserSecretOutput) SecretsMapping() SecretRotationAwsIamUserSecretSecretsMappingOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) SecretRotationAwsIamUserSecretSecretsMappingOutput {
		return v.SecretsMapping
	}).(SecretRotationAwsIamUserSecretSecretsMappingOutput)
}

// Temporary parameters to modify how secrets are rotated.
func (o SecretRotationAwsIamUserSecretOutput) TemporaryParameters() SecretRotationAwsIamUserSecretTemporaryParametersPtrOutput {
	return o.ApplyT(func(v *SecretRotationAwsIamUserSecret) SecretRotationAwsIamUserSecretTemporaryParametersPtrOutput {
		return v.TemporaryParameters
	}).(SecretRotationAwsIamUserSecretTemporaryParametersPtrOutput)
}

type SecretRotationAwsIamUserSecretArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationAwsIamUserSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (o SecretRotationAwsIamUserSecretArrayOutput) ToSecretRotationAwsIamUserSecretArrayOutput() SecretRotationAwsIamUserSecretArrayOutput {
	return o
}

func (o SecretRotationAwsIamUserSecretArrayOutput) ToSecretRotationAwsIamUserSecretArrayOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretArrayOutput {
	return o
}

func (o SecretRotationAwsIamUserSecretArrayOutput) Index(i pulumi.IntInput) SecretRotationAwsIamUserSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotationAwsIamUserSecret {
		return vs[0].([]*SecretRotationAwsIamUserSecret)[vs[1].(int)]
	}).(SecretRotationAwsIamUserSecretOutput)
}

type SecretRotationAwsIamUserSecretMapOutput struct{ *pulumi.OutputState }

func (SecretRotationAwsIamUserSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotationAwsIamUserSecret)(nil)).Elem()
}

func (o SecretRotationAwsIamUserSecretMapOutput) ToSecretRotationAwsIamUserSecretMapOutput() SecretRotationAwsIamUserSecretMapOutput {
	return o
}

func (o SecretRotationAwsIamUserSecretMapOutput) ToSecretRotationAwsIamUserSecretMapOutputWithContext(ctx context.Context) SecretRotationAwsIamUserSecretMapOutput {
	return o
}

func (o SecretRotationAwsIamUserSecretMapOutput) MapIndex(k pulumi.StringInput) SecretRotationAwsIamUserSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotationAwsIamUserSecret {
		return vs[0].(map[string]*SecretRotationAwsIamUserSecret)[vs[1].(string)]
	}).(SecretRotationAwsIamUserSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAwsIamUserSecretInput)(nil)).Elem(), &SecretRotationAwsIamUserSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAwsIamUserSecretArrayInput)(nil)).Elem(), SecretRotationAwsIamUserSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationAwsIamUserSecretMapInput)(nil)).Elem(), SecretRotationAwsIamUserSecretMap{})
	pulumi.RegisterOutputType(SecretRotationAwsIamUserSecretOutput{})
	pulumi.RegisterOutputType(SecretRotationAwsIamUserSecretArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationAwsIamUserSecretMapOutput{})
}
