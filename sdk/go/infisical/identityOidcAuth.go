// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IdentityOidcAuth struct {
	pulumi.CustomResourceState

	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntOutput `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntOutput `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
	AccessTokenTrustedIps IdentityOidcAuthAccessTokenTrustedIpArrayOutput `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntOutput `pulumi:"accessTokenTtl"`
	// The comma-separated list of intended recipients.
	BoundAudiences pulumi.StringArrayOutput `pulumi:"boundAudiences"`
	// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
	BoundClaims pulumi.StringMapOutput `pulumi:"boundClaims"`
	// The unique identifier of the identity provider issuing the OIDC tokens.
	BoundIssuer pulumi.StringOutput `pulumi:"boundIssuer"`
	// The expected principal that is the subject of the JWT.
	BoundSubject pulumi.StringOutput `pulumi:"boundSubject"`
	// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
	ClaimMetadataMapping pulumi.StringMapOutput `pulumi:"claimMetadataMapping"`
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
	OidcCaCertificate pulumi.StringOutput `pulumi:"oidcCaCertificate"`
	// The URL used to retrieve the OpenID Connect configuration from the identity provider.
	OidcDiscoveryUrl pulumi.StringOutput `pulumi:"oidcDiscoveryUrl"`
}

// NewIdentityOidcAuth registers a new resource with the given unique name, arguments, and options.
func NewIdentityOidcAuth(ctx *pulumi.Context,
	name string, args *IdentityOidcAuthArgs, opts ...pulumi.ResourceOption) (*IdentityOidcAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BoundIssuer == nil {
		return nil, errors.New("invalid value for required argument 'BoundIssuer'")
	}
	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.OidcDiscoveryUrl == nil {
		return nil, errors.New("invalid value for required argument 'OidcDiscoveryUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityOidcAuth
	err := ctx.RegisterResource("infisical:index/identityOidcAuth:IdentityOidcAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityOidcAuth gets an existing IdentityOidcAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityOidcAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityOidcAuthState, opts ...pulumi.ResourceOption) (*IdentityOidcAuth, error) {
	var resource IdentityOidcAuth
	err := ctx.ReadResource("infisical:index/identityOidcAuth:IdentityOidcAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityOidcAuth resources.
type identityOidcAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
	AccessTokenTrustedIps []IdentityOidcAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// The comma-separated list of intended recipients.
	BoundAudiences []string `pulumi:"boundAudiences"`
	// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
	BoundClaims map[string]string `pulumi:"boundClaims"`
	// The unique identifier of the identity provider issuing the OIDC tokens.
	BoundIssuer *string `pulumi:"boundIssuer"`
	// The expected principal that is the subject of the JWT.
	BoundSubject *string `pulumi:"boundSubject"`
	// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
	ClaimMetadataMapping map[string]string `pulumi:"claimMetadataMapping"`
	// The ID of the identity to attach the configuration onto.
	IdentityId *string `pulumi:"identityId"`
	// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
	OidcCaCertificate *string `pulumi:"oidcCaCertificate"`
	// The URL used to retrieve the OpenID Connect configuration from the identity provider.
	OidcDiscoveryUrl *string `pulumi:"oidcDiscoveryUrl"`
}

type IdentityOidcAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
	AccessTokenTrustedIps IdentityOidcAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// The comma-separated list of intended recipients.
	BoundAudiences pulumi.StringArrayInput
	// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
	BoundClaims pulumi.StringMapInput
	// The unique identifier of the identity provider issuing the OIDC tokens.
	BoundIssuer pulumi.StringPtrInput
	// The expected principal that is the subject of the JWT.
	BoundSubject pulumi.StringPtrInput
	// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
	ClaimMetadataMapping pulumi.StringMapInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringPtrInput
	// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
	OidcCaCertificate pulumi.StringPtrInput
	// The URL used to retrieve the OpenID Connect configuration from the identity provider.
	OidcDiscoveryUrl pulumi.StringPtrInput
}

func (IdentityOidcAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityOidcAuthState)(nil)).Elem()
}

type identityOidcAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
	AccessTokenTrustedIps []IdentityOidcAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// The comma-separated list of intended recipients.
	BoundAudiences []string `pulumi:"boundAudiences"`
	// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
	BoundClaims map[string]string `pulumi:"boundClaims"`
	// The unique identifier of the identity provider issuing the OIDC tokens.
	BoundIssuer string `pulumi:"boundIssuer"`
	// The expected principal that is the subject of the JWT.
	BoundSubject *string `pulumi:"boundSubject"`
	// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
	ClaimMetadataMapping map[string]string `pulumi:"claimMetadataMapping"`
	// The ID of the identity to attach the configuration onto.
	IdentityId string `pulumi:"identityId"`
	// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
	OidcCaCertificate *string `pulumi:"oidcCaCertificate"`
	// The URL used to retrieve the OpenID Connect configuration from the identity provider.
	OidcDiscoveryUrl string `pulumi:"oidcDiscoveryUrl"`
}

// The set of arguments for constructing a IdentityOidcAuth resource.
type IdentityOidcAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
	AccessTokenTrustedIps IdentityOidcAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// The comma-separated list of intended recipients.
	BoundAudiences pulumi.StringArrayInput
	// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
	BoundClaims pulumi.StringMapInput
	// The unique identifier of the identity provider issuing the OIDC tokens.
	BoundIssuer pulumi.StringInput
	// The expected principal that is the subject of the JWT.
	BoundSubject pulumi.StringPtrInput
	// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
	ClaimMetadataMapping pulumi.StringMapInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringInput
	// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
	OidcCaCertificate pulumi.StringPtrInput
	// The URL used to retrieve the OpenID Connect configuration from the identity provider.
	OidcDiscoveryUrl pulumi.StringInput
}

func (IdentityOidcAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityOidcAuthArgs)(nil)).Elem()
}

type IdentityOidcAuthInput interface {
	pulumi.Input

	ToIdentityOidcAuthOutput() IdentityOidcAuthOutput
	ToIdentityOidcAuthOutputWithContext(ctx context.Context) IdentityOidcAuthOutput
}

func (*IdentityOidcAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityOidcAuth)(nil)).Elem()
}

func (i *IdentityOidcAuth) ToIdentityOidcAuthOutput() IdentityOidcAuthOutput {
	return i.ToIdentityOidcAuthOutputWithContext(context.Background())
}

func (i *IdentityOidcAuth) ToIdentityOidcAuthOutputWithContext(ctx context.Context) IdentityOidcAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOidcAuthOutput)
}

// IdentityOidcAuthArrayInput is an input type that accepts IdentityOidcAuthArray and IdentityOidcAuthArrayOutput values.
// You can construct a concrete instance of `IdentityOidcAuthArrayInput` via:
//
//	IdentityOidcAuthArray{ IdentityOidcAuthArgs{...} }
type IdentityOidcAuthArrayInput interface {
	pulumi.Input

	ToIdentityOidcAuthArrayOutput() IdentityOidcAuthArrayOutput
	ToIdentityOidcAuthArrayOutputWithContext(context.Context) IdentityOidcAuthArrayOutput
}

type IdentityOidcAuthArray []IdentityOidcAuthInput

func (IdentityOidcAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityOidcAuth)(nil)).Elem()
}

func (i IdentityOidcAuthArray) ToIdentityOidcAuthArrayOutput() IdentityOidcAuthArrayOutput {
	return i.ToIdentityOidcAuthArrayOutputWithContext(context.Background())
}

func (i IdentityOidcAuthArray) ToIdentityOidcAuthArrayOutputWithContext(ctx context.Context) IdentityOidcAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOidcAuthArrayOutput)
}

// IdentityOidcAuthMapInput is an input type that accepts IdentityOidcAuthMap and IdentityOidcAuthMapOutput values.
// You can construct a concrete instance of `IdentityOidcAuthMapInput` via:
//
//	IdentityOidcAuthMap{ "key": IdentityOidcAuthArgs{...} }
type IdentityOidcAuthMapInput interface {
	pulumi.Input

	ToIdentityOidcAuthMapOutput() IdentityOidcAuthMapOutput
	ToIdentityOidcAuthMapOutputWithContext(context.Context) IdentityOidcAuthMapOutput
}

type IdentityOidcAuthMap map[string]IdentityOidcAuthInput

func (IdentityOidcAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityOidcAuth)(nil)).Elem()
}

func (i IdentityOidcAuthMap) ToIdentityOidcAuthMapOutput() IdentityOidcAuthMapOutput {
	return i.ToIdentityOidcAuthMapOutputWithContext(context.Background())
}

func (i IdentityOidcAuthMap) ToIdentityOidcAuthMapOutputWithContext(ctx context.Context) IdentityOidcAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOidcAuthMapOutput)
}

type IdentityOidcAuthOutput struct{ *pulumi.OutputState }

func (IdentityOidcAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityOidcAuth)(nil)).Elem()
}

func (o IdentityOidcAuthOutput) ToIdentityOidcAuthOutput() IdentityOidcAuthOutput {
	return o
}

func (o IdentityOidcAuthOutput) ToIdentityOidcAuthOutputWithContext(ctx context.Context) IdentityOidcAuthOutput {
	return o
}

// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityOidcAuthOutput) AccessTokenMaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.IntOutput { return v.AccessTokenMaxTtl }).(pulumi.IntOutput)
}

// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
func (o IdentityOidcAuthOutput) AccessTokenNumUsesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.IntOutput { return v.AccessTokenNumUsesLimit }).(pulumi.IntOutput)
}

// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
func (o IdentityOidcAuthOutput) AccessTokenTrustedIps() IdentityOidcAuthAccessTokenTrustedIpArrayOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) IdentityOidcAuthAccessTokenTrustedIpArrayOutput {
		return v.AccessTokenTrustedIps
	}).(IdentityOidcAuthAccessTokenTrustedIpArrayOutput)
}

// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityOidcAuthOutput) AccessTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.IntOutput { return v.AccessTokenTtl }).(pulumi.IntOutput)
}

// The comma-separated list of intended recipients.
func (o IdentityOidcAuthOutput) BoundAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringArrayOutput { return v.BoundAudiences }).(pulumi.StringArrayOutput)
}

// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
func (o IdentityOidcAuthOutput) BoundClaims() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringMapOutput { return v.BoundClaims }).(pulumi.StringMapOutput)
}

// The unique identifier of the identity provider issuing the OIDC tokens.
func (o IdentityOidcAuthOutput) BoundIssuer() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringOutput { return v.BoundIssuer }).(pulumi.StringOutput)
}

// The expected principal that is the subject of the JWT.
func (o IdentityOidcAuthOutput) BoundSubject() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringOutput { return v.BoundSubject }).(pulumi.StringOutput)
}

// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
func (o IdentityOidcAuthOutput) ClaimMetadataMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringMapOutput { return v.ClaimMetadataMapping }).(pulumi.StringMapOutput)
}

// The ID of the identity to attach the configuration onto.
func (o IdentityOidcAuthOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
func (o IdentityOidcAuthOutput) OidcCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringOutput { return v.OidcCaCertificate }).(pulumi.StringOutput)
}

// The URL used to retrieve the OpenID Connect configuration from the identity provider.
func (o IdentityOidcAuthOutput) OidcDiscoveryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityOidcAuth) pulumi.StringOutput { return v.OidcDiscoveryUrl }).(pulumi.StringOutput)
}

type IdentityOidcAuthArrayOutput struct{ *pulumi.OutputState }

func (IdentityOidcAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityOidcAuth)(nil)).Elem()
}

func (o IdentityOidcAuthArrayOutput) ToIdentityOidcAuthArrayOutput() IdentityOidcAuthArrayOutput {
	return o
}

func (o IdentityOidcAuthArrayOutput) ToIdentityOidcAuthArrayOutputWithContext(ctx context.Context) IdentityOidcAuthArrayOutput {
	return o
}

func (o IdentityOidcAuthArrayOutput) Index(i pulumi.IntInput) IdentityOidcAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityOidcAuth {
		return vs[0].([]*IdentityOidcAuth)[vs[1].(int)]
	}).(IdentityOidcAuthOutput)
}

type IdentityOidcAuthMapOutput struct{ *pulumi.OutputState }

func (IdentityOidcAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityOidcAuth)(nil)).Elem()
}

func (o IdentityOidcAuthMapOutput) ToIdentityOidcAuthMapOutput() IdentityOidcAuthMapOutput {
	return o
}

func (o IdentityOidcAuthMapOutput) ToIdentityOidcAuthMapOutputWithContext(ctx context.Context) IdentityOidcAuthMapOutput {
	return o
}

func (o IdentityOidcAuthMapOutput) MapIndex(k pulumi.StringInput) IdentityOidcAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityOidcAuth {
		return vs[0].(map[string]*IdentityOidcAuth)[vs[1].(string)]
	}).(IdentityOidcAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityOidcAuthInput)(nil)).Elem(), &IdentityOidcAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityOidcAuthArrayInput)(nil)).Elem(), IdentityOidcAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityOidcAuthMapInput)(nil)).Elem(), IdentityOidcAuthMap{})
	pulumi.RegisterOutputType(IdentityOidcAuthOutput{})
	pulumi.RegisterOutputType(IdentityOidcAuthArrayOutput{})
	pulumi.RegisterOutputType(IdentityOidcAuthMapOutput{})
}
