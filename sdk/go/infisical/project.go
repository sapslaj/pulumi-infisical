// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type Project struct {
	pulumi.CustomResourceState

	// The audit log retention in days
	AuditLogRetentionDays pulumi.IntOutput `pulumi:"auditLogRetentionDays"`
	// The description of the project
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the project has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolOutput `pulumi:"hasDeleteProtection"`
	// The ID of the KMS secret manager key to use for the project
	KmsSecretManagerKeyId pulumi.StringOutput `pulumi:"kmsSecretManagerKeyId"`
	LastUpdated           pulumi.StringOutput `pulumi:"lastUpdated"`
	// The name of the project
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to create default environments for the project (dev, staging, prod), defaults to true
	ShouldCreateDefaultEnvs pulumi.BoolPtrOutput `pulumi:"shouldCreateDefaultEnvs"`
	// The slug of the project
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The name of the template to use for the project
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("infisical:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("infisical:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// The audit log retention in days
	AuditLogRetentionDays *int `pulumi:"auditLogRetentionDays"`
	// The description of the project
	Description *string `pulumi:"description"`
	// Whether the project has delete protection, defaults to false
	HasDeleteProtection *bool `pulumi:"hasDeleteProtection"`
	// The ID of the KMS secret manager key to use for the project
	KmsSecretManagerKeyId *string `pulumi:"kmsSecretManagerKeyId"`
	LastUpdated           *string `pulumi:"lastUpdated"`
	// The name of the project
	Name *string `pulumi:"name"`
	// Whether to create default environments for the project (dev, staging, prod), defaults to true
	ShouldCreateDefaultEnvs *bool `pulumi:"shouldCreateDefaultEnvs"`
	// The slug of the project
	Slug *string `pulumi:"slug"`
	// The name of the template to use for the project
	TemplateName *string `pulumi:"templateName"`
}

type ProjectState struct {
	// The audit log retention in days
	AuditLogRetentionDays pulumi.IntPtrInput
	// The description of the project
	Description pulumi.StringPtrInput
	// Whether the project has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolPtrInput
	// The ID of the KMS secret manager key to use for the project
	KmsSecretManagerKeyId pulumi.StringPtrInput
	LastUpdated           pulumi.StringPtrInput
	// The name of the project
	Name pulumi.StringPtrInput
	// Whether to create default environments for the project (dev, staging, prod), defaults to true
	ShouldCreateDefaultEnvs pulumi.BoolPtrInput
	// The slug of the project
	Slug pulumi.StringPtrInput
	// The name of the template to use for the project
	TemplateName pulumi.StringPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// The audit log retention in days
	AuditLogRetentionDays *int `pulumi:"auditLogRetentionDays"`
	// The description of the project
	Description *string `pulumi:"description"`
	// Whether the project has delete protection, defaults to false
	HasDeleteProtection *bool `pulumi:"hasDeleteProtection"`
	// The ID of the KMS secret manager key to use for the project
	KmsSecretManagerKeyId *string `pulumi:"kmsSecretManagerKeyId"`
	// The name of the project
	Name *string `pulumi:"name"`
	// Whether to create default environments for the project (dev, staging, prod), defaults to true
	ShouldCreateDefaultEnvs *bool `pulumi:"shouldCreateDefaultEnvs"`
	// The slug of the project
	Slug string `pulumi:"slug"`
	// The name of the template to use for the project
	TemplateName *string `pulumi:"templateName"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// The audit log retention in days
	AuditLogRetentionDays pulumi.IntPtrInput
	// The description of the project
	Description pulumi.StringPtrInput
	// Whether the project has delete protection, defaults to false
	HasDeleteProtection pulumi.BoolPtrInput
	// The ID of the KMS secret manager key to use for the project
	KmsSecretManagerKeyId pulumi.StringPtrInput
	// The name of the project
	Name pulumi.StringPtrInput
	// Whether to create default environments for the project (dev, staging, prod), defaults to true
	ShouldCreateDefaultEnvs pulumi.BoolPtrInput
	// The slug of the project
	Slug pulumi.StringInput
	// The name of the template to use for the project
	TemplateName pulumi.StringPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// The audit log retention in days
func (o ProjectOutput) AuditLogRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.AuditLogRetentionDays }).(pulumi.IntOutput)
}

// The description of the project
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the project has delete protection, defaults to false
func (o ProjectOutput) HasDeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.HasDeleteProtection }).(pulumi.BoolOutput)
}

// The ID of the KMS secret manager key to use for the project
func (o ProjectOutput) KmsSecretManagerKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.KmsSecretManagerKeyId }).(pulumi.StringOutput)
}

func (o ProjectOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The name of the project
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to create default environments for the project (dev, staging, prod), defaults to true
func (o ProjectOutput) ShouldCreateDefaultEnvs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.ShouldCreateDefaultEnvs }).(pulumi.BoolPtrOutput)
}

// The slug of the project
func (o ProjectOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The name of the template to use for the project
func (o ProjectOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
