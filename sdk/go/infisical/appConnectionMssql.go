// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionMssql struct {
	pulumi.CustomResourceState

	// The credentials for the MsSQL App Connection
	Credentials AppConnectionMssqlCredentialsOutput `pulumi:"credentials"`
	// The hash of the MsSQL App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the MsSQL App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with MsSQL. Possible values are: username-and-password
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the MsSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionMssql registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionMssql(ctx *pulumi.Context,
	name string, args *AppConnectionMssqlArgs, opts ...pulumi.ResourceOption) (*AppConnectionMssql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionMssql
	err := ctx.RegisterResource("infisical:index/appConnectionMssql:AppConnectionMssql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionMssql gets an existing AppConnectionMssql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionMssql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionMssqlState, opts ...pulumi.ResourceOption) (*AppConnectionMssql, error) {
	var resource AppConnectionMssql
	err := ctx.ReadResource("infisical:index/appConnectionMssql:AppConnectionMssql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionMssql resources.
type appConnectionMssqlState struct {
	// The credentials for the MsSQL App Connection
	Credentials *AppConnectionMssqlCredentials `pulumi:"credentials"`
	// The hash of the MsSQL App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the MsSQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with MsSQL. Possible values are: username-and-password
	Method *string `pulumi:"method"`
	// The name of the MsSQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionMssqlState struct {
	// The credentials for the MsSQL App Connection
	Credentials AppConnectionMssqlCredentialsPtrInput
	// The hash of the MsSQL App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the MsSQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with MsSQL. Possible values are: username-and-password
	Method pulumi.StringPtrInput
	// The name of the MsSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionMssqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionMssqlState)(nil)).Elem()
}

type appConnectionMssqlArgs struct {
	// The credentials for the MsSQL App Connection
	Credentials AppConnectionMssqlCredentials `pulumi:"credentials"`
	// An optional description for the MsSQL App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with MsSQL. Possible values are: username-and-password
	Method string `pulumi:"method"`
	// The name of the MsSQL App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionMssql resource.
type AppConnectionMssqlArgs struct {
	// The credentials for the MsSQL App Connection
	Credentials AppConnectionMssqlCredentialsInput
	// An optional description for the MsSQL App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with MsSQL. Possible values are: username-and-password
	Method pulumi.StringInput
	// The name of the MsSQL App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionMssqlArgs)(nil)).Elem()
}

type AppConnectionMssqlInput interface {
	pulumi.Input

	ToAppConnectionMssqlOutput() AppConnectionMssqlOutput
	ToAppConnectionMssqlOutputWithContext(ctx context.Context) AppConnectionMssqlOutput
}

func (*AppConnectionMssql) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionMssql)(nil)).Elem()
}

func (i *AppConnectionMssql) ToAppConnectionMssqlOutput() AppConnectionMssqlOutput {
	return i.ToAppConnectionMssqlOutputWithContext(context.Background())
}

func (i *AppConnectionMssql) ToAppConnectionMssqlOutputWithContext(ctx context.Context) AppConnectionMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMssqlOutput)
}

// AppConnectionMssqlArrayInput is an input type that accepts AppConnectionMssqlArray and AppConnectionMssqlArrayOutput values.
// You can construct a concrete instance of `AppConnectionMssqlArrayInput` via:
//
//	AppConnectionMssqlArray{ AppConnectionMssqlArgs{...} }
type AppConnectionMssqlArrayInput interface {
	pulumi.Input

	ToAppConnectionMssqlArrayOutput() AppConnectionMssqlArrayOutput
	ToAppConnectionMssqlArrayOutputWithContext(context.Context) AppConnectionMssqlArrayOutput
}

type AppConnectionMssqlArray []AppConnectionMssqlInput

func (AppConnectionMssqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionMssql)(nil)).Elem()
}

func (i AppConnectionMssqlArray) ToAppConnectionMssqlArrayOutput() AppConnectionMssqlArrayOutput {
	return i.ToAppConnectionMssqlArrayOutputWithContext(context.Background())
}

func (i AppConnectionMssqlArray) ToAppConnectionMssqlArrayOutputWithContext(ctx context.Context) AppConnectionMssqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMssqlArrayOutput)
}

// AppConnectionMssqlMapInput is an input type that accepts AppConnectionMssqlMap and AppConnectionMssqlMapOutput values.
// You can construct a concrete instance of `AppConnectionMssqlMapInput` via:
//
//	AppConnectionMssqlMap{ "key": AppConnectionMssqlArgs{...} }
type AppConnectionMssqlMapInput interface {
	pulumi.Input

	ToAppConnectionMssqlMapOutput() AppConnectionMssqlMapOutput
	ToAppConnectionMssqlMapOutputWithContext(context.Context) AppConnectionMssqlMapOutput
}

type AppConnectionMssqlMap map[string]AppConnectionMssqlInput

func (AppConnectionMssqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionMssql)(nil)).Elem()
}

func (i AppConnectionMssqlMap) ToAppConnectionMssqlMapOutput() AppConnectionMssqlMapOutput {
	return i.ToAppConnectionMssqlMapOutputWithContext(context.Background())
}

func (i AppConnectionMssqlMap) ToAppConnectionMssqlMapOutputWithContext(ctx context.Context) AppConnectionMssqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionMssqlMapOutput)
}

type AppConnectionMssqlOutput struct{ *pulumi.OutputState }

func (AppConnectionMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionMssql)(nil)).Elem()
}

func (o AppConnectionMssqlOutput) ToAppConnectionMssqlOutput() AppConnectionMssqlOutput {
	return o
}

func (o AppConnectionMssqlOutput) ToAppConnectionMssqlOutputWithContext(ctx context.Context) AppConnectionMssqlOutput {
	return o
}

// The credentials for the MsSQL App Connection
func (o AppConnectionMssqlOutput) Credentials() AppConnectionMssqlCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionMssql) AppConnectionMssqlCredentialsOutput { return v.Credentials }).(AppConnectionMssqlCredentialsOutput)
}

// The hash of the MsSQL App Connection credentials
func (o AppConnectionMssqlOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMssql) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the MsSQL App Connection.
func (o AppConnectionMssqlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionMssql) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with MsSQL. Possible values are: username-and-password
func (o AppConnectionMssqlOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMssql) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the MsSQL App Connection to create. Must be slug-friendly
func (o AppConnectionMssqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionMssql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionMssqlArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionMssqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionMssql)(nil)).Elem()
}

func (o AppConnectionMssqlArrayOutput) ToAppConnectionMssqlArrayOutput() AppConnectionMssqlArrayOutput {
	return o
}

func (o AppConnectionMssqlArrayOutput) ToAppConnectionMssqlArrayOutputWithContext(ctx context.Context) AppConnectionMssqlArrayOutput {
	return o
}

func (o AppConnectionMssqlArrayOutput) Index(i pulumi.IntInput) AppConnectionMssqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionMssql {
		return vs[0].([]*AppConnectionMssql)[vs[1].(int)]
	}).(AppConnectionMssqlOutput)
}

type AppConnectionMssqlMapOutput struct{ *pulumi.OutputState }

func (AppConnectionMssqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionMssql)(nil)).Elem()
}

func (o AppConnectionMssqlMapOutput) ToAppConnectionMssqlMapOutput() AppConnectionMssqlMapOutput {
	return o
}

func (o AppConnectionMssqlMapOutput) ToAppConnectionMssqlMapOutputWithContext(ctx context.Context) AppConnectionMssqlMapOutput {
	return o
}

func (o AppConnectionMssqlMapOutput) MapIndex(k pulumi.StringInput) AppConnectionMssqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionMssql {
		return vs[0].(map[string]*AppConnectionMssql)[vs[1].(string)]
	}).(AppConnectionMssqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMssqlInput)(nil)).Elem(), &AppConnectionMssql{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMssqlArrayInput)(nil)).Elem(), AppConnectionMssqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionMssqlMapInput)(nil)).Elem(), AppConnectionMssqlMap{})
	pulumi.RegisterOutputType(AppConnectionMssqlOutput{})
	pulumi.RegisterOutputType(AppConnectionMssqlArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionMssqlMapOutput{})
}
