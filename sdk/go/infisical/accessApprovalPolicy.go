// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AccessApprovalPolicy struct {
	pulumi.CustomResourceState

	// The required approvers
	Approvers AccessApprovalPolicyApproverArrayOutput `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringOutput `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
	EnvironmentSlug pulumi.StringPtrOutput `pulumi:"environmentSlug"`
	// The environments to apply the access approval policy to
	EnvironmentSlugs pulumi.StringArrayOutput `pulumi:"environmentSlugs"`
	// The name of the access approval policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project to add the access approval policy
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals pulumi.IntOutput `pulumi:"requiredApprovals"`
	// The secret path to apply the access approval policy to
	SecretPath pulumi.StringOutput `pulumi:"secretPath"`
}

// NewAccessApprovalPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessApprovalPolicy(ctx *pulumi.Context,
	name string, args *AccessApprovalPolicyArgs, opts ...pulumi.ResourceOption) (*AccessApprovalPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Approvers == nil {
		return nil, errors.New("invalid value for required argument 'Approvers'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RequiredApprovals == nil {
		return nil, errors.New("invalid value for required argument 'RequiredApprovals'")
	}
	if args.SecretPath == nil {
		return nil, errors.New("invalid value for required argument 'SecretPath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessApprovalPolicy
	err := ctx.RegisterResource("infisical:index/accessApprovalPolicy:AccessApprovalPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessApprovalPolicy gets an existing AccessApprovalPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessApprovalPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessApprovalPolicyState, opts ...pulumi.ResourceOption) (*AccessApprovalPolicy, error) {
	var resource AccessApprovalPolicy
	err := ctx.ReadResource("infisical:index/accessApprovalPolicy:AccessApprovalPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessApprovalPolicy resources.
type accessApprovalPolicyState struct {
	// The required approvers
	Approvers []AccessApprovalPolicyApprover `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The environments to apply the access approval policy to
	EnvironmentSlugs []string `pulumi:"environmentSlugs"`
	// The name of the access approval policy
	Name *string `pulumi:"name"`
	// The ID of the project to add the access approval policy
	ProjectId *string `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals *int `pulumi:"requiredApprovals"`
	// The secret path to apply the access approval policy to
	SecretPath *string `pulumi:"secretPath"`
}

type AccessApprovalPolicyState struct {
	// The required approvers
	Approvers AccessApprovalPolicyApproverArrayInput
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringPtrInput
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
	EnvironmentSlug pulumi.StringPtrInput
	// The environments to apply the access approval policy to
	EnvironmentSlugs pulumi.StringArrayInput
	// The name of the access approval policy
	Name pulumi.StringPtrInput
	// The ID of the project to add the access approval policy
	ProjectId pulumi.StringPtrInput
	// The number of required approvers
	RequiredApprovals pulumi.IntPtrInput
	// The secret path to apply the access approval policy to
	SecretPath pulumi.StringPtrInput
}

func (AccessApprovalPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessApprovalPolicyState)(nil)).Elem()
}

type accessApprovalPolicyArgs struct {
	// The required approvers
	Approvers []AccessApprovalPolicyApprover `pulumi:"approvers"`
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `pulumi:"enforcementLevel"`
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The environments to apply the access approval policy to
	EnvironmentSlugs []string `pulumi:"environmentSlugs"`
	// The name of the access approval policy
	Name *string `pulumi:"name"`
	// The ID of the project to add the access approval policy
	ProjectId string `pulumi:"projectId"`
	// The number of required approvers
	RequiredApprovals int `pulumi:"requiredApprovals"`
	// The secret path to apply the access approval policy to
	SecretPath string `pulumi:"secretPath"`
}

// The set of arguments for constructing a AccessApprovalPolicy resource.
type AccessApprovalPolicyArgs struct {
	// The required approvers
	Approvers AccessApprovalPolicyApproverArrayInput
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel pulumi.StringPtrInput
	// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
	EnvironmentSlug pulumi.StringPtrInput
	// The environments to apply the access approval policy to
	EnvironmentSlugs pulumi.StringArrayInput
	// The name of the access approval policy
	Name pulumi.StringPtrInput
	// The ID of the project to add the access approval policy
	ProjectId pulumi.StringInput
	// The number of required approvers
	RequiredApprovals pulumi.IntInput
	// The secret path to apply the access approval policy to
	SecretPath pulumi.StringInput
}

func (AccessApprovalPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessApprovalPolicyArgs)(nil)).Elem()
}

type AccessApprovalPolicyInput interface {
	pulumi.Input

	ToAccessApprovalPolicyOutput() AccessApprovalPolicyOutput
	ToAccessApprovalPolicyOutputWithContext(ctx context.Context) AccessApprovalPolicyOutput
}

func (*AccessApprovalPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessApprovalPolicy)(nil)).Elem()
}

func (i *AccessApprovalPolicy) ToAccessApprovalPolicyOutput() AccessApprovalPolicyOutput {
	return i.ToAccessApprovalPolicyOutputWithContext(context.Background())
}

func (i *AccessApprovalPolicy) ToAccessApprovalPolicyOutputWithContext(ctx context.Context) AccessApprovalPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessApprovalPolicyOutput)
}

// AccessApprovalPolicyArrayInput is an input type that accepts AccessApprovalPolicyArray and AccessApprovalPolicyArrayOutput values.
// You can construct a concrete instance of `AccessApprovalPolicyArrayInput` via:
//
//	AccessApprovalPolicyArray{ AccessApprovalPolicyArgs{...} }
type AccessApprovalPolicyArrayInput interface {
	pulumi.Input

	ToAccessApprovalPolicyArrayOutput() AccessApprovalPolicyArrayOutput
	ToAccessApprovalPolicyArrayOutputWithContext(context.Context) AccessApprovalPolicyArrayOutput
}

type AccessApprovalPolicyArray []AccessApprovalPolicyInput

func (AccessApprovalPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessApprovalPolicy)(nil)).Elem()
}

func (i AccessApprovalPolicyArray) ToAccessApprovalPolicyArrayOutput() AccessApprovalPolicyArrayOutput {
	return i.ToAccessApprovalPolicyArrayOutputWithContext(context.Background())
}

func (i AccessApprovalPolicyArray) ToAccessApprovalPolicyArrayOutputWithContext(ctx context.Context) AccessApprovalPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessApprovalPolicyArrayOutput)
}

// AccessApprovalPolicyMapInput is an input type that accepts AccessApprovalPolicyMap and AccessApprovalPolicyMapOutput values.
// You can construct a concrete instance of `AccessApprovalPolicyMapInput` via:
//
//	AccessApprovalPolicyMap{ "key": AccessApprovalPolicyArgs{...} }
type AccessApprovalPolicyMapInput interface {
	pulumi.Input

	ToAccessApprovalPolicyMapOutput() AccessApprovalPolicyMapOutput
	ToAccessApprovalPolicyMapOutputWithContext(context.Context) AccessApprovalPolicyMapOutput
}

type AccessApprovalPolicyMap map[string]AccessApprovalPolicyInput

func (AccessApprovalPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessApprovalPolicy)(nil)).Elem()
}

func (i AccessApprovalPolicyMap) ToAccessApprovalPolicyMapOutput() AccessApprovalPolicyMapOutput {
	return i.ToAccessApprovalPolicyMapOutputWithContext(context.Background())
}

func (i AccessApprovalPolicyMap) ToAccessApprovalPolicyMapOutputWithContext(ctx context.Context) AccessApprovalPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessApprovalPolicyMapOutput)
}

type AccessApprovalPolicyOutput struct{ *pulumi.OutputState }

func (AccessApprovalPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessApprovalPolicy)(nil)).Elem()
}

func (o AccessApprovalPolicyOutput) ToAccessApprovalPolicyOutput() AccessApprovalPolicyOutput {
	return o
}

func (o AccessApprovalPolicyOutput) ToAccessApprovalPolicyOutputWithContext(ctx context.Context) AccessApprovalPolicyOutput {
	return o
}

// The required approvers
func (o AccessApprovalPolicyOutput) Approvers() AccessApprovalPolicyApproverArrayOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) AccessApprovalPolicyApproverArrayOutput { return v.Approvers }).(AccessApprovalPolicyApproverArrayOutput)
}

// The enforcement level of the policy. This can either be hard or soft
func (o AccessApprovalPolicyOutput) EnforcementLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringOutput { return v.EnforcementLevel }).(pulumi.StringOutput)
}

// (DEPRECATED, Use environmentSlugs instead) The environment to apply the access approval policy to
func (o AccessApprovalPolicyOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringPtrOutput { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// The environments to apply the access approval policy to
func (o AccessApprovalPolicyOutput) EnvironmentSlugs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringArrayOutput { return v.EnvironmentSlugs }).(pulumi.StringArrayOutput)
}

// The name of the access approval policy
func (o AccessApprovalPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project to add the access approval policy
func (o AccessApprovalPolicyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The number of required approvers
func (o AccessApprovalPolicyOutput) RequiredApprovals() pulumi.IntOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.IntOutput { return v.RequiredApprovals }).(pulumi.IntOutput)
}

// The secret path to apply the access approval policy to
func (o AccessApprovalPolicyOutput) SecretPath() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessApprovalPolicy) pulumi.StringOutput { return v.SecretPath }).(pulumi.StringOutput)
}

type AccessApprovalPolicyArrayOutput struct{ *pulumi.OutputState }

func (AccessApprovalPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessApprovalPolicy)(nil)).Elem()
}

func (o AccessApprovalPolicyArrayOutput) ToAccessApprovalPolicyArrayOutput() AccessApprovalPolicyArrayOutput {
	return o
}

func (o AccessApprovalPolicyArrayOutput) ToAccessApprovalPolicyArrayOutputWithContext(ctx context.Context) AccessApprovalPolicyArrayOutput {
	return o
}

func (o AccessApprovalPolicyArrayOutput) Index(i pulumi.IntInput) AccessApprovalPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessApprovalPolicy {
		return vs[0].([]*AccessApprovalPolicy)[vs[1].(int)]
	}).(AccessApprovalPolicyOutput)
}

type AccessApprovalPolicyMapOutput struct{ *pulumi.OutputState }

func (AccessApprovalPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessApprovalPolicy)(nil)).Elem()
}

func (o AccessApprovalPolicyMapOutput) ToAccessApprovalPolicyMapOutput() AccessApprovalPolicyMapOutput {
	return o
}

func (o AccessApprovalPolicyMapOutput) ToAccessApprovalPolicyMapOutputWithContext(ctx context.Context) AccessApprovalPolicyMapOutput {
	return o
}

func (o AccessApprovalPolicyMapOutput) MapIndex(k pulumi.StringInput) AccessApprovalPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessApprovalPolicy {
		return vs[0].(map[string]*AccessApprovalPolicy)[vs[1].(string)]
	}).(AccessApprovalPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessApprovalPolicyInput)(nil)).Elem(), &AccessApprovalPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessApprovalPolicyArrayInput)(nil)).Elem(), AccessApprovalPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessApprovalPolicyMapInput)(nil)).Elem(), AccessApprovalPolicyMap{})
	pulumi.RegisterOutputType(AccessApprovalPolicyOutput{})
	pulumi.RegisterOutputType(AccessApprovalPolicyArrayOutput{})
	pulumi.RegisterOutputType(AccessApprovalPolicyMapOutput{})
}
