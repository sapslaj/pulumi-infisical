// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type SecretImport struct {
	pulumi.CustomResourceState

	// The environment slug of the secret import to modify/create
	EnvironmentSlug pulumi.StringOutput `pulumi:"environmentSlug"`
	// The path where the secret should be imported
	FolderPath pulumi.StringOutput `pulumi:"folderPath"`
	// The environment slug of the secret import to modify/create
	ImportEnvironmentSlug pulumi.StringOutput `pulumi:"importEnvironmentSlug"`
	// The path where the secret should be imported from
	ImportFolderPath pulumi.StringOutput `pulumi:"importFolderPath"`
	// The isReplication of the secret import to modify/create
	IsReplication pulumi.BoolOutput `pulumi:"isReplication"`
	// The Infisical project ID
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewSecretImport registers a new resource with the given unique name, arguments, and options.
func NewSecretImport(ctx *pulumi.Context,
	name string, args *SecretImportArgs, opts ...pulumi.ResourceOption) (*SecretImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSlug'")
	}
	if args.FolderPath == nil {
		return nil, errors.New("invalid value for required argument 'FolderPath'")
	}
	if args.ImportEnvironmentSlug == nil {
		return nil, errors.New("invalid value for required argument 'ImportEnvironmentSlug'")
	}
	if args.ImportFolderPath == nil {
		return nil, errors.New("invalid value for required argument 'ImportFolderPath'")
	}
	if args.IsReplication == nil {
		return nil, errors.New("invalid value for required argument 'IsReplication'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretImport
	err := ctx.RegisterResource("infisical:index/secretImport:SecretImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretImport gets an existing SecretImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretImportState, opts ...pulumi.ResourceOption) (*SecretImport, error) {
	var resource SecretImport
	err := ctx.ReadResource("infisical:index/secretImport:SecretImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretImport resources.
type secretImportState struct {
	// The environment slug of the secret import to modify/create
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// The path where the secret should be imported
	FolderPath *string `pulumi:"folderPath"`
	// The environment slug of the secret import to modify/create
	ImportEnvironmentSlug *string `pulumi:"importEnvironmentSlug"`
	// The path where the secret should be imported from
	ImportFolderPath *string `pulumi:"importFolderPath"`
	// The isReplication of the secret import to modify/create
	IsReplication *bool `pulumi:"isReplication"`
	// The Infisical project ID
	ProjectId *string `pulumi:"projectId"`
}

type SecretImportState struct {
	// The environment slug of the secret import to modify/create
	EnvironmentSlug pulumi.StringPtrInput
	// The path where the secret should be imported
	FolderPath pulumi.StringPtrInput
	// The environment slug of the secret import to modify/create
	ImportEnvironmentSlug pulumi.StringPtrInput
	// The path where the secret should be imported from
	ImportFolderPath pulumi.StringPtrInput
	// The isReplication of the secret import to modify/create
	IsReplication pulumi.BoolPtrInput
	// The Infisical project ID
	ProjectId pulumi.StringPtrInput
}

func (SecretImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretImportState)(nil)).Elem()
}

type secretImportArgs struct {
	// The environment slug of the secret import to modify/create
	EnvironmentSlug string `pulumi:"environmentSlug"`
	// The path where the secret should be imported
	FolderPath string `pulumi:"folderPath"`
	// The environment slug of the secret import to modify/create
	ImportEnvironmentSlug string `pulumi:"importEnvironmentSlug"`
	// The path where the secret should be imported from
	ImportFolderPath string `pulumi:"importFolderPath"`
	// The isReplication of the secret import to modify/create
	IsReplication bool `pulumi:"isReplication"`
	// The Infisical project ID
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a SecretImport resource.
type SecretImportArgs struct {
	// The environment slug of the secret import to modify/create
	EnvironmentSlug pulumi.StringInput
	// The path where the secret should be imported
	FolderPath pulumi.StringInput
	// The environment slug of the secret import to modify/create
	ImportEnvironmentSlug pulumi.StringInput
	// The path where the secret should be imported from
	ImportFolderPath pulumi.StringInput
	// The isReplication of the secret import to modify/create
	IsReplication pulumi.BoolInput
	// The Infisical project ID
	ProjectId pulumi.StringInput
}

func (SecretImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretImportArgs)(nil)).Elem()
}

type SecretImportInput interface {
	pulumi.Input

	ToSecretImportOutput() SecretImportOutput
	ToSecretImportOutputWithContext(ctx context.Context) SecretImportOutput
}

func (*SecretImport) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretImport)(nil)).Elem()
}

func (i *SecretImport) ToSecretImportOutput() SecretImportOutput {
	return i.ToSecretImportOutputWithContext(context.Background())
}

func (i *SecretImport) ToSecretImportOutputWithContext(ctx context.Context) SecretImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretImportOutput)
}

// SecretImportArrayInput is an input type that accepts SecretImportArray and SecretImportArrayOutput values.
// You can construct a concrete instance of `SecretImportArrayInput` via:
//
//	SecretImportArray{ SecretImportArgs{...} }
type SecretImportArrayInput interface {
	pulumi.Input

	ToSecretImportArrayOutput() SecretImportArrayOutput
	ToSecretImportArrayOutputWithContext(context.Context) SecretImportArrayOutput
}

type SecretImportArray []SecretImportInput

func (SecretImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretImport)(nil)).Elem()
}

func (i SecretImportArray) ToSecretImportArrayOutput() SecretImportArrayOutput {
	return i.ToSecretImportArrayOutputWithContext(context.Background())
}

func (i SecretImportArray) ToSecretImportArrayOutputWithContext(ctx context.Context) SecretImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretImportArrayOutput)
}

// SecretImportMapInput is an input type that accepts SecretImportMap and SecretImportMapOutput values.
// You can construct a concrete instance of `SecretImportMapInput` via:
//
//	SecretImportMap{ "key": SecretImportArgs{...} }
type SecretImportMapInput interface {
	pulumi.Input

	ToSecretImportMapOutput() SecretImportMapOutput
	ToSecretImportMapOutputWithContext(context.Context) SecretImportMapOutput
}

type SecretImportMap map[string]SecretImportInput

func (SecretImportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretImport)(nil)).Elem()
}

func (i SecretImportMap) ToSecretImportMapOutput() SecretImportMapOutput {
	return i.ToSecretImportMapOutputWithContext(context.Background())
}

func (i SecretImportMap) ToSecretImportMapOutputWithContext(ctx context.Context) SecretImportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretImportMapOutput)
}

type SecretImportOutput struct{ *pulumi.OutputState }

func (SecretImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretImport)(nil)).Elem()
}

func (o SecretImportOutput) ToSecretImportOutput() SecretImportOutput {
	return o
}

func (o SecretImportOutput) ToSecretImportOutputWithContext(ctx context.Context) SecretImportOutput {
	return o
}

// The environment slug of the secret import to modify/create
func (o SecretImportOutput) EnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.StringOutput { return v.EnvironmentSlug }).(pulumi.StringOutput)
}

// The path where the secret should be imported
func (o SecretImportOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.StringOutput { return v.FolderPath }).(pulumi.StringOutput)
}

// The environment slug of the secret import to modify/create
func (o SecretImportOutput) ImportEnvironmentSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.StringOutput { return v.ImportEnvironmentSlug }).(pulumi.StringOutput)
}

// The path where the secret should be imported from
func (o SecretImportOutput) ImportFolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.StringOutput { return v.ImportFolderPath }).(pulumi.StringOutput)
}

// The isReplication of the secret import to modify/create
func (o SecretImportOutput) IsReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.BoolOutput { return v.IsReplication }).(pulumi.BoolOutput)
}

// The Infisical project ID
func (o SecretImportOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretImport) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type SecretImportArrayOutput struct{ *pulumi.OutputState }

func (SecretImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretImport)(nil)).Elem()
}

func (o SecretImportArrayOutput) ToSecretImportArrayOutput() SecretImportArrayOutput {
	return o
}

func (o SecretImportArrayOutput) ToSecretImportArrayOutputWithContext(ctx context.Context) SecretImportArrayOutput {
	return o
}

func (o SecretImportArrayOutput) Index(i pulumi.IntInput) SecretImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretImport {
		return vs[0].([]*SecretImport)[vs[1].(int)]
	}).(SecretImportOutput)
}

type SecretImportMapOutput struct{ *pulumi.OutputState }

func (SecretImportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretImport)(nil)).Elem()
}

func (o SecretImportMapOutput) ToSecretImportMapOutput() SecretImportMapOutput {
	return o
}

func (o SecretImportMapOutput) ToSecretImportMapOutputWithContext(ctx context.Context) SecretImportMapOutput {
	return o
}

func (o SecretImportMapOutput) MapIndex(k pulumi.StringInput) SecretImportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretImport {
		return vs[0].(map[string]*SecretImport)[vs[1].(string)]
	}).(SecretImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretImportInput)(nil)).Elem(), &SecretImport{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretImportArrayInput)(nil)).Elem(), SecretImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretImportMapInput)(nil)).Elem(), SecretImportMap{})
	pulumi.RegisterOutputType(SecretImportOutput{})
	pulumi.RegisterOutputType(SecretImportArrayOutput{})
	pulumi.RegisterOutputType(SecretImportMapOutput{})
}
