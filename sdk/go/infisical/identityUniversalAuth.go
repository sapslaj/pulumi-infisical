// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type IdentityUniversalAuth struct {
	pulumi.CustomResourceState

	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntOutput `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntOutput `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityUniversalAuthAccessTokenTrustedIpArrayOutput `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntOutput `pulumi:"accessTokenTtl"`
	// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
	ClientSecretTrustedIps IdentityUniversalAuthClientSecretTrustedIpArrayOutput `pulumi:"clientSecretTrustedIps"`
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
}

// NewIdentityUniversalAuth registers a new resource with the given unique name, arguments, and options.
func NewIdentityUniversalAuth(ctx *pulumi.Context,
	name string, args *IdentityUniversalAuthArgs, opts ...pulumi.ResourceOption) (*IdentityUniversalAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityUniversalAuth
	err := ctx.RegisterResource("infisical:index/identityUniversalAuth:IdentityUniversalAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityUniversalAuth gets an existing IdentityUniversalAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityUniversalAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityUniversalAuthState, opts ...pulumi.ResourceOption) (*IdentityUniversalAuth, error) {
	var resource IdentityUniversalAuth
	err := ctx.ReadResource("infisical:index/identityUniversalAuth:IdentityUniversalAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityUniversalAuth resources.
type identityUniversalAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityUniversalAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
	ClientSecretTrustedIps []IdentityUniversalAuthClientSecretTrustedIp `pulumi:"clientSecretTrustedIps"`
	// The ID of the identity to attach the configuration onto.
	IdentityId *string `pulumi:"identityId"`
}

type IdentityUniversalAuthState struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityUniversalAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
	ClientSecretTrustedIps IdentityUniversalAuthClientSecretTrustedIpArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringPtrInput
}

func (IdentityUniversalAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUniversalAuthState)(nil)).Elem()
}

type identityUniversalAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl *int `pulumi:"accessTokenMaxTtl"`
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit *int `pulumi:"accessTokenNumUsesLimit"`
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps []IdentityUniversalAuthAccessTokenTrustedIp `pulumi:"accessTokenTrustedIps"`
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl *int `pulumi:"accessTokenTtl"`
	// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
	ClientSecretTrustedIps []IdentityUniversalAuthClientSecretTrustedIp `pulumi:"clientSecretTrustedIps"`
	// The ID of the identity to attach the configuration onto.
	IdentityId string `pulumi:"identityId"`
}

// The set of arguments for constructing a IdentityUniversalAuth resource.
type IdentityUniversalAuthArgs struct {
	// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenMaxTtl pulumi.IntPtrInput
	// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
	AccessTokenNumUsesLimit pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
	AccessTokenTrustedIps IdentityUniversalAuthAccessTokenTrustedIpArrayInput
	// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
	AccessTokenTtl pulumi.IntPtrInput
	// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
	ClientSecretTrustedIps IdentityUniversalAuthClientSecretTrustedIpArrayInput
	// The ID of the identity to attach the configuration onto.
	IdentityId pulumi.StringInput
}

func (IdentityUniversalAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUniversalAuthArgs)(nil)).Elem()
}

type IdentityUniversalAuthInput interface {
	pulumi.Input

	ToIdentityUniversalAuthOutput() IdentityUniversalAuthOutput
	ToIdentityUniversalAuthOutputWithContext(ctx context.Context) IdentityUniversalAuthOutput
}

func (*IdentityUniversalAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUniversalAuth)(nil)).Elem()
}

func (i *IdentityUniversalAuth) ToIdentityUniversalAuthOutput() IdentityUniversalAuthOutput {
	return i.ToIdentityUniversalAuthOutputWithContext(context.Background())
}

func (i *IdentityUniversalAuth) ToIdentityUniversalAuthOutputWithContext(ctx context.Context) IdentityUniversalAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUniversalAuthOutput)
}

// IdentityUniversalAuthArrayInput is an input type that accepts IdentityUniversalAuthArray and IdentityUniversalAuthArrayOutput values.
// You can construct a concrete instance of `IdentityUniversalAuthArrayInput` via:
//
//	IdentityUniversalAuthArray{ IdentityUniversalAuthArgs{...} }
type IdentityUniversalAuthArrayInput interface {
	pulumi.Input

	ToIdentityUniversalAuthArrayOutput() IdentityUniversalAuthArrayOutput
	ToIdentityUniversalAuthArrayOutputWithContext(context.Context) IdentityUniversalAuthArrayOutput
}

type IdentityUniversalAuthArray []IdentityUniversalAuthInput

func (IdentityUniversalAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityUniversalAuth)(nil)).Elem()
}

func (i IdentityUniversalAuthArray) ToIdentityUniversalAuthArrayOutput() IdentityUniversalAuthArrayOutput {
	return i.ToIdentityUniversalAuthArrayOutputWithContext(context.Background())
}

func (i IdentityUniversalAuthArray) ToIdentityUniversalAuthArrayOutputWithContext(ctx context.Context) IdentityUniversalAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUniversalAuthArrayOutput)
}

// IdentityUniversalAuthMapInput is an input type that accepts IdentityUniversalAuthMap and IdentityUniversalAuthMapOutput values.
// You can construct a concrete instance of `IdentityUniversalAuthMapInput` via:
//
//	IdentityUniversalAuthMap{ "key": IdentityUniversalAuthArgs{...} }
type IdentityUniversalAuthMapInput interface {
	pulumi.Input

	ToIdentityUniversalAuthMapOutput() IdentityUniversalAuthMapOutput
	ToIdentityUniversalAuthMapOutputWithContext(context.Context) IdentityUniversalAuthMapOutput
}

type IdentityUniversalAuthMap map[string]IdentityUniversalAuthInput

func (IdentityUniversalAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityUniversalAuth)(nil)).Elem()
}

func (i IdentityUniversalAuthMap) ToIdentityUniversalAuthMapOutput() IdentityUniversalAuthMapOutput {
	return i.ToIdentityUniversalAuthMapOutputWithContext(context.Background())
}

func (i IdentityUniversalAuthMap) ToIdentityUniversalAuthMapOutputWithContext(ctx context.Context) IdentityUniversalAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUniversalAuthMapOutput)
}

type IdentityUniversalAuthOutput struct{ *pulumi.OutputState }

func (IdentityUniversalAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUniversalAuth)(nil)).Elem()
}

func (o IdentityUniversalAuthOutput) ToIdentityUniversalAuthOutput() IdentityUniversalAuthOutput {
	return o
}

func (o IdentityUniversalAuthOutput) ToIdentityUniversalAuthOutputWithContext(ctx context.Context) IdentityUniversalAuthOutput {
	return o
}

// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityUniversalAuthOutput) AccessTokenMaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) pulumi.IntOutput { return v.AccessTokenMaxTtl }).(pulumi.IntOutput)
}

// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
func (o IdentityUniversalAuthOutput) AccessTokenNumUsesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) pulumi.IntOutput { return v.AccessTokenNumUsesLimit }).(pulumi.IntOutput)
}

// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
func (o IdentityUniversalAuthOutput) AccessTokenTrustedIps() IdentityUniversalAuthAccessTokenTrustedIpArrayOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) IdentityUniversalAuthAccessTokenTrustedIpArrayOutput {
		return v.AccessTokenTrustedIps
	}).(IdentityUniversalAuthAccessTokenTrustedIpArrayOutput)
}

// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
func (o IdentityUniversalAuthOutput) AccessTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) pulumi.IntOutput { return v.AccessTokenTtl }).(pulumi.IntOutput)
}

// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
func (o IdentityUniversalAuthOutput) ClientSecretTrustedIps() IdentityUniversalAuthClientSecretTrustedIpArrayOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) IdentityUniversalAuthClientSecretTrustedIpArrayOutput {
		return v.ClientSecretTrustedIps
	}).(IdentityUniversalAuthClientSecretTrustedIpArrayOutput)
}

// The ID of the identity to attach the configuration onto.
func (o IdentityUniversalAuthOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityUniversalAuth) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

type IdentityUniversalAuthArrayOutput struct{ *pulumi.OutputState }

func (IdentityUniversalAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityUniversalAuth)(nil)).Elem()
}

func (o IdentityUniversalAuthArrayOutput) ToIdentityUniversalAuthArrayOutput() IdentityUniversalAuthArrayOutput {
	return o
}

func (o IdentityUniversalAuthArrayOutput) ToIdentityUniversalAuthArrayOutputWithContext(ctx context.Context) IdentityUniversalAuthArrayOutput {
	return o
}

func (o IdentityUniversalAuthArrayOutput) Index(i pulumi.IntInput) IdentityUniversalAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityUniversalAuth {
		return vs[0].([]*IdentityUniversalAuth)[vs[1].(int)]
	}).(IdentityUniversalAuthOutput)
}

type IdentityUniversalAuthMapOutput struct{ *pulumi.OutputState }

func (IdentityUniversalAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityUniversalAuth)(nil)).Elem()
}

func (o IdentityUniversalAuthMapOutput) ToIdentityUniversalAuthMapOutput() IdentityUniversalAuthMapOutput {
	return o
}

func (o IdentityUniversalAuthMapOutput) ToIdentityUniversalAuthMapOutputWithContext(ctx context.Context) IdentityUniversalAuthMapOutput {
	return o
}

func (o IdentityUniversalAuthMapOutput) MapIndex(k pulumi.StringInput) IdentityUniversalAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityUniversalAuth {
		return vs[0].(map[string]*IdentityUniversalAuth)[vs[1].(string)]
	}).(IdentityUniversalAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityUniversalAuthInput)(nil)).Elem(), &IdentityUniversalAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityUniversalAuthArrayInput)(nil)).Elem(), IdentityUniversalAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityUniversalAuthMapInput)(nil)).Elem(), IdentityUniversalAuthMap{})
	pulumi.RegisterOutputType(IdentityUniversalAuthOutput{})
	pulumi.RegisterOutputType(IdentityUniversalAuthArrayOutput{})
	pulumi.RegisterOutputType(IdentityUniversalAuthMapOutput{})
}
