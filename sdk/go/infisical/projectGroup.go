// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type ProjectGroup struct {
	pulumi.CustomResourceState

	// The id of the group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The name of the group.
	GroupName pulumi.StringPtrOutput `pulumi:"groupName"`
	// The membership Id of the project group
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// The id of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The roles assigned to the project group
	Roles ProjectGroupRoleArrayOutput `pulumi:"roles"`
}

// NewProjectGroup registers a new resource with the given unique name, arguments, and options.
func NewProjectGroup(ctx *pulumi.Context,
	name string, args *ProjectGroupArgs, opts ...pulumi.ResourceOption) (*ProjectGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectGroup
	err := ctx.RegisterResource("infisical:index/projectGroup:ProjectGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectGroup gets an existing ProjectGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectGroupState, opts ...pulumi.ResourceOption) (*ProjectGroup, error) {
	var resource ProjectGroup
	err := ctx.ReadResource("infisical:index/projectGroup:ProjectGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectGroup resources.
type projectGroupState struct {
	// The id of the group.
	GroupId *string `pulumi:"groupId"`
	// The name of the group.
	GroupName *string `pulumi:"groupName"`
	// The membership Id of the project group
	MembershipId *string `pulumi:"membershipId"`
	// The id of the project.
	ProjectId *string `pulumi:"projectId"`
	// The roles assigned to the project group
	Roles []ProjectGroupRole `pulumi:"roles"`
}

type ProjectGroupState struct {
	// The id of the group.
	GroupId pulumi.StringPtrInput
	// The name of the group.
	GroupName pulumi.StringPtrInput
	// The membership Id of the project group
	MembershipId pulumi.StringPtrInput
	// The id of the project.
	ProjectId pulumi.StringPtrInput
	// The roles assigned to the project group
	Roles ProjectGroupRoleArrayInput
}

func (ProjectGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupState)(nil)).Elem()
}

type projectGroupArgs struct {
	// The id of the group.
	GroupId *string `pulumi:"groupId"`
	// The name of the group.
	GroupName *string `pulumi:"groupName"`
	// The id of the project.
	ProjectId string `pulumi:"projectId"`
	// The roles assigned to the project group
	Roles []ProjectGroupRole `pulumi:"roles"`
}

// The set of arguments for constructing a ProjectGroup resource.
type ProjectGroupArgs struct {
	// The id of the group.
	GroupId pulumi.StringPtrInput
	// The name of the group.
	GroupName pulumi.StringPtrInput
	// The id of the project.
	ProjectId pulumi.StringInput
	// The roles assigned to the project group
	Roles ProjectGroupRoleArrayInput
}

func (ProjectGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupArgs)(nil)).Elem()
}

type ProjectGroupInput interface {
	pulumi.Input

	ToProjectGroupOutput() ProjectGroupOutput
	ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput
}

func (*ProjectGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroup)(nil)).Elem()
}

func (i *ProjectGroup) ToProjectGroupOutput() ProjectGroupOutput {
	return i.ToProjectGroupOutputWithContext(context.Background())
}

func (i *ProjectGroup) ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupOutput)
}

// ProjectGroupArrayInput is an input type that accepts ProjectGroupArray and ProjectGroupArrayOutput values.
// You can construct a concrete instance of `ProjectGroupArrayInput` via:
//
//	ProjectGroupArray{ ProjectGroupArgs{...} }
type ProjectGroupArrayInput interface {
	pulumi.Input

	ToProjectGroupArrayOutput() ProjectGroupArrayOutput
	ToProjectGroupArrayOutputWithContext(context.Context) ProjectGroupArrayOutput
}

type ProjectGroupArray []ProjectGroupInput

func (ProjectGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroup)(nil)).Elem()
}

func (i ProjectGroupArray) ToProjectGroupArrayOutput() ProjectGroupArrayOutput {
	return i.ToProjectGroupArrayOutputWithContext(context.Background())
}

func (i ProjectGroupArray) ToProjectGroupArrayOutputWithContext(ctx context.Context) ProjectGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupArrayOutput)
}

// ProjectGroupMapInput is an input type that accepts ProjectGroupMap and ProjectGroupMapOutput values.
// You can construct a concrete instance of `ProjectGroupMapInput` via:
//
//	ProjectGroupMap{ "key": ProjectGroupArgs{...} }
type ProjectGroupMapInput interface {
	pulumi.Input

	ToProjectGroupMapOutput() ProjectGroupMapOutput
	ToProjectGroupMapOutputWithContext(context.Context) ProjectGroupMapOutput
}

type ProjectGroupMap map[string]ProjectGroupInput

func (ProjectGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroup)(nil)).Elem()
}

func (i ProjectGroupMap) ToProjectGroupMapOutput() ProjectGroupMapOutput {
	return i.ToProjectGroupMapOutputWithContext(context.Background())
}

func (i ProjectGroupMap) ToProjectGroupMapOutputWithContext(ctx context.Context) ProjectGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupMapOutput)
}

type ProjectGroupOutput struct{ *pulumi.OutputState }

func (ProjectGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupOutput) ToProjectGroupOutput() ProjectGroupOutput {
	return o
}

func (o ProjectGroupOutput) ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput {
	return o
}

// The id of the group.
func (o ProjectGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The name of the group.
func (o ProjectGroupOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringPtrOutput { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The membership Id of the project group
func (o ProjectGroupOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The id of the project.
func (o ProjectGroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The roles assigned to the project group
func (o ProjectGroupOutput) Roles() ProjectGroupRoleArrayOutput {
	return o.ApplyT(func(v *ProjectGroup) ProjectGroupRoleArrayOutput { return v.Roles }).(ProjectGroupRoleArrayOutput)
}

type ProjectGroupArrayOutput struct{ *pulumi.OutputState }

func (ProjectGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupArrayOutput) ToProjectGroupArrayOutput() ProjectGroupArrayOutput {
	return o
}

func (o ProjectGroupArrayOutput) ToProjectGroupArrayOutputWithContext(ctx context.Context) ProjectGroupArrayOutput {
	return o
}

func (o ProjectGroupArrayOutput) Index(i pulumi.IntInput) ProjectGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectGroup {
		return vs[0].([]*ProjectGroup)[vs[1].(int)]
	}).(ProjectGroupOutput)
}

type ProjectGroupMapOutput struct{ *pulumi.OutputState }

func (ProjectGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupMapOutput) ToProjectGroupMapOutput() ProjectGroupMapOutput {
	return o
}

func (o ProjectGroupMapOutput) ToProjectGroupMapOutputWithContext(ctx context.Context) ProjectGroupMapOutput {
	return o
}

func (o ProjectGroupMapOutput) MapIndex(k pulumi.StringInput) ProjectGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectGroup {
		return vs[0].(map[string]*ProjectGroup)[vs[1].(string)]
	}).(ProjectGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupInput)(nil)).Elem(), &ProjectGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupArrayInput)(nil)).Elem(), ProjectGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupMapInput)(nil)).Elem(), ProjectGroupMap{})
	pulumi.RegisterOutputType(ProjectGroupOutput{})
	pulumi.RegisterOutputType(ProjectGroupArrayOutput{})
	pulumi.RegisterOutputType(ProjectGroupMapOutput{})
}
