// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package infisical

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/pulumi-infisical/sdk/go/infisical/internal"
)

type AppConnectionRender struct {
	pulumi.CustomResourceState

	// The credentials for the Render App Connection
	Credentials AppConnectionRenderCredentialsOutput `pulumi:"credentials"`
	// The hash of the Render App Connection credentials
	CredentialsHash pulumi.StringOutput `pulumi:"credentialsHash"`
	// An optional description for the Render App Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The method used to authenticate with Render. Possible values are: api-key
	Method pulumi.StringOutput `pulumi:"method"`
	// The name of the Render App Connection to create. Must be slug-friendly
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConnectionRender registers a new resource with the given unique name, arguments, and options.
func NewAppConnectionRender(ctx *pulumi.Context,
	name string, args *AppConnectionRenderArgs, opts ...pulumi.ResourceOption) (*AppConnectionRender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppConnectionRender
	err := ctx.RegisterResource("infisical:index/appConnectionRender:AppConnectionRender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConnectionRender gets an existing AppConnectionRender resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConnectionRender(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConnectionRenderState, opts ...pulumi.ResourceOption) (*AppConnectionRender, error) {
	var resource AppConnectionRender
	err := ctx.ReadResource("infisical:index/appConnectionRender:AppConnectionRender", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConnectionRender resources.
type appConnectionRenderState struct {
	// The credentials for the Render App Connection
	Credentials *AppConnectionRenderCredentials `pulumi:"credentials"`
	// The hash of the Render App Connection credentials
	CredentialsHash *string `pulumi:"credentialsHash"`
	// An optional description for the Render App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Render. Possible values are: api-key
	Method *string `pulumi:"method"`
	// The name of the Render App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

type AppConnectionRenderState struct {
	// The credentials for the Render App Connection
	Credentials AppConnectionRenderCredentialsPtrInput
	// The hash of the Render App Connection credentials
	CredentialsHash pulumi.StringPtrInput
	// An optional description for the Render App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Render. Possible values are: api-key
	Method pulumi.StringPtrInput
	// The name of the Render App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionRenderState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionRenderState)(nil)).Elem()
}

type appConnectionRenderArgs struct {
	// The credentials for the Render App Connection
	Credentials AppConnectionRenderCredentials `pulumi:"credentials"`
	// An optional description for the Render App Connection.
	Description *string `pulumi:"description"`
	// The method used to authenticate with Render. Possible values are: api-key
	Method string `pulumi:"method"`
	// The name of the Render App Connection to create. Must be slug-friendly
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConnectionRender resource.
type AppConnectionRenderArgs struct {
	// The credentials for the Render App Connection
	Credentials AppConnectionRenderCredentialsInput
	// An optional description for the Render App Connection.
	Description pulumi.StringPtrInput
	// The method used to authenticate with Render. Possible values are: api-key
	Method pulumi.StringInput
	// The name of the Render App Connection to create. Must be slug-friendly
	Name pulumi.StringPtrInput
}

func (AppConnectionRenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConnectionRenderArgs)(nil)).Elem()
}

type AppConnectionRenderInput interface {
	pulumi.Input

	ToAppConnectionRenderOutput() AppConnectionRenderOutput
	ToAppConnectionRenderOutputWithContext(ctx context.Context) AppConnectionRenderOutput
}

func (*AppConnectionRender) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionRender)(nil)).Elem()
}

func (i *AppConnectionRender) ToAppConnectionRenderOutput() AppConnectionRenderOutput {
	return i.ToAppConnectionRenderOutputWithContext(context.Background())
}

func (i *AppConnectionRender) ToAppConnectionRenderOutputWithContext(ctx context.Context) AppConnectionRenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionRenderOutput)
}

// AppConnectionRenderArrayInput is an input type that accepts AppConnectionRenderArray and AppConnectionRenderArrayOutput values.
// You can construct a concrete instance of `AppConnectionRenderArrayInput` via:
//
//	AppConnectionRenderArray{ AppConnectionRenderArgs{...} }
type AppConnectionRenderArrayInput interface {
	pulumi.Input

	ToAppConnectionRenderArrayOutput() AppConnectionRenderArrayOutput
	ToAppConnectionRenderArrayOutputWithContext(context.Context) AppConnectionRenderArrayOutput
}

type AppConnectionRenderArray []AppConnectionRenderInput

func (AppConnectionRenderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionRender)(nil)).Elem()
}

func (i AppConnectionRenderArray) ToAppConnectionRenderArrayOutput() AppConnectionRenderArrayOutput {
	return i.ToAppConnectionRenderArrayOutputWithContext(context.Background())
}

func (i AppConnectionRenderArray) ToAppConnectionRenderArrayOutputWithContext(ctx context.Context) AppConnectionRenderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionRenderArrayOutput)
}

// AppConnectionRenderMapInput is an input type that accepts AppConnectionRenderMap and AppConnectionRenderMapOutput values.
// You can construct a concrete instance of `AppConnectionRenderMapInput` via:
//
//	AppConnectionRenderMap{ "key": AppConnectionRenderArgs{...} }
type AppConnectionRenderMapInput interface {
	pulumi.Input

	ToAppConnectionRenderMapOutput() AppConnectionRenderMapOutput
	ToAppConnectionRenderMapOutputWithContext(context.Context) AppConnectionRenderMapOutput
}

type AppConnectionRenderMap map[string]AppConnectionRenderInput

func (AppConnectionRenderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionRender)(nil)).Elem()
}

func (i AppConnectionRenderMap) ToAppConnectionRenderMapOutput() AppConnectionRenderMapOutput {
	return i.ToAppConnectionRenderMapOutputWithContext(context.Background())
}

func (i AppConnectionRenderMap) ToAppConnectionRenderMapOutputWithContext(ctx context.Context) AppConnectionRenderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConnectionRenderMapOutput)
}

type AppConnectionRenderOutput struct{ *pulumi.OutputState }

func (AppConnectionRenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConnectionRender)(nil)).Elem()
}

func (o AppConnectionRenderOutput) ToAppConnectionRenderOutput() AppConnectionRenderOutput {
	return o
}

func (o AppConnectionRenderOutput) ToAppConnectionRenderOutputWithContext(ctx context.Context) AppConnectionRenderOutput {
	return o
}

// The credentials for the Render App Connection
func (o AppConnectionRenderOutput) Credentials() AppConnectionRenderCredentialsOutput {
	return o.ApplyT(func(v *AppConnectionRender) AppConnectionRenderCredentialsOutput { return v.Credentials }).(AppConnectionRenderCredentialsOutput)
}

// The hash of the Render App Connection credentials
func (o AppConnectionRenderOutput) CredentialsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionRender) pulumi.StringOutput { return v.CredentialsHash }).(pulumi.StringOutput)
}

// An optional description for the Render App Connection.
func (o AppConnectionRenderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppConnectionRender) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The method used to authenticate with Render. Possible values are: api-key
func (o AppConnectionRenderOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionRender) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name of the Render App Connection to create. Must be slug-friendly
func (o AppConnectionRenderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConnectionRender) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConnectionRenderArrayOutput struct{ *pulumi.OutputState }

func (AppConnectionRenderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConnectionRender)(nil)).Elem()
}

func (o AppConnectionRenderArrayOutput) ToAppConnectionRenderArrayOutput() AppConnectionRenderArrayOutput {
	return o
}

func (o AppConnectionRenderArrayOutput) ToAppConnectionRenderArrayOutputWithContext(ctx context.Context) AppConnectionRenderArrayOutput {
	return o
}

func (o AppConnectionRenderArrayOutput) Index(i pulumi.IntInput) AppConnectionRenderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConnectionRender {
		return vs[0].([]*AppConnectionRender)[vs[1].(int)]
	}).(AppConnectionRenderOutput)
}

type AppConnectionRenderMapOutput struct{ *pulumi.OutputState }

func (AppConnectionRenderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConnectionRender)(nil)).Elem()
}

func (o AppConnectionRenderMapOutput) ToAppConnectionRenderMapOutput() AppConnectionRenderMapOutput {
	return o
}

func (o AppConnectionRenderMapOutput) ToAppConnectionRenderMapOutputWithContext(ctx context.Context) AppConnectionRenderMapOutput {
	return o
}

func (o AppConnectionRenderMapOutput) MapIndex(k pulumi.StringInput) AppConnectionRenderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConnectionRender {
		return vs[0].(map[string]*AppConnectionRender)[vs[1].(string)]
	}).(AppConnectionRenderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionRenderInput)(nil)).Elem(), &AppConnectionRender{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionRenderArrayInput)(nil)).Elem(), AppConnectionRenderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConnectionRenderMapInput)(nil)).Elem(), AppConnectionRenderMap{})
	pulumi.RegisterOutputType(AppConnectionRenderOutput{})
	pulumi.RegisterOutputType(AppConnectionRenderArrayOutput{})
	pulumi.RegisterOutputType(AppConnectionRenderMapOutput{})
}
