// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical.Outputs
{

    [OutputType]
    public sealed class DynamicSecretAwsIamConfiguration
    {
        /// <summary>
        /// Configuration for the 'access_key' authentication method.
        /// </summary>
        public readonly Outputs.DynamicSecretAwsIamConfigurationAccessKeyConfig? AccessKeyConfig;
        /// <summary>
        /// Configuration for the 'assume_role' authentication method.
        /// </summary>
        public readonly Outputs.DynamicSecretAwsIamConfigurationAssumeRoleConfig? AssumeRoleConfig;
        /// <summary>
        /// IAM AWS Path to scope created IAM User resource access.
        /// </summary>
        public readonly string? AwsPath;
        /// <summary>
        /// The authentication method to use. Must be 'access_key' or 'assume_role'.
        /// </summary>
        public readonly string Method;
        /// <summary>
        /// The IAM Policy ARN of the AWS Permissions Boundary to attach to IAM users created in the role.
        /// </summary>
        public readonly string? PermissionBoundaryPolicyArn;
        /// <summary>
        /// The AWS IAM managed policies that should be attached to the created users. Multiple values can be provided by separating them with commas
        /// </summary>
        public readonly string? PolicyArns;
        /// <summary>
        /// The AWS IAM inline policy that should be attached to the created users. Multiple values can be provided by separating them with commas
        /// </summary>
        public readonly string? PolicyDocument;
        /// <summary>
        /// The AWS data center region.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The AWS IAM groups that should be assigned to the created users. Multiple values can be provided by separating them with commas
        /// </summary>
        public readonly string? UserGroups;

        [OutputConstructor]
        private DynamicSecretAwsIamConfiguration(
            Outputs.DynamicSecretAwsIamConfigurationAccessKeyConfig? accessKeyConfig,

            Outputs.DynamicSecretAwsIamConfigurationAssumeRoleConfig? assumeRoleConfig,

            string? awsPath,

            string method,

            string? permissionBoundaryPolicyArn,

            string? policyArns,

            string? policyDocument,

            string region,

            string? userGroups)
        {
            AccessKeyConfig = accessKeyConfig;
            AssumeRoleConfig = assumeRoleConfig;
            AwsPath = awsPath;
            Method = method;
            PermissionBoundaryPolicyArn = permissionBoundaryPolicyArn;
            PolicyArns = policyArns;
            PolicyDocument = policyDocument;
            Region = region;
            UserGroups = userGroups;
        }
    }
}
