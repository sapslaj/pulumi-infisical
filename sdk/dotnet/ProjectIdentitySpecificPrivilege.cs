// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege")]
    public partial class ProjectIdentitySpecificPrivilege : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The identity id to create identity specific privilege
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.
        /// </summary>
        [Output("isTemporary")]
        public Output<bool> IsTemporary { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
        /// </summary>
        [Output("permission")]
        public Output<Outputs.ProjectIdentitySpecificPrivilegePermission?> Permission { get; private set; } = null!;

        /// <summary>
        /// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        [Output("permissionsV2s")]
        public Output<ImmutableArray<Outputs.ProjectIdentitySpecificPrivilegePermissionsV2>> PermissionsV2s { get; private set; } = null!;

        /// <summary>
        /// The slug of the project to create identity specific privilege
        /// </summary>
        [Output("projectSlug")]
        public Output<string> ProjectSlug { get; private set; } = null!;

        /// <summary>
        /// The slug for the new privilege
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time
        /// </summary>
        [Output("temporaryAccessEndTime")]
        public Output<string> TemporaryAccessEndTime { get; private set; } = null!;

        /// <summary>
        /// ISO time for which temporary access should begin. The current time is used by default.
        /// </summary>
        [Output("temporaryAccessStartTime")]
        public Output<string> TemporaryAccessStartTime { get; private set; } = null!;

        /// <summary>
        /// Type of temporary access given. Types: relative. Default: relative
        /// </summary>
        [Output("temporaryMode")]
        public Output<string> TemporaryMode { get; private set; } = null!;

        /// <summary>
        /// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
        /// </summary>
        [Output("temporaryRange")]
        public Output<string> TemporaryRange { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectIdentitySpecificPrivilege resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectIdentitySpecificPrivilege(string name, ProjectIdentitySpecificPrivilegeArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege", name, args ?? new ProjectIdentitySpecificPrivilegeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectIdentitySpecificPrivilege(string name, Input<string> id, ProjectIdentitySpecificPrivilegeState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectIdentitySpecificPrivilege resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectIdentitySpecificPrivilege Get(string name, Input<string> id, ProjectIdentitySpecificPrivilegeState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectIdentitySpecificPrivilege(name, id, state, options);
        }
    }

    public sealed class ProjectIdentitySpecificPrivilegeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identity id to create identity specific privilege
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.
        /// </summary>
        [Input("isTemporary")]
        public Input<bool>? IsTemporary { get; set; }

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
        /// </summary>
        [Input("permission")]
        public Input<Inputs.ProjectIdentitySpecificPrivilegePermissionArgs>? Permission { get; set; }

        [Input("permissionsV2s")]
        private InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2Args>? _permissionsV2s;

        /// <summary>
        /// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        public InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2Args> PermissionsV2s
        {
            get => _permissionsV2s ?? (_permissionsV2s = new InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2Args>());
            set => _permissionsV2s = value;
        }

        /// <summary>
        /// The slug of the project to create identity specific privilege
        /// </summary>
        [Input("projectSlug", required: true)]
        public Input<string> ProjectSlug { get; set; } = null!;

        /// <summary>
        /// The slug for the new privilege
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time
        /// </summary>
        [Input("temporaryAccessEndTime")]
        public Input<string>? TemporaryAccessEndTime { get; set; }

        /// <summary>
        /// ISO time for which temporary access should begin. The current time is used by default.
        /// </summary>
        [Input("temporaryAccessStartTime")]
        public Input<string>? TemporaryAccessStartTime { get; set; }

        /// <summary>
        /// Type of temporary access given. Types: relative. Default: relative
        /// </summary>
        [Input("temporaryMode")]
        public Input<string>? TemporaryMode { get; set; }

        /// <summary>
        /// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
        /// </summary>
        [Input("temporaryRange")]
        public Input<string>? TemporaryRange { get; set; }

        public ProjectIdentitySpecificPrivilegeArgs()
        {
        }
        public static new ProjectIdentitySpecificPrivilegeArgs Empty => new ProjectIdentitySpecificPrivilegeArgs();
    }

    public sealed class ProjectIdentitySpecificPrivilegeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identity id to create identity specific privilege
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.
        /// </summary>
        [Input("isTemporary")]
        public Input<bool>? IsTemporary { get; set; }

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege
        /// </summary>
        [Input("permission")]
        public Input<Inputs.ProjectIdentitySpecificPrivilegePermissionGetArgs>? Permission { get; set; }

        [Input("permissionsV2s")]
        private InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2GetArgs>? _permissionsV2s;

        /// <summary>
        /// The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        public InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2GetArgs> PermissionsV2s
        {
            get => _permissionsV2s ?? (_permissionsV2s = new InputList<Inputs.ProjectIdentitySpecificPrivilegePermissionsV2GetArgs>());
            set => _permissionsV2s = value;
        }

        /// <summary>
        /// The slug of the project to create identity specific privilege
        /// </summary>
        [Input("projectSlug")]
        public Input<string>? ProjectSlug { get; set; }

        /// <summary>
        /// The slug for the new privilege
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time
        /// </summary>
        [Input("temporaryAccessEndTime")]
        public Input<string>? TemporaryAccessEndTime { get; set; }

        /// <summary>
        /// ISO time for which temporary access should begin. The current time is used by default.
        /// </summary>
        [Input("temporaryAccessStartTime")]
        public Input<string>? TemporaryAccessStartTime { get; set; }

        /// <summary>
        /// Type of temporary access given. Types: relative. Default: relative
        /// </summary>
        [Input("temporaryMode")]
        public Input<string>? TemporaryMode { get; set; }

        /// <summary>
        /// TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h
        /// </summary>
        [Input("temporaryRange")]
        public Input<string>? TemporaryRange { get; set; }

        public ProjectIdentitySpecificPrivilegeState()
        {
        }
        public static new ProjectIdentitySpecificPrivilegeState Empty => new ProjectIdentitySpecificPrivilegeState();
    }
}
