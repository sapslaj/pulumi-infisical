// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager")]
    public partial class IntegrationGcpSecretManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the GCP project.
        /// </summary>
        [Output("gcpProjectId")]
        public Output<string> GcpProjectId { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Output("integrationAuthId")]
        public Output<string> IntegrationAuthId { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Output("integrationId")]
        public Output<string> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// Integration options
        /// </summary>
        [Output("options")]
        public Output<Outputs.IntegrationGcpSecretManagerOptions> Options { get; private set; } = null!;

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;

        /// <summary>
        /// Service account json for the GCP project.
        /// </summary>
        [Output("serviceAccountJson")]
        public Output<string> ServiceAccountJson { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationGcpSecretManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationGcpSecretManager(string name, IntegrationGcpSecretManagerArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager", name, args ?? new IntegrationGcpSecretManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationGcpSecretManager(string name, Input<string> id, IntegrationGcpSecretManagerState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "serviceAccountJson",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationGcpSecretManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationGcpSecretManager Get(string name, Input<string> id, IntegrationGcpSecretManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationGcpSecretManager(name, id, state, options);
        }
    }

    public sealed class IntegrationGcpSecretManagerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the GCP project.
        /// </summary>
        [Input("gcpProjectId", required: true)]
        public Input<string> GcpProjectId { get; set; } = null!;

        /// <summary>
        /// Integration options
        /// </summary>
        [Input("options")]
        public Input<Inputs.IntegrationGcpSecretManagerOptionsArgs>? Options { get; set; }

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        [Input("serviceAccountJson", required: true)]
        private Input<string>? _serviceAccountJson;

        /// <summary>
        /// Service account json for the GCP project.
        /// </summary>
        public Input<string>? ServiceAccountJson
        {
            get => _serviceAccountJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceAccountJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public IntegrationGcpSecretManagerArgs()
        {
        }
        public static new IntegrationGcpSecretManagerArgs Empty => new IntegrationGcpSecretManagerArgs();
    }

    public sealed class IntegrationGcpSecretManagerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the GCP project.
        /// </summary>
        [Input("gcpProjectId")]
        public Input<string>? GcpProjectId { get; set; }

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Input("integrationAuthId")]
        public Input<string>? IntegrationAuthId { get; set; }

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// Integration options
        /// </summary>
        [Input("options")]
        public Input<Inputs.IntegrationGcpSecretManagerOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        [Input("serviceAccountJson")]
        private Input<string>? _serviceAccountJson;

        /// <summary>
        /// Service account json for the GCP project.
        /// </summary>
        public Input<string>? ServiceAccountJson
        {
            get => _serviceAccountJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceAccountJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public IntegrationGcpSecretManagerState()
        {
        }
        public static new IntegrationGcpSecretManagerState Empty => new IntegrationGcpSecretManagerState();
    }
}
