// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identityOidcAuth:IdentityOidcAuth")]
    public partial class IdentityOidcAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenMaxTtl")]
        public Output<int> AccessTokenMaxTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Output("accessTokenNumUsesLimit")]
        public Output<int> AccessTokenNumUsesLimit { get; private set; } = null!;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
        /// </summary>
        [Output("accessTokenTrustedIps")]
        public Output<ImmutableArray<Outputs.IdentityOidcAuthAccessTokenTrustedIp>> AccessTokenTrustedIps { get; private set; } = null!;

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenTtl")]
        public Output<int> AccessTokenTtl { get; private set; } = null!;

        /// <summary>
        /// The comma-separated list of intended recipients.
        /// </summary>
        [Output("boundAudiences")]
        public Output<ImmutableArray<string>> BoundAudiences { get; private set; } = null!;

        /// <summary>
        /// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
        /// </summary>
        [Output("boundClaims")]
        public Output<ImmutableDictionary<string, string>> BoundClaims { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the identity provider issuing the OIDC tokens.
        /// </summary>
        [Output("boundIssuer")]
        public Output<string> BoundIssuer { get; private set; } = null!;

        /// <summary>
        /// The expected principal that is the subject of the JWT.
        /// </summary>
        [Output("boundSubject")]
        public Output<string> BoundSubject { get; private set; } = null!;

        /// <summary>
        /// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
        /// </summary>
        [Output("claimMetadataMapping")]
        public Output<ImmutableDictionary<string, string>> ClaimMetadataMapping { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
        /// </summary>
        [Output("oidcCaCertificate")]
        public Output<string> OidcCaCertificate { get; private set; } = null!;

        /// <summary>
        /// The URL used to retrieve the OpenID Connect configuration from the identity provider.
        /// </summary>
        [Output("oidcDiscoveryUrl")]
        public Output<string> OidcDiscoveryUrl { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityOidcAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityOidcAuth(string name, IdentityOidcAuthArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identityOidcAuth:IdentityOidcAuth", name, args ?? new IdentityOidcAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityOidcAuth(string name, Input<string> id, IdentityOidcAuthState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identityOidcAuth:IdentityOidcAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityOidcAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityOidcAuth Get(string name, Input<string> id, IdentityOidcAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityOidcAuth(name, id, state, options);
        }
    }

    public sealed class IdentityOidcAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
        /// </summary>
        public InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("boundAudiences")]
        private InputList<string>? _boundAudiences;

        /// <summary>
        /// The comma-separated list of intended recipients.
        /// </summary>
        public InputList<string> BoundAudiences
        {
            get => _boundAudiences ?? (_boundAudiences = new InputList<string>());
            set => _boundAudiences = value;
        }

        [Input("boundClaims")]
        private InputMap<string>? _boundClaims;

        /// <summary>
        /// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
        /// </summary>
        public InputMap<string> BoundClaims
        {
            get => _boundClaims ?? (_boundClaims = new InputMap<string>());
            set => _boundClaims = value;
        }

        /// <summary>
        /// The unique identifier of the identity provider issuing the OIDC tokens.
        /// </summary>
        [Input("boundIssuer", required: true)]
        public Input<string> BoundIssuer { get; set; } = null!;

        /// <summary>
        /// The expected principal that is the subject of the JWT.
        /// </summary>
        [Input("boundSubject")]
        public Input<string>? BoundSubject { get; set; }

        [Input("claimMetadataMapping")]
        private InputMap<string>? _claimMetadataMapping;

        /// <summary>
        /// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
        /// </summary>
        public InputMap<string> ClaimMetadataMapping
        {
            get => _claimMetadataMapping ?? (_claimMetadataMapping = new InputMap<string>());
            set => _claimMetadataMapping = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
        /// </summary>
        [Input("oidcCaCertificate")]
        public Input<string>? OidcCaCertificate { get; set; }

        /// <summary>
        /// The URL used to retrieve the OpenID Connect configuration from the identity provider.
        /// </summary>
        [Input("oidcDiscoveryUrl", required: true)]
        public Input<string> OidcDiscoveryUrl { get; set; } = null!;

        public IdentityOidcAuthArgs()
        {
        }
        public static new IdentityOidcAuthArgs Empty => new IdentityOidcAuthArgs();
    }

    public sealed class IdentityOidcAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpGetArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address...
        /// </summary>
        public InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpGetArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityOidcAuthAccessTokenTrustedIpGetArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("boundAudiences")]
        private InputList<string>? _boundAudiences;

        /// <summary>
        /// The comma-separated list of intended recipients.
        /// </summary>
        public InputList<string> BoundAudiences
        {
            get => _boundAudiences ?? (_boundAudiences = new InputList<string>());
            set => _boundAudiences = value;
        }

        [Input("boundClaims")]
        private InputMap<string>? _boundClaims;

        /// <summary>
        /// The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern.
        /// </summary>
        public InputMap<string> BoundClaims
        {
            get => _boundClaims ?? (_boundClaims = new InputMap<string>());
            set => _boundClaims = value;
        }

        /// <summary>
        /// The unique identifier of the identity provider issuing the OIDC tokens.
        /// </summary>
        [Input("boundIssuer")]
        public Input<string>? BoundIssuer { get; set; }

        /// <summary>
        /// The expected principal that is the subject of the JWT.
        /// </summary>
        [Input("boundSubject")]
        public Input<string>? BoundSubject { get; set; }

        [Input("claimMetadataMapping")]
        private InputMap<string>? _claimMetadataMapping;

        /// <summary>
        /// Map OIDC token claims to metadata fields. Example: {"role": "token.groups"}, this would become identity.metadata.oidc.claims.role
        /// </summary>
        public InputMap<string> ClaimMetadataMapping
        {
            get => _claimMetadataMapping ?? (_claimMetadataMapping = new InputMap<string>());
            set => _claimMetadataMapping = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints
        /// </summary>
        [Input("oidcCaCertificate")]
        public Input<string>? OidcCaCertificate { get; set; }

        /// <summary>
        /// The URL used to retrieve the OpenID Connect configuration from the identity provider.
        /// </summary>
        [Input("oidcDiscoveryUrl")]
        public Input<string>? OidcDiscoveryUrl { get; set; }

        public IdentityOidcAuthState()
        {
        }
        public static new IdentityOidcAuthState Empty => new IdentityOidcAuthState();
    }
}
