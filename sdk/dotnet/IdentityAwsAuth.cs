// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identityAwsAuth:IdentityAwsAuth")]
    public partial class IdentityAwsAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenMaxTtl")]
        public Output<int> AccessTokenMaxTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Output("accessTokenNumUsesLimit")]
        public Output<int> AccessTokenNumUsesLimit { get; private set; } = null!;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        [Output("accessTokenTrustedIps")]
        public Output<ImmutableArray<Outputs.IdentityAwsAuthAccessTokenTrustedIp>> AccessTokenTrustedIps { get; private set; } = null!;

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenTtl")]
        public Output<int> AccessTokenTtl { get; private set; } = null!;

        /// <summary>
        /// List of trusted AWS account IDs that are allowed to authenticate with Infisical.
        /// </summary>
        [Output("allowedAccountIds")]
        public Output<ImmutableArray<string>> AllowedAccountIds { get; private set; } = null!;

        /// <summary>
        /// List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity
        /// </summary>
        [Output("allowedPrincipalArns")]
        public Output<ImmutableArray<string>> AllowedPrincipalArns { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
        /// </summary>
        [Output("stsEndpoint")]
        public Output<string> StsEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityAwsAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityAwsAuth(string name, IdentityAwsAuthArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identityAwsAuth:IdentityAwsAuth", name, args ?? new IdentityAwsAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityAwsAuth(string name, Input<string> id, IdentityAwsAuthState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identityAwsAuth:IdentityAwsAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityAwsAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityAwsAuth Get(string name, Input<string> id, IdentityAwsAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityAwsAuth(name, id, state, options);
        }
    }

    public sealed class IdentityAwsAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("allowedAccountIds")]
        private InputList<string>? _allowedAccountIds;

        /// <summary>
        /// List of trusted AWS account IDs that are allowed to authenticate with Infisical.
        /// </summary>
        public InputList<string> AllowedAccountIds
        {
            get => _allowedAccountIds ?? (_allowedAccountIds = new InputList<string>());
            set => _allowedAccountIds = value;
        }

        [Input("allowedPrincipalArns")]
        private InputList<string>? _allowedPrincipalArns;

        /// <summary>
        /// List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity
        /// </summary>
        public InputList<string> AllowedPrincipalArns
        {
            get => _allowedPrincipalArns ?? (_allowedPrincipalArns = new InputList<string>());
            set => _allowedPrincipalArns = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
        /// </summary>
        [Input("stsEndpoint")]
        public Input<string>? StsEndpoint { get; set; }

        public IdentityAwsAuthArgs()
        {
        }
        public static new IdentityAwsAuthArgs Empty => new IdentityAwsAuthArgs();
    }

    public sealed class IdentityAwsAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpGetArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpGetArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityAwsAuthAccessTokenTrustedIpGetArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("allowedAccountIds")]
        private InputList<string>? _allowedAccountIds;

        /// <summary>
        /// List of trusted AWS account IDs that are allowed to authenticate with Infisical.
        /// </summary>
        public InputList<string> AllowedAccountIds
        {
            get => _allowedAccountIds ?? (_allowedAccountIds = new InputList<string>());
            set => _allowedAccountIds = value;
        }

        [Input("allowedPrincipalArns")]
        private InputList<string>? _allowedPrincipalArns;

        /// <summary>
        /// List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity
        /// </summary>
        public InputList<string> AllowedPrincipalArns
        {
            get => _allowedPrincipalArns ?? (_allowedPrincipalArns = new InputList<string>());
            set => _allowedPrincipalArns = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
        /// </summary>
        [Input("stsEndpoint")]
        public Input<string>? StsEndpoint { get; set; }

        public IdentityAwsAuthState()
        {
        }
        public static new IdentityAwsAuthState Empty => new IdentityAwsAuthState();
    }
}
