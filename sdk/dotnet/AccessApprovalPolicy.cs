// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/accessApprovalPolicy:AccessApprovalPolicy")]
    public partial class AccessApprovalPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The required approvers
        /// </summary>
        [Output("approvers")]
        public Output<ImmutableArray<Outputs.AccessApprovalPolicyApprover>> Approvers { get; private set; } = null!;

        /// <summary>
        /// The enforcement level of the policy. This can either be hard or soft
        /// </summary>
        [Output("enforcementLevel")]
        public Output<string> EnforcementLevel { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to
        /// </summary>
        [Output("environmentSlug")]
        public Output<string?> EnvironmentSlug { get; private set; } = null!;

        /// <summary>
        /// The environments to apply the access approval policy to
        /// </summary>
        [Output("environmentSlugs")]
        public Output<ImmutableArray<string>> EnvironmentSlugs { get; private set; } = null!;

        /// <summary>
        /// The name of the access approval policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project to add the access approval policy
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The number of required approvers
        /// </summary>
        [Output("requiredApprovals")]
        public Output<int> RequiredApprovals { get; private set; } = null!;

        /// <summary>
        /// The secret path to apply the access approval policy to
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;


        /// <summary>
        /// Create a AccessApprovalPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessApprovalPolicy(string name, AccessApprovalPolicyArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/accessApprovalPolicy:AccessApprovalPolicy", name, args ?? new AccessApprovalPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessApprovalPolicy(string name, Input<string> id, AccessApprovalPolicyState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/accessApprovalPolicy:AccessApprovalPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessApprovalPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessApprovalPolicy Get(string name, Input<string> id, AccessApprovalPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessApprovalPolicy(name, id, state, options);
        }
    }

    public sealed class AccessApprovalPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("approvers", required: true)]
        private InputList<Inputs.AccessApprovalPolicyApproverArgs>? _approvers;

        /// <summary>
        /// The required approvers
        /// </summary>
        public InputList<Inputs.AccessApprovalPolicyApproverArgs> Approvers
        {
            get => _approvers ?? (_approvers = new InputList<Inputs.AccessApprovalPolicyApproverArgs>());
            set => _approvers = value;
        }

        /// <summary>
        /// The enforcement level of the policy. This can either be hard or soft
        /// </summary>
        [Input("enforcementLevel")]
        public Input<string>? EnforcementLevel { get; set; }

        /// <summary>
        /// (DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        [Input("environmentSlugs")]
        private InputList<string>? _environmentSlugs;

        /// <summary>
        /// The environments to apply the access approval policy to
        /// </summary>
        public InputList<string> EnvironmentSlugs
        {
            get => _environmentSlugs ?? (_environmentSlugs = new InputList<string>());
            set => _environmentSlugs = value;
        }

        /// <summary>
        /// The name of the access approval policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project to add the access approval policy
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The number of required approvers
        /// </summary>
        [Input("requiredApprovals", required: true)]
        public Input<int> RequiredApprovals { get; set; } = null!;

        /// <summary>
        /// The secret path to apply the access approval policy to
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        public AccessApprovalPolicyArgs()
        {
        }
        public static new AccessApprovalPolicyArgs Empty => new AccessApprovalPolicyArgs();
    }

    public sealed class AccessApprovalPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("approvers")]
        private InputList<Inputs.AccessApprovalPolicyApproverGetArgs>? _approvers;

        /// <summary>
        /// The required approvers
        /// </summary>
        public InputList<Inputs.AccessApprovalPolicyApproverGetArgs> Approvers
        {
            get => _approvers ?? (_approvers = new InputList<Inputs.AccessApprovalPolicyApproverGetArgs>());
            set => _approvers = value;
        }

        /// <summary>
        /// The enforcement level of the policy. This can either be hard or soft
        /// </summary>
        [Input("enforcementLevel")]
        public Input<string>? EnforcementLevel { get; set; }

        /// <summary>
        /// (DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        [Input("environmentSlugs")]
        private InputList<string>? _environmentSlugs;

        /// <summary>
        /// The environments to apply the access approval policy to
        /// </summary>
        public InputList<string> EnvironmentSlugs
        {
            get => _environmentSlugs ?? (_environmentSlugs = new InputList<string>());
            set => _environmentSlugs = value;
        }

        /// <summary>
        /// The name of the access approval policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project to add the access approval policy
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of required approvers
        /// </summary>
        [Input("requiredApprovals")]
        public Input<int>? RequiredApprovals { get; set; }

        /// <summary>
        /// The secret path to apply the access approval policy to
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        public AccessApprovalPolicyState()
        {
        }
        public static new AccessApprovalPolicyState Empty => new AccessApprovalPolicyState();
    }
}
