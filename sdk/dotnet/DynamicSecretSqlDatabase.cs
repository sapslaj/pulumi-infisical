// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase")]
    public partial class DynamicSecretSqlDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration of the dynamic secret
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.DynamicSecretSqlDatabaseConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The default TTL that will be applied for all the leases.
        /// </summary>
        [Output("defaultTtl")]
        public Output<string> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// The slug of the environment to create the dynamic secret in.
        /// </summary>
        [Output("environmentSlug")]
        public Output<string> EnvironmentSlug { get; private set; } = null!;

        /// <summary>
        /// The maximum limit a TTL can be leases or renewed.
        /// </summary>
        [Output("maxTtl")]
        public Output<string?> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// The metadata associated with this dynamic secret
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.DynamicSecretSqlDatabaseMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The name of the dynamic secret.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path to create the dynamic secret in.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The slug of the project to create dynamic secret in.
        /// </summary>
        [Output("projectSlug")]
        public Output<string> ProjectSlug { get; private set; } = null!;

        /// <summary>
        /// The username template of the dynamic secret
        /// </summary>
        [Output("usernameTemplate")]
        public Output<string?> UsernameTemplate { get; private set; } = null!;


        /// <summary>
        /// Create a DynamicSecretSqlDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DynamicSecretSqlDatabase(string name, DynamicSecretSqlDatabaseArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase", name, args ?? new DynamicSecretSqlDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DynamicSecretSqlDatabase(string name, Input<string> id, DynamicSecretSqlDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DynamicSecretSqlDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DynamicSecretSqlDatabase Get(string name, Input<string> id, DynamicSecretSqlDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new DynamicSecretSqlDatabase(name, id, state, options);
        }
    }

    public sealed class DynamicSecretSqlDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration of the dynamic secret
        /// </summary>
        [Input("configuration", required: true)]
        public Input<Inputs.DynamicSecretSqlDatabaseConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// The default TTL that will be applied for all the leases.
        /// </summary>
        [Input("defaultTtl", required: true)]
        public Input<string> DefaultTtl { get; set; } = null!;

        /// <summary>
        /// The slug of the environment to create the dynamic secret in.
        /// </summary>
        [Input("environmentSlug", required: true)]
        public Input<string> EnvironmentSlug { get; set; } = null!;

        /// <summary>
        /// The maximum limit a TTL can be leases or renewed.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.DynamicSecretSqlDatabaseMetadataArgs>? _metadatas;

        /// <summary>
        /// The metadata associated with this dynamic secret
        /// </summary>
        public InputList<Inputs.DynamicSecretSqlDatabaseMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.DynamicSecretSqlDatabaseMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The name of the dynamic secret.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path to create the dynamic secret in.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The slug of the project to create dynamic secret in.
        /// </summary>
        [Input("projectSlug", required: true)]
        public Input<string> ProjectSlug { get; set; } = null!;

        /// <summary>
        /// The username template of the dynamic secret
        /// </summary>
        [Input("usernameTemplate")]
        public Input<string>? UsernameTemplate { get; set; }

        public DynamicSecretSqlDatabaseArgs()
        {
        }
        public static new DynamicSecretSqlDatabaseArgs Empty => new DynamicSecretSqlDatabaseArgs();
    }

    public sealed class DynamicSecretSqlDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration of the dynamic secret
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.DynamicSecretSqlDatabaseConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The default TTL that will be applied for all the leases.
        /// </summary>
        [Input("defaultTtl")]
        public Input<string>? DefaultTtl { get; set; }

        /// <summary>
        /// The slug of the environment to create the dynamic secret in.
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        /// <summary>
        /// The maximum limit a TTL can be leases or renewed.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.DynamicSecretSqlDatabaseMetadataGetArgs>? _metadatas;

        /// <summary>
        /// The metadata associated with this dynamic secret
        /// </summary>
        public InputList<Inputs.DynamicSecretSqlDatabaseMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.DynamicSecretSqlDatabaseMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The name of the dynamic secret.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path to create the dynamic secret in.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The slug of the project to create dynamic secret in.
        /// </summary>
        [Input("projectSlug")]
        public Input<string>? ProjectSlug { get; set; }

        /// <summary>
        /// The username template of the dynamic secret
        /// </summary>
        [Input("usernameTemplate")]
        public Input<string>? UsernameTemplate { get; set; }

        public DynamicSecretSqlDatabaseState()
        {
        }
        public static new DynamicSecretSqlDatabaseState Empty => new DynamicSecretSqlDatabaseState();
    }
}
