// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical.Inputs
{

    public sealed class SecretSyncGithubDestinationConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment to sync the secrets to, required if scope is `repository-environment`
        /// </summary>
        [Input("repositoryEnvironment")]
        public Input<string>? RepositoryEnvironment { get; set; }

        /// <summary>
        /// The repository to sync the secrets to, required if scope is `repository` or `repository-environment`. This is only the name of the repository, without the repository owner included. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `go-sdk` here.
        /// </summary>
        [Input("repositoryName")]
        public Input<string>? RepositoryName { get; set; }

        /// <summary>
        /// The owner of the Github repository, required if scope is `repository`, `repository-environment`, or `organization`. This is the organization name, or the username for personal repositories. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `Infisical` here.
        /// </summary>
        [Input("repositoryOwner")]
        public Input<string>? RepositoryOwner { get; set; }

        /// <summary>
        /// The scope to sync the secrets to, repository|organization
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        [Input("selectedRepositoryIds")]
        private InputList<int>? _selectedRepositoryIds;

        /// <summary>
        /// The repository ids to sync the secrets to, required if scope is `organization` and the visibility field is set to `selected`
        /// </summary>
        public InputList<int> SelectedRepositoryIds
        {
            get => _selectedRepositoryIds ?? (_selectedRepositoryIds = new InputList<int>());
            set => _selectedRepositoryIds = value;
        }

        /// <summary>
        /// The visibility of the Github repository, required if scope is `organization`. Accepted values are: `all`|`private`|`selected`
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public SecretSyncGithubDestinationConfigArgs()
        {
        }
        public static new SecretSyncGithubDestinationConfigArgs Empty => new SecretSyncGithubDestinationConfigArgs();
    }
}
