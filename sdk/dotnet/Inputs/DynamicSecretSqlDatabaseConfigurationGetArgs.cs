// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical.Inputs
{

    public sealed class DynamicSecretSqlDatabaseConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CA certificate to use to connect to the database.
        /// </summary>
        [Input("ca")]
        public Input<string>? Ca { get; set; }

        /// <summary>
        /// The database client to use. Currently supported values are postgres, mysql2, oracledb, mssql, sap-ase, and vertica.
        /// </summary>
        [Input("client", required: true)]
        public Input<string> Client { get; set; } = null!;

        /// <summary>
        /// The creation statement to use to create the dynamic secret lease.
        /// </summary>
        [Input("creationStatement", required: true)]
        public Input<string> CreationStatement { get; set; } = null!;

        /// <summary>
        /// The name of the database to use.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The Gateway ID to use to connect to the database.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// The host of the database server.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// The password to use to connect to the database.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The password requirements to use to create the dynamic secret lease.
        /// </summary>
        [Input("passwordRequirements")]
        public Input<Inputs.DynamicSecretSqlDatabaseConfigurationPasswordRequirementsGetArgs>? PasswordRequirements { get; set; }

        /// <summary>
        /// The port of the database server.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The renew statement to use to renew the dynamic secret lease.
        /// </summary>
        [Input("renewStatement")]
        public Input<string>? RenewStatement { get; set; }

        /// <summary>
        /// The revocation statement to use to revoke the dynamic secret lease.
        /// </summary>
        [Input("revocationStatement", required: true)]
        public Input<string> RevocationStatement { get; set; } = null!;

        /// <summary>
        /// The username to use to connect to the database.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public DynamicSecretSqlDatabaseConfigurationGetArgs()
        {
        }
        public static new DynamicSecretSqlDatabaseConfigurationGetArgs Empty => new DynamicSecretSqlDatabaseConfigurationGetArgs();
    }
}
