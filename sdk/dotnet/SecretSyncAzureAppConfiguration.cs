// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration")]
    public partial class SecretSyncAzureAppConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether secrets should be automatically synced when changes occur at the source location or not.
        /// </summary>
        [Output("autoSyncEnabled")]
        public Output<bool> AutoSyncEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the azure Connection to use for syncing.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// An optional description for the Azure App Configuration sync.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination configuration for the secret sync.
        /// </summary>
        [Output("destinationConfig")]
        public Output<Outputs.SecretSyncAzureAppConfigurationDestinationConfig> DestinationConfig { get; private set; } = null!;

        /// <summary>
        /// The slug of the project environment to sync secrets from.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The name of the Azure App Configuration sync to create. Must be slug-friendly.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Infisical project to create the sync in.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The folder path to sync secrets from.
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;

        /// <summary>
        /// Parameters to modify how secrets are synced.
        /// </summary>
        [Output("syncOptions")]
        public Output<Outputs.SecretSyncAzureAppConfigurationSyncOptions> SyncOptions { get; private set; } = null!;


        /// <summary>
        /// Create a SecretSyncAzureAppConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretSyncAzureAppConfiguration(string name, SecretSyncAzureAppConfigurationArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration", name, args ?? new SecretSyncAzureAppConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretSyncAzureAppConfiguration(string name, Input<string> id, SecretSyncAzureAppConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretSyncAzureAppConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretSyncAzureAppConfiguration Get(string name, Input<string> id, SecretSyncAzureAppConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretSyncAzureAppConfiguration(name, id, state, options);
        }
    }

    public sealed class SecretSyncAzureAppConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether secrets should be automatically synced when changes occur at the source location or not.
        /// </summary>
        [Input("autoSyncEnabled")]
        public Input<bool>? AutoSyncEnabled { get; set; }

        /// <summary>
        /// The ID of the azure Connection to use for syncing.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// An optional description for the Azure App Configuration sync.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination configuration for the secret sync.
        /// </summary>
        [Input("destinationConfig", required: true)]
        public Input<Inputs.SecretSyncAzureAppConfigurationDestinationConfigArgs> DestinationConfig { get; set; } = null!;

        /// <summary>
        /// The slug of the project environment to sync secrets from.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The name of the Azure App Configuration sync to create. Must be slug-friendly.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Infisical project to create the sync in.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The folder path to sync secrets from.
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        /// <summary>
        /// Parameters to modify how secrets are synced.
        /// </summary>
        [Input("syncOptions", required: true)]
        public Input<Inputs.SecretSyncAzureAppConfigurationSyncOptionsArgs> SyncOptions { get; set; } = null!;

        public SecretSyncAzureAppConfigurationArgs()
        {
        }
        public static new SecretSyncAzureAppConfigurationArgs Empty => new SecretSyncAzureAppConfigurationArgs();
    }

    public sealed class SecretSyncAzureAppConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether secrets should be automatically synced when changes occur at the source location or not.
        /// </summary>
        [Input("autoSyncEnabled")]
        public Input<bool>? AutoSyncEnabled { get; set; }

        /// <summary>
        /// The ID of the azure Connection to use for syncing.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// An optional description for the Azure App Configuration sync.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination configuration for the secret sync.
        /// </summary>
        [Input("destinationConfig")]
        public Input<Inputs.SecretSyncAzureAppConfigurationDestinationConfigGetArgs>? DestinationConfig { get; set; }

        /// <summary>
        /// The slug of the project environment to sync secrets from.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the Azure App Configuration sync to create. Must be slug-friendly.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Infisical project to create the sync in.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The folder path to sync secrets from.
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        /// <summary>
        /// Parameters to modify how secrets are synced.
        /// </summary>
        [Input("syncOptions")]
        public Input<Inputs.SecretSyncAzureAppConfigurationSyncOptionsGetArgs>? SyncOptions { get; set; }

        public SecretSyncAzureAppConfigurationState()
        {
        }
        public static new SecretSyncAzureAppConfigurationState Empty => new SecretSyncAzureAppConfigurationState();
    }
}
