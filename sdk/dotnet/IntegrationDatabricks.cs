// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/integrationDatabricks:IntegrationDatabricks")]
    public partial class IntegrationDatabricks : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Databricks host URL.
        /// </summary>
        [Output("databricksHost")]
        public Output<string> DatabricksHost { get; private set; } = null!;

        /// <summary>
        /// The Databricks secret scope. Example: your-secret-scope
        /// </summary>
        [Output("databricksSecretScope")]
        public Output<string> DatabricksSecretScope { get; private set; } = null!;

        /// <summary>
        /// The Databricks access token.
        /// </summary>
        [Output("databricksToken")]
        public Output<string> DatabricksToken { get; private set; } = null!;

        /// <summary>
        /// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Output("integrationAuthId")]
        public Output<string> IntegrationAuthId { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Output("integrationId")]
        public Output<string> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationDatabricks resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationDatabricks(string name, IntegrationDatabricksArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/integrationDatabricks:IntegrationDatabricks", name, args ?? new IntegrationDatabricksArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationDatabricks(string name, Input<string> id, IntegrationDatabricksState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/integrationDatabricks:IntegrationDatabricks", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "databricksToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationDatabricks resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationDatabricks Get(string name, Input<string> id, IntegrationDatabricksState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationDatabricks(name, id, state, options);
        }
    }

    public sealed class IntegrationDatabricksArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Databricks host URL.
        /// </summary>
        [Input("databricksHost", required: true)]
        public Input<string> DatabricksHost { get; set; } = null!;

        /// <summary>
        /// The Databricks secret scope. Example: your-secret-scope
        /// </summary>
        [Input("databricksSecretScope", required: true)]
        public Input<string> DatabricksSecretScope { get; set; } = null!;

        [Input("databricksToken", required: true)]
        private Input<string>? _databricksToken;

        /// <summary>
        /// The Databricks access token.
        /// </summary>
        public Input<string>? DatabricksToken
        {
            get => _databricksToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _databricksToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        public IntegrationDatabricksArgs()
        {
        }
        public static new IntegrationDatabricksArgs Empty => new IntegrationDatabricksArgs();
    }

    public sealed class IntegrationDatabricksState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Databricks host URL.
        /// </summary>
        [Input("databricksHost")]
        public Input<string>? DatabricksHost { get; set; }

        /// <summary>
        /// The Databricks secret scope. Example: your-secret-scope
        /// </summary>
        [Input("databricksSecretScope")]
        public Input<string>? DatabricksSecretScope { get; set; }

        [Input("databricksToken")]
        private Input<string>? _databricksToken;

        /// <summary>
        /// The Databricks access token.
        /// </summary>
        public Input<string>? DatabricksToken
        {
            get => _databricksToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _databricksToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The slug of the environment to sync to Databricks (prod, dev, staging, etc).
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Input("integrationAuthId")]
        public Input<string>? IntegrationAuthId { get; set; }

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        public IntegrationDatabricksState()
        {
        }
        public static new IntegrationDatabricksState Empty => new IntegrationDatabricksState();
    }
}
