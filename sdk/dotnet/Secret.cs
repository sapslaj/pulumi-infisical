// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/secret:Secret")]
    public partial class Secret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The environment slug of the secret to modify/create
        /// </summary>
        [Output("envSlug")]
        public Output<string> EnvSlug { get; private set; } = null!;

        /// <summary>
        /// The path to the folder where the given secret resides
        /// </summary>
        [Output("folderPath")]
        public Output<string> FolderPath { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The name of the secret
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("secretReminder")]
        public Output<Outputs.SecretSecretReminder?> SecretReminder { get; private set; } = null!;

        /// <summary>
        /// Tag ids to be attached for the secrets.
        /// </summary>
        [Output("tagIds")]
        public Output<ImmutableArray<string>> TagIds { get; private set; } = null!;

        /// <summary>
        /// The value of the secret
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Secret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Secret(string name, SecretArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/secret:Secret", name, args ?? new SecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Secret(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/secret:Secret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Secret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Secret Get(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
        {
            return new Secret(name, id, state, options);
        }
    }

    public sealed class SecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment slug of the secret to modify/create
        /// </summary>
        [Input("envSlug", required: true)]
        public Input<string> EnvSlug { get; set; } = null!;

        /// <summary>
        /// The path to the folder where the given secret resides
        /// </summary>
        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        /// <summary>
        /// The name of the secret
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secretReminder")]
        public Input<Inputs.SecretSecretReminderArgs>? SecretReminder { get; set; }

        [Input("tagIds")]
        private InputList<string>? _tagIds;

        /// <summary>
        /// Tag ids to be attached for the secrets.
        /// </summary>
        public InputList<string> TagIds
        {
            get => _tagIds ?? (_tagIds = new InputList<string>());
            set => _tagIds = value;
        }

        [Input("value", required: true)]
        private Input<string>? _value;

        /// <summary>
        /// The value of the secret
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public SecretArgs()
        {
        }
        public static new SecretArgs Empty => new SecretArgs();
    }

    public sealed class SecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment slug of the secret to modify/create
        /// </summary>
        [Input("envSlug")]
        public Input<string>? EnvSlug { get; set; }

        /// <summary>
        /// The path to the folder where the given secret resides
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The name of the secret
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secretReminder")]
        public Input<Inputs.SecretSecretReminderGetArgs>? SecretReminder { get; set; }

        [Input("tagIds")]
        private InputList<string>? _tagIds;

        /// <summary>
        /// Tag ids to be attached for the secrets.
        /// </summary>
        public InputList<string> TagIds
        {
            get => _tagIds ?? (_tagIds = new InputList<string>());
            set => _tagIds = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The value of the secret
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public SecretState()
        {
        }
        public static new SecretState Empty => new SecretState();
    }
}
