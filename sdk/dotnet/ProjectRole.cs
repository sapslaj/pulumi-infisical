// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/projectRole:ProjectRole")]
    public partial class ProjectRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description for the new role. Defaults to an empty string.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name for the new role
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.ProjectRolePermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        [Output("permissionsV2s")]
        public Output<ImmutableArray<Outputs.ProjectRolePermissionsV2>> PermissionsV2s { get; private set; } = null!;

        /// <summary>
        /// The slug of the project to create role
        /// </summary>
        [Output("projectSlug")]
        public Output<string> ProjectSlug { get; private set; } = null!;

        /// <summary>
        /// The slug for the new role
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectRole(string name, ProjectRoleArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/projectRole:ProjectRole", name, args ?? new ProjectRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectRole(string name, Input<string> id, ProjectRoleState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/projectRole:ProjectRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectRole Get(string name, Input<string> id, ProjectRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectRole(name, id, state, options);
        }
    }

    public sealed class ProjectRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description for the new role. Defaults to an empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name for the new role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.ProjectRolePermissionArgs>? _permissions;

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
        /// </summary>
        public InputList<Inputs.ProjectRolePermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.ProjectRolePermissionArgs>());
            set => _permissions = value;
        }

        [Input("permissionsV2s")]
        private InputList<Inputs.ProjectRolePermissionsV2Args>? _permissionsV2s;

        /// <summary>
        /// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        public InputList<Inputs.ProjectRolePermissionsV2Args> PermissionsV2s
        {
            get => _permissionsV2s ?? (_permissionsV2s = new InputList<Inputs.ProjectRolePermissionsV2Args>());
            set => _permissionsV2s = value;
        }

        /// <summary>
        /// The slug of the project to create role
        /// </summary>
        [Input("projectSlug", required: true)]
        public Input<string> ProjectSlug { get; set; } = null!;

        /// <summary>
        /// The slug for the new role
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public ProjectRoleArgs()
        {
        }
        public static new ProjectRoleArgs Empty => new ProjectRoleArgs();
    }

    public sealed class ProjectRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description for the new role. Defaults to an empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name for the new role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.ProjectRolePermissionGetArgs>? _permissions;

        /// <summary>
        /// (DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role
        /// </summary>
        public InputList<Inputs.ProjectRolePermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.ProjectRolePermissionGetArgs>());
            set => _permissions = value;
        }

        [Input("permissionsV2s")]
        private InputList<Inputs.ProjectRolePermissionsV2GetArgs>? _permissionsV2s;

        /// <summary>
        /// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage.
        /// </summary>
        public InputList<Inputs.ProjectRolePermissionsV2GetArgs> PermissionsV2s
        {
            get => _permissionsV2s ?? (_permissionsV2s = new InputList<Inputs.ProjectRolePermissionsV2GetArgs>());
            set => _permissionsV2s = value;
        }

        /// <summary>
        /// The slug of the project to create role
        /// </summary>
        [Input("projectSlug")]
        public Input<string>? ProjectSlug { get; set; }

        /// <summary>
        /// The slug for the new role
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public ProjectRoleState()
        {
        }
        public static new ProjectRoleState Empty => new ProjectRoleState();
    }
}
