// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret")]
    public partial class IdentityUniversalAuthClientSecret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The client ID of the secret.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The client secret.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The UTC timestamp of the created at.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the client secret.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity to create a client secret for
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// A flag indicating token has been revoked
        /// </summary>
        [Output("isRevoked")]
        public Output<bool> IsRevoked { get; private set; } = null!;

        /// <summary>
        /// The number of times that the client secret is used
        /// </summary>
        [Output("numberOfUses")]
        public Output<int> NumberOfUses { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
        /// </summary>
        [Output("numberOfUsesLimit")]
        public Output<int> NumberOfUsesLimit { get; private set; } = null!;

        /// <summary>
        /// The lifetime for the client secret in seconds. Default: 0 - not expiring
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityUniversalAuthClientSecret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityUniversalAuthClientSecret(string name, IdentityUniversalAuthClientSecretArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret", name, args ?? new IdentityUniversalAuthClientSecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityUniversalAuthClientSecret(string name, Input<string> id, IdentityUniversalAuthClientSecretState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityUniversalAuthClientSecret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityUniversalAuthClientSecret Get(string name, Input<string> id, IdentityUniversalAuthClientSecretState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityUniversalAuthClientSecret(name, id, state, options);
        }
    }

    public sealed class IdentityUniversalAuthClientSecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the client secret.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the identity to create a client secret for
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
        /// </summary>
        [Input("numberOfUsesLimit")]
        public Input<int>? NumberOfUsesLimit { get; set; }

        /// <summary>
        /// The lifetime for the client secret in seconds. Default: 0 - not expiring
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public IdentityUniversalAuthClientSecretArgs()
        {
        }
        public static new IdentityUniversalAuthClientSecretArgs Empty => new IdentityUniversalAuthClientSecretArgs();
    }

    public sealed class IdentityUniversalAuthClientSecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client ID of the secret.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The client secret.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The UTC timestamp of the created at.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the client secret.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the identity to create a client secret for
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// A flag indicating token has been revoked
        /// </summary>
        [Input("isRevoked")]
        public Input<bool>? IsRevoked { get; set; }

        /// <summary>
        /// The number of times that the client secret is used
        /// </summary>
        [Input("numberOfUses")]
        public Input<int>? NumberOfUses { get; set; }

        /// <summary>
        /// The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
        /// </summary>
        [Input("numberOfUsesLimit")]
        public Input<int>? NumberOfUsesLimit { get; set; }

        /// <summary>
        /// The lifetime for the client secret in seconds. Default: 0 - not expiring
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public IdentityUniversalAuthClientSecretState()
        {
        }
        public static new IdentityUniversalAuthClientSecretState Empty => new IdentityUniversalAuthClientSecretState();
    }
}
