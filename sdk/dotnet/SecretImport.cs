// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/secretImport:SecretImport")]
    public partial class SecretImport : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Output("environmentSlug")]
        public Output<string> EnvironmentSlug { get; private set; } = null!;

        /// <summary>
        /// The path where the secret should be imported
        /// </summary>
        [Output("folderPath")]
        public Output<string> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Output("importEnvironmentSlug")]
        public Output<string> ImportEnvironmentSlug { get; private set; } = null!;

        /// <summary>
        /// The path where the secret should be imported from
        /// </summary>
        [Output("importFolderPath")]
        public Output<string> ImportFolderPath { get; private set; } = null!;

        /// <summary>
        /// The is_replication of the secret import to modify/create
        /// </summary>
        [Output("isReplication")]
        public Output<bool> IsReplication { get; private set; } = null!;

        /// <summary>
        /// The Infisical project ID
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a SecretImport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretImport(string name, SecretImportArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/secretImport:SecretImport", name, args ?? new SecretImportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretImport(string name, Input<string> id, SecretImportState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/secretImport:SecretImport", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretImport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretImport Get(string name, Input<string> id, SecretImportState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretImport(name, id, state, options);
        }
    }

    public sealed class SecretImportArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Input("environmentSlug", required: true)]
        public Input<string> EnvironmentSlug { get; set; } = null!;

        /// <summary>
        /// The path where the secret should be imported
        /// </summary>
        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Input("importEnvironmentSlug", required: true)]
        public Input<string> ImportEnvironmentSlug { get; set; } = null!;

        /// <summary>
        /// The path where the secret should be imported from
        /// </summary>
        [Input("importFolderPath", required: true)]
        public Input<string> ImportFolderPath { get; set; } = null!;

        /// <summary>
        /// The is_replication of the secret import to modify/create
        /// </summary>
        [Input("isReplication", required: true)]
        public Input<bool> IsReplication { get; set; } = null!;

        /// <summary>
        /// The Infisical project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public SecretImportArgs()
        {
        }
        public static new SecretImportArgs Empty => new SecretImportArgs();
    }

    public sealed class SecretImportState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        /// <summary>
        /// The path where the secret should be imported
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The environment slug of the secret import to modify/create
        /// </summary>
        [Input("importEnvironmentSlug")]
        public Input<string>? ImportEnvironmentSlug { get; set; }

        /// <summary>
        /// The path where the secret should be imported from
        /// </summary>
        [Input("importFolderPath")]
        public Input<string>? ImportFolderPath { get; set; }

        /// <summary>
        /// The is_replication of the secret import to modify/create
        /// </summary>
        [Input("isReplication")]
        public Input<bool>? IsReplication { get; set; }

        /// <summary>
        /// The Infisical project ID
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public SecretImportState()
        {
        }
        public static new SecretImportState Empty => new SecretImportState();
    }
}
