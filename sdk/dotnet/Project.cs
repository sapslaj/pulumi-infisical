// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The audit log retention in days
        /// </summary>
        [Output("auditLogRetentionDays")]
        public Output<int> AuditLogRetentionDays { get; private set; } = null!;

        /// <summary>
        /// The description of the project
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the project has delete protection, defaults to false
        /// </summary>
        [Output("hasDeleteProtection")]
        public Output<bool> HasDeleteProtection { get; private set; } = null!;

        /// <summary>
        /// The ID of the KMS secret manager key to use for the project
        /// </summary>
        [Output("kmsSecretManagerKeyId")]
        public Output<string> KmsSecretManagerKeyId { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The name of the project
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether to create default environments for the project (dev, staging, prod), defaults to true
        /// </summary>
        [Output("shouldCreateDefaultEnvs")]
        public Output<bool?> ShouldCreateDefaultEnvs { get; private set; } = null!;

        /// <summary>
        /// The slug of the project
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The name of the template to use for the project
        /// </summary>
        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The audit log retention in days
        /// </summary>
        [Input("auditLogRetentionDays")]
        public Input<int>? AuditLogRetentionDays { get; set; }

        /// <summary>
        /// The description of the project
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the project has delete protection, defaults to false
        /// </summary>
        [Input("hasDeleteProtection")]
        public Input<bool>? HasDeleteProtection { get; set; }

        /// <summary>
        /// The ID of the KMS secret manager key to use for the project
        /// </summary>
        [Input("kmsSecretManagerKeyId")]
        public Input<string>? KmsSecretManagerKeyId { get; set; }

        /// <summary>
        /// The name of the project
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to create default environments for the project (dev, staging, prod), defaults to true
        /// </summary>
        [Input("shouldCreateDefaultEnvs")]
        public Input<bool>? ShouldCreateDefaultEnvs { get; set; }

        /// <summary>
        /// The slug of the project
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        /// <summary>
        /// The name of the template to use for the project
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The audit log retention in days
        /// </summary>
        [Input("auditLogRetentionDays")]
        public Input<int>? AuditLogRetentionDays { get; set; }

        /// <summary>
        /// The description of the project
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the project has delete protection, defaults to false
        /// </summary>
        [Input("hasDeleteProtection")]
        public Input<bool>? HasDeleteProtection { get; set; }

        /// <summary>
        /// The ID of the KMS secret manager key to use for the project
        /// </summary>
        [Input("kmsSecretManagerKeyId")]
        public Input<string>? KmsSecretManagerKeyId { get; set; }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The name of the project
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to create default environments for the project (dev, staging, prod), defaults to true
        /// </summary>
        [Input("shouldCreateDefaultEnvs")]
        public Input<bool>? ShouldCreateDefaultEnvs { get; set; }

        /// <summary>
        /// The slug of the project
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The name of the template to use for the project
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
