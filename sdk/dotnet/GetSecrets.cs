// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    public static class GetSecrets
    {
        public static Task<GetSecretsResult> InvokeAsync(GetSecretsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretsResult>("infisical:index/getSecrets:getSecrets", args ?? new GetSecretsArgs(), options.WithDefaults());

        public static Output<GetSecretsResult> Invoke(GetSecretsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsResult>("infisical:index/getSecrets:getSecrets", args ?? new GetSecretsInvokeArgs(), options.WithDefaults());

        public static Output<GetSecretsResult> Invoke(GetSecretsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsResult>("infisical:index/getSecrets:getSecrets", args ?? new GetSecretsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretsArgs : global::Pulumi.InvokeArgs
    {
        [Input("envSlug", required: true)]
        public string EnvSlug { get; set; } = null!;

        [Input("folderPath", required: true)]
        public string FolderPath { get; set; } = null!;

        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetSecretsArgs()
        {
        }
        public static new GetSecretsArgs Empty => new GetSecretsArgs();
    }

    public sealed class GetSecretsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("envSlug", required: true)]
        public Input<string> EnvSlug { get; set; } = null!;

        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetSecretsInvokeArgs()
        {
        }
        public static new GetSecretsInvokeArgs Empty => new GetSecretsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretsResult
    {
        public readonly string EnvSlug;
        public readonly string FolderPath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, Outputs.GetSecretsSecretsResult> Secrets;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetSecretsResult(
            string envSlug,

            string folderPath,

            string id,

            ImmutableDictionary<string, Outputs.GetSecretsSecretsResult> secrets,

            string workspaceId)
        {
            EnvSlug = envSlug;
            FolderPath = folderPath;
            Id = id;
            Secrets = secrets;
            WorkspaceId = workspaceId;
        }
    }
}
