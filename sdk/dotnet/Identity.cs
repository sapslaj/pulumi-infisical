// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identity:Identity")]
    public partial class Identity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authentication types of the identity
        /// </summary>
        [Output("authModes")]
        public Output<ImmutableArray<string>> AuthModes { get; private set; } = null!;

        /// <summary>
        /// Whether the identity has delete protection, defaults to false
        /// </summary>
        [Output("hasDeleteProtection")]
        public Output<bool> HasDeleteProtection { get; private set; } = null!;

        /// <summary>
        /// The metadata associated with this identity
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.IdentityMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The name for the identity
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization for the identity
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a Identity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Identity(string name, IdentityArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identity:Identity", name, args ?? new IdentityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Identity(string name, Input<string> id, IdentityState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identity:Identity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Identity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Identity Get(string name, Input<string> id, IdentityState? state = null, CustomResourceOptions? options = null)
        {
            return new Identity(name, id, state, options);
        }
    }

    public sealed class IdentityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the identity has delete protection, defaults to false
        /// </summary>
        [Input("hasDeleteProtection")]
        public Input<bool>? HasDeleteProtection { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.IdentityMetadataArgs>? _metadatas;

        /// <summary>
        /// The metadata associated with this identity
        /// </summary>
        public InputList<Inputs.IdentityMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.IdentityMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The name for the identity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the organization for the identity
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public IdentityArgs()
        {
        }
        public static new IdentityArgs Empty => new IdentityArgs();
    }

    public sealed class IdentityState : global::Pulumi.ResourceArgs
    {
        [Input("authModes")]
        private InputList<string>? _authModes;

        /// <summary>
        /// The authentication types of the identity
        /// </summary>
        public InputList<string> AuthModes
        {
            get => _authModes ?? (_authModes = new InputList<string>());
            set => _authModes = value;
        }

        /// <summary>
        /// Whether the identity has delete protection, defaults to false
        /// </summary>
        [Input("hasDeleteProtection")]
        public Input<bool>? HasDeleteProtection { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.IdentityMetadataGetArgs>? _metadatas;

        /// <summary>
        /// The metadata associated with this identity
        /// </summary>
        public InputList<Inputs.IdentityMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.IdentityMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The name for the identity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the organization for the identity
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public IdentityState()
        {
        }
        public static new IdentityState Empty => new IdentityState();
    }
}
