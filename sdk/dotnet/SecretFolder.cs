// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/secretFolder:SecretFolder")]
    public partial class SecretFolder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the environment
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The environment slug of the folder to modify/create
        /// </summary>
        [Output("environmentSlug")]
        public Output<string> EnvironmentSlug { get; private set; } = null!;

        /// <summary>
        /// The path where the folder should be created/updated
        /// </summary>
        [Output("folderPath")]
        public Output<string> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The name for the folder
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The full path of the folder, including its name.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a SecretFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretFolder(string name, SecretFolderArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/secretFolder:SecretFolder", name, args ?? new SecretFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretFolder(string name, Input<string> id, SecretFolderState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/secretFolder:SecretFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretFolder Get(string name, Input<string> id, SecretFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretFolder(name, id, state, options);
        }
    }

    public sealed class SecretFolderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The environment slug of the folder to modify/create
        /// </summary>
        [Input("environmentSlug", required: true)]
        public Input<string> EnvironmentSlug { get; set; } = null!;

        /// <summary>
        /// The path where the folder should be created/updated
        /// </summary>
        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        /// <summary>
        /// The name for the folder
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public SecretFolderArgs()
        {
        }
        public static new SecretFolderArgs Empty => new SecretFolderArgs();
    }

    public sealed class SecretFolderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the environment
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The environment slug of the folder to modify/create
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        /// <summary>
        /// The path where the folder should be created/updated
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The name for the folder
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The full path of the folder, including its name.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public SecretFolderState()
        {
        }
        public static new SecretFolderState Empty => new SecretFolderState();
    }
}
