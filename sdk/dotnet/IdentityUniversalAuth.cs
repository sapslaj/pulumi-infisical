// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identityUniversalAuth:IdentityUniversalAuth")]
    public partial class IdentityUniversalAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenMaxTtl")]
        public Output<int> AccessTokenMaxTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Output("accessTokenNumUsesLimit")]
        public Output<int> AccessTokenNumUsesLimit { get; private set; } = null!;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        [Output("accessTokenTrustedIps")]
        public Output<ImmutableArray<Outputs.IdentityUniversalAuthAccessTokenTrustedIp>> AccessTokenTrustedIps { get; private set; } = null!;

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenTtl")]
        public Output<int> AccessTokenTtl { get; private set; } = null!;

        /// <summary>
        /// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
        /// </summary>
        [Output("clientSecretTrustedIps")]
        public Output<ImmutableArray<Outputs.IdentityUniversalAuthClientSecretTrustedIp>> ClientSecretTrustedIps { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityUniversalAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityUniversalAuth(string name, IdentityUniversalAuthArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identityUniversalAuth:IdentityUniversalAuth", name, args ?? new IdentityUniversalAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityUniversalAuth(string name, Input<string> id, IdentityUniversalAuthState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identityUniversalAuth:IdentityUniversalAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityUniversalAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityUniversalAuth Get(string name, Input<string> id, IdentityUniversalAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityUniversalAuth(name, id, state, options);
        }
    }

    public sealed class IdentityUniversalAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("clientSecretTrustedIps")]
        private InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpArgs>? _clientSecretTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
        /// </summary>
        public InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpArgs> ClientSecretTrustedIps
        {
            get => _clientSecretTrustedIps ?? (_clientSecretTrustedIps = new InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpArgs>());
            set => _clientSecretTrustedIps = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        public IdentityUniversalAuthArgs()
        {
        }
        public static new IdentityUniversalAuthArgs Empty => new IdentityUniversalAuthArgs();
    }

    public sealed class IdentityUniversalAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpGetArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpGetArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityUniversalAuthAccessTokenTrustedIpGetArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("clientSecretTrustedIps")]
        private InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpGetArgs>? _clientSecretTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
        /// </summary>
        public InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpGetArgs> ClientSecretTrustedIps
        {
            get => _clientSecretTrustedIps ?? (_clientSecretTrustedIps = new InputList<Inputs.IdentityUniversalAuthClientSecretTrustedIpGetArgs>());
            set => _clientSecretTrustedIps = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        public IdentityUniversalAuthState()
        {
        }
        public static new IdentityUniversalAuthState Empty => new IdentityUniversalAuthState();
    }
}
