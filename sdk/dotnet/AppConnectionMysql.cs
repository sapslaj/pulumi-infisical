// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/appConnectionMysql:AppConnectionMysql")]
    public partial class AppConnectionMysql : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The credentials for the MySQL App Connection
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.AppConnectionMysqlCredentials> Credentials { get; private set; } = null!;

        /// <summary>
        /// The hash of the MySQL App Connection credentials
        /// </summary>
        [Output("credentialsHash")]
        public Output<string> CredentialsHash { get; private set; } = null!;

        /// <summary>
        /// An optional description for the MySQL App Connection.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The method used to authenticate with MySQL. Possible values are: username-and-password
        /// </summary>
        [Output("method")]
        public Output<string> Method { get; private set; } = null!;

        /// <summary>
        /// The name of the MySQL App Connection to create. Must be slug-friendly
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a AppConnectionMysql resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppConnectionMysql(string name, AppConnectionMysqlArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/appConnectionMysql:AppConnectionMysql", name, args ?? new AppConnectionMysqlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppConnectionMysql(string name, Input<string> id, AppConnectionMysqlState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/appConnectionMysql:AppConnectionMysql", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppConnectionMysql resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppConnectionMysql Get(string name, Input<string> id, AppConnectionMysqlState? state = null, CustomResourceOptions? options = null)
        {
            return new AppConnectionMysql(name, id, state, options);
        }
    }

    public sealed class AppConnectionMysqlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The credentials for the MySQL App Connection
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.AppConnectionMysqlCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// An optional description for the MySQL App Connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The method used to authenticate with MySQL. Possible values are: username-and-password
        /// </summary>
        [Input("method", required: true)]
        public Input<string> Method { get; set; } = null!;

        /// <summary>
        /// The name of the MySQL App Connection to create. Must be slug-friendly
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AppConnectionMysqlArgs()
        {
        }
        public static new AppConnectionMysqlArgs Empty => new AppConnectionMysqlArgs();
    }

    public sealed class AppConnectionMysqlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The credentials for the MySQL App Connection
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.AppConnectionMysqlCredentialsGetArgs>? Credentials { get; set; }

        /// <summary>
        /// The hash of the MySQL App Connection credentials
        /// </summary>
        [Input("credentialsHash")]
        public Input<string>? CredentialsHash { get; set; }

        /// <summary>
        /// An optional description for the MySQL App Connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The method used to authenticate with MySQL. Possible values are: username-and-password
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The name of the MySQL App Connection to create. Must be slug-friendly
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AppConnectionMysqlState()
        {
        }
        public static new AppConnectionMysqlState Empty => new AppConnectionMysqlState();
    }
}
