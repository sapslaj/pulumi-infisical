// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials")]
    public partial class SecretRotationPostgresCredentials : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether secrets should be automatically rotated.
        /// </summary>
        [Output("autoRotationEnabled")]
        public Output<bool> AutoRotationEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the connection to use for the secret rotation.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// The description of the secret rotation.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The slug of the project environment to rotate secrets from.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The name of the secret rotation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parameters to modify how secrets are rotated.
        /// </summary>
        [Output("parameters")]
        public Output<Outputs.SecretRotationPostgresCredentialsParameters> Parameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the Infisical project to create the secret rotation in.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// At which UTC time the rotation should occur.
        /// </summary>
        [Output("rotateAtUtc")]
        public Output<Outputs.SecretRotationPostgresCredentialsRotateAtUtc> RotateAtUtc { get; private set; } = null!;

        /// <summary>
        /// How many days to wait between each rotation.
        /// </summary>
        [Output("rotationInterval")]
        public Output<int> RotationInterval { get; private set; } = null!;

        /// <summary>
        /// The folder path to rotate secrets from.
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;

        /// <summary>
        /// Secret mappings to modify how secrets are rotated.
        /// </summary>
        [Output("secretsMapping")]
        public Output<Outputs.SecretRotationPostgresCredentialsSecretsMapping> SecretsMapping { get; private set; } = null!;

        /// <summary>
        /// Temporary parameters to modify how secrets are rotated.
        /// </summary>
        [Output("temporaryParameters")]
        public Output<Outputs.SecretRotationPostgresCredentialsTemporaryParameters?> TemporaryParameters { get; private set; } = null!;


        /// <summary>
        /// Create a SecretRotationPostgresCredentials resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretRotationPostgresCredentials(string name, SecretRotationPostgresCredentialsArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials", name, args ?? new SecretRotationPostgresCredentialsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretRotationPostgresCredentials(string name, Input<string> id, SecretRotationPostgresCredentialsState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretRotationPostgresCredentials resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretRotationPostgresCredentials Get(string name, Input<string> id, SecretRotationPostgresCredentialsState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretRotationPostgresCredentials(name, id, state, options);
        }
    }

    public sealed class SecretRotationPostgresCredentialsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether secrets should be automatically rotated.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// The ID of the connection to use for the secret rotation.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// The description of the secret rotation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The slug of the project environment to rotate secrets from.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The name of the secret rotation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parameters to modify how secrets are rotated.
        /// </summary>
        [Input("parameters", required: true)]
        public Input<Inputs.SecretRotationPostgresCredentialsParametersArgs> Parameters { get; set; } = null!;

        /// <summary>
        /// The ID of the Infisical project to create the secret rotation in.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// At which UTC time the rotation should occur.
        /// </summary>
        [Input("rotateAtUtc")]
        public Input<Inputs.SecretRotationPostgresCredentialsRotateAtUtcArgs>? RotateAtUtc { get; set; }

        /// <summary>
        /// How many days to wait between each rotation.
        /// </summary>
        [Input("rotationInterval")]
        public Input<int>? RotationInterval { get; set; }

        /// <summary>
        /// The folder path to rotate secrets from.
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        /// <summary>
        /// Secret mappings to modify how secrets are rotated.
        /// </summary>
        [Input("secretsMapping", required: true)]
        public Input<Inputs.SecretRotationPostgresCredentialsSecretsMappingArgs> SecretsMapping { get; set; } = null!;

        /// <summary>
        /// Temporary parameters to modify how secrets are rotated.
        /// </summary>
        [Input("temporaryParameters")]
        public Input<Inputs.SecretRotationPostgresCredentialsTemporaryParametersArgs>? TemporaryParameters { get; set; }

        public SecretRotationPostgresCredentialsArgs()
        {
        }
        public static new SecretRotationPostgresCredentialsArgs Empty => new SecretRotationPostgresCredentialsArgs();
    }

    public sealed class SecretRotationPostgresCredentialsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether secrets should be automatically rotated.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// The ID of the connection to use for the secret rotation.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// The description of the secret rotation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The slug of the project environment to rotate secrets from.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the secret rotation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parameters to modify how secrets are rotated.
        /// </summary>
        [Input("parameters")]
        public Input<Inputs.SecretRotationPostgresCredentialsParametersGetArgs>? Parameters { get; set; }

        /// <summary>
        /// The ID of the Infisical project to create the secret rotation in.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// At which UTC time the rotation should occur.
        /// </summary>
        [Input("rotateAtUtc")]
        public Input<Inputs.SecretRotationPostgresCredentialsRotateAtUtcGetArgs>? RotateAtUtc { get; set; }

        /// <summary>
        /// How many days to wait between each rotation.
        /// </summary>
        [Input("rotationInterval")]
        public Input<int>? RotationInterval { get; set; }

        /// <summary>
        /// The folder path to rotate secrets from.
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        /// <summary>
        /// Secret mappings to modify how secrets are rotated.
        /// </summary>
        [Input("secretsMapping")]
        public Input<Inputs.SecretRotationPostgresCredentialsSecretsMappingGetArgs>? SecretsMapping { get; set; }

        /// <summary>
        /// Temporary parameters to modify how secrets are rotated.
        /// </summary>
        [Input("temporaryParameters")]
        public Input<Inputs.SecretRotationPostgresCredentialsTemporaryParametersGetArgs>? TemporaryParameters { get; set; }

        public SecretRotationPostgresCredentialsState()
        {
        }
        public static new SecretRotationPostgresCredentialsState Empty => new SecretRotationPostgresCredentialsState();
    }
}
