// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/identityGcpAuth:IdentityGcpAuth")]
    public partial class IdentityGcpAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenMaxTtl")]
        public Output<int> AccessTokenMaxTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Output("accessTokenNumUsesLimit")]
        public Output<int> AccessTokenNumUsesLimit { get; private set; } = null!;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        [Output("accessTokenTrustedIps")]
        public Output<ImmutableArray<Outputs.IdentityGcpAuthAccessTokenTrustedIp>> AccessTokenTrustedIps { get; private set; } = null!;

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Output("accessTokenTtl")]
        public Output<int> AccessTokenTtl { get; private set; } = null!;

        /// <summary>
        /// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
        /// </summary>
        [Output("allowedProjects")]
        public Output<ImmutableArray<string>> AllowedProjects { get; private set; } = null!;

        /// <summary>
        /// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
        /// </summary>
        [Output("allowedServiceAccountEmails")]
        public Output<ImmutableArray<string>> AllowedServiceAccountEmails { get; private set; } = null!;

        /// <summary>
        /// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `&lt;region&gt;-&lt;zone&gt;`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
        /// </summary>
        [Output("allowedZones")]
        public Output<ImmutableArray<string>> AllowedZones { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityGcpAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityGcpAuth(string name, IdentityGcpAuthArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/identityGcpAuth:IdentityGcpAuth", name, args ?? new IdentityGcpAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityGcpAuth(string name, Input<string> id, IdentityGcpAuthState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/identityGcpAuth:IdentityGcpAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityGcpAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityGcpAuth Get(string name, Input<string> id, IdentityGcpAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityGcpAuth(name, id, state, options);
        }
    }

    public sealed class IdentityGcpAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("allowedProjects")]
        private InputList<string>? _allowedProjects;

        /// <summary>
        /// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
        /// </summary>
        public InputList<string> AllowedProjects
        {
            get => _allowedProjects ?? (_allowedProjects = new InputList<string>());
            set => _allowedProjects = value;
        }

        [Input("allowedServiceAccountEmails")]
        private InputList<string>? _allowedServiceAccountEmails;

        /// <summary>
        /// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
        /// </summary>
        public InputList<string> AllowedServiceAccountEmails
        {
            get => _allowedServiceAccountEmails ?? (_allowedServiceAccountEmails = new InputList<string>());
            set => _allowedServiceAccountEmails = value;
        }

        [Input("allowedZones")]
        private InputList<string>? _allowedZones;

        /// <summary>
        /// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `&lt;region&gt;-&lt;zone&gt;`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
        /// </summary>
        public InputList<string> AllowedZones
        {
            get => _allowedZones ?? (_allowedZones = new InputList<string>());
            set => _allowedZones = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IdentityGcpAuthArgs()
        {
        }
        public static new IdentityGcpAuthArgs Empty => new IdentityGcpAuthArgs();
    }

    public sealed class IdentityGcpAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenMaxTtl")]
        public Input<int>? AccessTokenMaxTtl { get; set; }

        /// <summary>
        /// The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
        /// </summary>
        [Input("accessTokenNumUsesLimit")]
        public Input<int>? AccessTokenNumUsesLimit { get; set; }

        [Input("accessTokenTrustedIps")]
        private InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpGetArgs>? _accessTokenTrustedIps;

        /// <summary>
        /// A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..
        /// </summary>
        public InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpGetArgs> AccessTokenTrustedIps
        {
            get => _accessTokenTrustedIps ?? (_accessTokenTrustedIps = new InputList<Inputs.IdentityGcpAuthAccessTokenTrustedIpGetArgs>());
            set => _accessTokenTrustedIps = value;
        }

        /// <summary>
        /// The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
        /// </summary>
        [Input("accessTokenTtl")]
        public Input<int>? AccessTokenTtl { get; set; }

        [Input("allowedProjects")]
        private InputList<string>? _allowedProjects;

        /// <summary>
        /// List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances
        /// </summary>
        public InputList<string> AllowedProjects
        {
            get => _allowedProjects ?? (_allowedProjects = new InputList<string>());
            set => _allowedProjects = value;
        }

        [Input("allowedServiceAccountEmails")]
        private InputList<string>? _allowedServiceAccountEmails;

        /// <summary>
        /// List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc.
        /// </summary>
        public InputList<string> AllowedServiceAccountEmails
        {
            get => _allowedServiceAccountEmails ?? (_allowedServiceAccountEmails = new InputList<string>());
            set => _allowedServiceAccountEmails = value;
        }

        [Input("allowedZones")]
        private InputList<string>? _allowedZones;

        /// <summary>
        /// List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `&lt;region&gt;-&lt;zone&gt;`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances.
        /// </summary>
        public InputList<string> AllowedZones
        {
            get => _allowedZones ?? (_allowedZones = new InputList<string>());
            set => _allowedZones = value;
        }

        /// <summary>
        /// The ID of the identity to attach the configuration onto.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The Type of GCP Auth Method to use: Options are gce, iam. Default:gce
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IdentityGcpAuthState()
        {
        }
        public static new IdentityGcpAuthState Empty => new IdentityGcpAuthState();
    }
}
