// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    [InfisicalResourceType("infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager")]
    public partial class IntegrationAwsSecretsManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        [Output("accessKeyId")]
        public Output<string?> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        [Output("assumeRoleArn")]
        public Output<string?> AssumeRoleArn { get; private set; } = null!;

        /// <summary>
        /// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
        /// </summary>
        [Output("awsRegion")]
        public Output<string> AwsRegion { get; private set; } = null!;

        /// <summary>
        /// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Output("integrationAuthId")]
        public Output<string> IntegrationAuthId { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Output("integrationId")]
        public Output<string> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
        /// </summary>
        [Output("mappingBehavior")]
        public Output<string> MappingBehavior { get; private set; } = null!;

        /// <summary>
        /// Integration options
        /// </summary>
        [Output("options")]
        public Output<Outputs.IntegrationAwsSecretsManagerOptions> Options { get; private set; } = null!;

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        [Output("secretAccessKey")]
        public Output<string?> SecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Output("secretPath")]
        public Output<string> SecretPath { get; private set; } = null!;

        /// <summary>
        /// The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'.
        /// </summary>
        [Output("secretsManagerPath")]
        public Output<string?> SecretsManagerPath { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationAwsSecretsManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationAwsSecretsManager(string name, IntegrationAwsSecretsManagerArgs args, CustomResourceOptions? options = null)
            : base("infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager", name, args ?? new IntegrationAwsSecretsManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationAwsSecretsManager(string name, Input<string> id, IntegrationAwsSecretsManagerState? state = null, CustomResourceOptions? options = null)
            : base("infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accessKeyId",
                    "secretAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationAwsSecretsManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationAwsSecretsManager Get(string name, Input<string> id, IntegrationAwsSecretsManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationAwsSecretsManager(name, id, state, options);
        }
    }

    public sealed class IntegrationAwsSecretsManagerArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        [Input("assumeRoleArn")]
        public Input<string>? AssumeRoleArn { get; set; }

        /// <summary>
        /// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
        /// </summary>
        [Input("awsRegion", required: true)]
        public Input<string> AwsRegion { get; set; } = null!;

        /// <summary>
        /// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
        /// </summary>
        [Input("mappingBehavior")]
        public Input<string>? MappingBehavior { get; set; }

        /// <summary>
        /// Integration options
        /// </summary>
        [Input("options")]
        public Input<Inputs.IntegrationAwsSecretsManagerOptionsArgs>? Options { get; set; }

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath", required: true)]
        public Input<string> SecretPath { get; set; } = null!;

        /// <summary>
        /// The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'.
        /// </summary>
        [Input("secretsManagerPath")]
        public Input<string>? SecretsManagerPath { get; set; }

        public IntegrationAwsSecretsManagerArgs()
        {
        }
        public static new IntegrationAwsSecretsManagerArgs Empty => new IntegrationAwsSecretsManagerArgs();
    }

    public sealed class IntegrationAwsSecretsManagerState : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        [Input("assumeRoleArn")]
        public Input<string>? AssumeRoleArn { get; set; }

        /// <summary>
        /// The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
        /// </summary>
        [Input("awsRegion")]
        public Input<string>? AwsRegion { get; set; }

        /// <summary>
        /// The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc).
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the integration auth, used internally by Infisical.
        /// </summary>
        [Input("integrationAuthId")]
        public Input<string>? IntegrationAuthId { get; set; }

        /// <summary>
        /// The ID of the integration, used internally by Infisical.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.
        /// </summary>
        [Input("mappingBehavior")]
        public Input<string>? MappingBehavior { get; set; }

        /// <summary>
        /// Integration options
        /// </summary>
        [Input("options")]
        public Input<Inputs.IntegrationAwsSecretsManagerOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// The ID of your Infisical project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The secret path in Infisical to sync secrets from.
        /// </summary>
        [Input("secretPath")]
        public Input<string>? SecretPath { get; set; }

        /// <summary>
        /// The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'.
        /// </summary>
        [Input("secretsManagerPath")]
        public Input<string>? SecretsManagerPath { get; set; }

        public IntegrationAwsSecretsManagerState()
        {
        }
        public static new IntegrationAwsSecretsManagerState Empty => new IntegrationAwsSecretsManagerState();
    }
}
