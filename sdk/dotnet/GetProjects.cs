// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Infisical
{
    public static class GetProjects
    {
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("infisical:index/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithDefaults());

        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("infisical:index/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());

        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("infisical:index/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectsArgs : global::Pulumi.InvokeArgs
    {
        [Input("slug", required: true)]
        public string Slug { get; set; } = null!;

        public GetProjectsArgs()
        {
        }
        public static new GetProjectsArgs Empty => new GetProjectsArgs();
    }

    public sealed class GetProjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public GetProjectsInvokeArgs()
        {
        }
        public static new GetProjectsInvokeArgs Empty => new GetProjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        public readonly bool AutoCapitalization;
        public readonly string CreatedAt;
        public readonly ImmutableDictionary<string, Outputs.GetProjectsEnvironmentsResult> Environments;
        public readonly string Id;
        public readonly string Name;
        public readonly string OrgId;
        public readonly string Slug;
        public readonly string UpdatedAt;
        public readonly string UpgradeStatus;
        public readonly int Version;

        [OutputConstructor]
        private GetProjectsResult(
            bool autoCapitalization,

            string createdAt,

            ImmutableDictionary<string, Outputs.GetProjectsEnvironmentsResult> environments,

            string id,

            string name,

            string orgId,

            string slug,

            string updatedAt,

            string upgradeStatus,

            int version)
        {
            AutoCapitalization = autoCapitalization;
            CreatedAt = createdAt;
            Environments = environments;
            Id = id;
            Name = name;
            OrgId = orgId;
            Slug = slug;
            UpdatedAt = updatedAt;
            UpgradeStatus = upgradeStatus;
            Version = version;
        }
    }
}
