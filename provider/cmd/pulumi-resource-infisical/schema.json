{
    "name": "infisical",
    "description": "A Pulumi package for creating and managing infisical cloud resources.",
    "keywords": [
        "infisical",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`infisical` Terraform Provider](https://github.com/terraform-providers/terraform-provider-infisical).",
    "repository": "https://github.com/sapslaj/pulumi-infisical",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/sapslaj/pulumi-infisical/sdk/go/infisical",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing infisical cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-infisical)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-infisical` repo](https://github.com/sapslaj/pulumi-infisical/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-infisical` repo](https://github.com/terraform-providers/terraform-provider-infisical/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-infisical)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-infisical` repo](https://github.com/sapslaj/pulumi-infisical/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-infisical` repo](https://github.com/terraform-providers/terraform-provider-infisical/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "auth": {
                "$ref": "#/types/infisical:config/auth:auth",
                "description": "The configuration values for authentication"
            },
            "clientId": {
                "type": "string",
                "description": "(DEPRECATED, Use the `auth` attribute), Machine identity client ID. Used to fetch/modify secrets for a given project.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "(DEPRECATED, use `auth` attribute), Machine identity client secret. Used to fetch/modify secrets for a given project",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "Used to point the client to fetch secrets from your self hosted instance of Infisical. If not host is provided, https://app.infisical.com is the default host. This attribute can also be set using the `INFISICAL_HOST` environment variable"
            },
            "serviceToken": {
                "type": "string",
                "description": "(DEPRECATED, Use machine identity auth), Used to fetch/modify secrets for a given project",
                "secret": true
            }
        }
    },
    "types": {
        "infisical:config/auth:auth": {
            "properties": {
                "awsIam": {
                    "$ref": "#/types/infisical:config/authAwsIam:authAwsIam",
                    "description": "The configuration values for AWS IAM Auth\n"
                },
                "kubernetes": {
                    "$ref": "#/types/infisical:config/authKubernetes:authKubernetes",
                    "description": "The configuration values for Kubernetes Auth\n"
                },
                "oidc": {
                    "$ref": "#/types/infisical:config/authOidc:authOidc",
                    "description": "The configuration values for OIDC Auth\n"
                },
                "token": {
                    "type": "string",
                    "description": "The authentication token for Machine Identity Token Auth. This attribute can also be set using the `INFISICAL_TOKEN` environment variable\n",
                    "secret": true
                },
                "universal": {
                    "$ref": "#/types/infisical:config/authUniversal:authUniversal",
                    "description": "The configuration values for Universal Auth\n"
                }
            },
            "type": "object"
        },
        "infisical:config/authAwsIam:authAwsIam": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:config/authKubernetes:authKubernetes": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                },
                "serviceAccountToken": {
                    "type": "string",
                    "description": "The service account token. This attribute can also be set using the `INFISICAL_KUBERNETES_SERVICE_ACCOUNT_TOKEN` environment variable\n",
                    "secret": true
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The path to the service account token. This attribute can also be set using the `INFISICAL_KUBERNETES_SERVICE_ACCOUNT_TOKEN_PATH` environment variable. Default is `/var/run/secrets/kubernetes.io/serviceaccount/token`.\n"
                }
            },
            "type": "object"
        },
        "infisical:config/authOidc:authOidc": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                },
                "tokenEnvironmentVariableName": {
                    "type": "string",
                    "description": "The environment variable name for the OIDC JWT token. This attribute can also be set using the `INFISICAL_OIDC_AUTH_TOKEN_KEY_NAME` environment variable. Default is `INFISICAL_AUTH_JWT`.\n"
                }
            },
            "type": "object"
        },
        "infisical:config/authUniversal:authUniversal": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Machine identity client ID. This attribute can also be set using the `INFISICAL_UNIVERSAL_AUTH_CLIENT_ID` environment variable\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Machine identity client secret. This attribute can also be set using the `INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET` environment variable\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:index/AccessApprovalPolicyApprover:AccessApprovalPolicyApprover": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the approver\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of approver. Either group or user\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the approver. By default, this is the email\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "infisical:index/AppConnection1passwordCredentials:AppConnection1passwordCredentials": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The API token to use for authentication. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/1password\n",
                    "secret": true
                },
                "instanceUrl": {
                    "type": "string",
                    "description": "The URL of the 1Password Connect instance to connect to. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/1password\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "instanceUrl"
            ]
        },
        "infisical:index/AppConnectionAwsCredentials:AppConnectionAwsCredentials": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS Access Key ID used to authenticate requests to AWS services. Required for access-key access method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/aws#access-key\n",
                    "secret": true
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role to assume for performing operations. Infisical will assume this role using AWS Security Token Service (STS). Required for assume-role access method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/aws#assume-role-recommended\n",
                    "secret": true
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS Secret Access Key associated with the Access Key ID to authenticate requests to AWS services. Required for access-key access method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/aws#access-key\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:index/AppConnectionAzureClientSecretsCredentials:AppConnectionAzureClientSecretsCredentials": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Azure application (client) ID. Required for client-secret method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/azure-client-secrets\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The Azure client secret. Required for client-secret method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/azure-client-secrets\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (AAD) tenant ID. Required for client-secret method. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/azure-client-secrets\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "tenantId"
            ]
        },
        "infisical:index/AppConnectionBitbucketCredentials:AppConnectionBitbucketCredentials": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The Bitbucket API token for authentication.\n",
                    "secret": true
                },
                "email": {
                    "type": "string",
                    "description": "The email address associated with the Bitbucket API token.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "email"
            ]
        },
        "infisical:index/AppConnectionCloudflareCredentials:AppConnectionCloudflareCredentials": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The Cloudflare Account ID. This can be found in the sidebar of your Cloudflare dashboard.\n",
                    "secret": true
                },
                "apiToken": {
                    "type": "string",
                    "description": "The Cloudflare API token with the necessary permissions to manage Workers scripts. The token should have Zone:Zone:Read, Zone:Zone Settings:Read, and Zone:Zone:Edit permissions.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "apiToken"
            ]
        },
        "infisical:index/AppConnectionDatabricksCredentials:AppConnectionDatabricksCredentials": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Databricks service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Databricks service principal.\n",
                    "secret": true
                },
                "workspaceUrl": {
                    "type": "string",
                    "description": "The workspace URL of the Databricks instance.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "workspaceUrl"
            ]
        },
        "infisical:index/AppConnectionFlyioCredentials:AppConnectionFlyioCredentials": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The Fly.io access token for authentication.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "infisical:index/AppConnectionGcpCredentials:AppConnectionGcpCredentials": {
            "properties": {
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The service account email to connect with GCP. The service account ID (the part of the email before '@') must be suffixed with the first two sections of your organization ID e.g. service-account-df92581a-0fe9@my-project.iam.gserviceaccount.com. For more details, refer to the documentation here https://infisical.com/docs/integrations/app-connections/gcp#configure-service-account-for-infisical\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:index/AppConnectionLdapCredentials:AppConnectionLdapCredentials": {
            "properties": {
                "dn": {
                    "type": "string",
                    "description": "The Distinguished Name (DN) or User Principal Name (UPN) of the principal to bind with (e.g., 'CN=John,CN=Users,DC=example,DC=com').\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to bind with for authentication.\n",
                    "secret": true
                },
                "provider": {
                    "type": "string",
                    "description": "The LDAP provider (e.g., 'active-directory').\n"
                },
                "sslCertificate": {
                    "type": "string",
                    "description": "The SSL certificate (PEM format) to use for secure connection when using ldaps:// with a self-signed certificate.\n"
                },
                "sslRejectUnauthorized": {
                    "type": "boolean",
                    "description": "Whether or not to reject unauthorized SSL certificates (true/false) when using ldaps://. Set to false only in test environments.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The LDAP server URL (e.g., 'ldap://example.com:389' or 'ldaps://example.com:636').\n"
                }
            },
            "type": "object",
            "required": [
                "dn",
                "password",
                "provider",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dn",
                        "password",
                        "provider",
                        "sslRejectUnauthorized",
                        "url"
                    ]
                }
            }
        },
        "infisical:index/AppConnectionMssqlCredentials:AppConnectionMssqlCredentials": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to connect to the database with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the database.\n"
                },
                "sslCertificate": {
                    "type": "string",
                    "description": "The SSL certificate to use for connection.\n"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL when connecting to the database.\n"
                },
                "sslRejectUnauthorized": {
                    "type": "boolean",
                    "description": "Whether or not to reject unauthorized SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect to the database with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "password",
                        "port",
                        "sslEnabled",
                        "sslRejectUnauthorized",
                        "username"
                    ]
                }
            }
        },
        "infisical:index/AppConnectionMysqlCredentials:AppConnectionMysqlCredentials": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to connect to the database with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the database.\n"
                },
                "sslCertificate": {
                    "type": "string",
                    "description": "The SSL certificate to use for connection.\n"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL when connecting to the database.\n"
                },
                "sslRejectUnauthorized": {
                    "type": "boolean",
                    "description": "Whether or not to reject unauthorized SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect to the database with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "password",
                        "port",
                        "sslEnabled",
                        "sslRejectUnauthorized",
                        "username"
                    ]
                }
            }
        },
        "infisical:index/AppConnectionOracledbCredentials:AppConnectionOracledbCredentials": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to connect to the database with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the database.\n"
                },
                "sslCertificate": {
                    "type": "string",
                    "description": "The SSL certificate to use for connection.\n"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL when connecting to the database.\n"
                },
                "sslRejectUnauthorized": {
                    "type": "boolean",
                    "description": "Whether or not to reject unauthorized SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect to the database with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "password",
                        "port",
                        "sslEnabled",
                        "sslRejectUnauthorized",
                        "username"
                    ]
                }
            }
        },
        "infisical:index/AppConnectionPostgresCredentials:AppConnectionPostgresCredentials": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database to connect to.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname of the database server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to connect to the database with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the database.\n"
                },
                "sslCertificate": {
                    "type": "string",
                    "description": "The SSL certificate to use for connection.\n"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL when connecting to the database.\n"
                },
                "sslRejectUnauthorized": {
                    "type": "boolean",
                    "description": "Whether or not to reject unauthorized SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect to the database with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "password",
                        "port",
                        "sslEnabled",
                        "sslRejectUnauthorized",
                        "username"
                    ]
                }
            }
        },
        "infisical:index/AppConnectionRenderCredentials:AppConnectionRenderCredentials": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key to use for authentication. For more details, refer to the documentation here infisical.com/docs/integrations/app-connections/render\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ]
        },
        "infisical:index/AppConnectionSupabaseCredentials:AppConnectionSupabaseCredentials": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Supabase access key for authentication.\n",
                    "secret": true
                },
                "instanceUrl": {
                    "type": "string",
                    "description": "The Supabase instance URL (e.g., https://your-domain.com).\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey"
            ]
        },
        "infisical:index/DynamicSecretAwsIamConfiguration:DynamicSecretAwsIamConfiguration": {
            "properties": {
                "accessKeyConfig": {
                    "$ref": "#/types/infisical:index/DynamicSecretAwsIamConfigurationAccessKeyConfig:DynamicSecretAwsIamConfigurationAccessKeyConfig",
                    "description": "Configuration for the 'access_key' authentication method.\n"
                },
                "assumeRoleConfig": {
                    "$ref": "#/types/infisical:index/DynamicSecretAwsIamConfigurationAssumeRoleConfig:DynamicSecretAwsIamConfigurationAssumeRoleConfig",
                    "description": "Configuration for the 'assume_role' authentication method.\n"
                },
                "awsPath": {
                    "type": "string",
                    "description": "IAM AWS Path to scope created IAM User resource access.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The authentication method to use. Must be 'access_key' or 'assume_role'.\n"
                },
                "permissionBoundaryPolicyArn": {
                    "type": "string",
                    "description": "The IAM Policy ARN of the AWS Permissions Boundary to attach to IAM users created in the role.\n"
                },
                "policyArns": {
                    "type": "string",
                    "description": "The AWS IAM managed policies that should be attached to the created users. Multiple values can be provided by separating them with commas\n"
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The AWS IAM inline policy that should be attached to the created users. Multiple values can be provided by separating them with commas\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS data center region.\n"
                },
                "userGroups": {
                    "type": "string",
                    "description": "The AWS IAM groups that should be assigned to the created users. Multiple values can be provided by separating them with commas\n"
                }
            },
            "type": "object",
            "required": [
                "method",
                "region"
            ]
        },
        "infisical:index/DynamicSecretAwsIamConfigurationAccessKeyConfig:DynamicSecretAwsIamConfigurationAccessKeyConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The managing AWS IAM User Access Key\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The managing AWS IAM User Secret Key\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretAccessKey"
            ]
        },
        "infisical:index/DynamicSecretAwsIamConfigurationAssumeRoleConfig:DynamicSecretAwsIamConfigurationAssumeRoleConfig": {
            "properties": {
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the AWS Role to assume.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "infisical:index/DynamicSecretAwsIamMetadata:DynamicSecretAwsIamMetadata": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the metadata object\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the metadata object\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/DynamicSecretKubernetesConfiguration:DynamicSecretKubernetesConfiguration": {
            "properties": {
                "apiConfig": {
                    "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfigurationApiConfig:DynamicSecretKubernetesConfigurationApiConfig",
                    "description": "Configuration for the 'api' authentication method.\n"
                },
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of audiences to include in the generated token.\n"
                },
                "authMethod": {
                    "type": "string",
                    "description": "Choose between Token ('api') or 'gateway' authentication. If using Gateway, the Gateway must be deployed in your Kubernetes cluster.\n"
                },
                "credentialType": {
                    "type": "string",
                    "description": "Choose between 'static' (predefined service account) or 'dynamic' (temporary service accounts with role assignments).\n"
                },
                "dynamicConfig": {
                    "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfigurationDynamicConfig:DynamicSecretKubernetesConfigurationDynamicConfig",
                    "description": "Configuration for the 'dynamic' credential type.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "Select a gateway for private cluster access. If not specified, the Internet Gateway will be used.\n"
                },
                "staticConfig": {
                    "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfigurationStaticConfig:DynamicSecretKubernetesConfigurationStaticConfig",
                    "description": "Configuration for the 'static' credential type.\n"
                }
            },
            "type": "object",
            "required": [
                "authMethod",
                "credentialType"
            ]
        },
        "infisical:index/DynamicSecretKubernetesConfigurationApiConfig:DynamicSecretKubernetesConfigurationApiConfig": {
            "properties": {
                "ca": {
                    "type": "string",
                    "description": "Custom CA certificate for the Kubernetes API server. Leave blank to use the system/public CA.\n"
                },
                "clusterToken": {
                    "type": "string",
                    "description": "Service account token with permissions to create service accounts and manage RBAC.\n",
                    "secret": true
                },
                "clusterUrl": {
                    "type": "string",
                    "description": "Kubernetes API server URL (e.g., https://kubernetes.default.svc).\n"
                },
                "enableSsl": {
                    "type": "boolean",
                    "description": "Whether to enable SSL verification for the Kubernetes API server connection.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterToken",
                "clusterUrl"
            ]
        },
        "infisical:index/DynamicSecretKubernetesConfigurationDynamicConfig:DynamicSecretKubernetesConfigurationDynamicConfig": {
            "properties": {
                "allowedNamespaces": {
                    "type": "string",
                    "description": "Kubernetes namespace(s) where the service accounts will be created. You can specify multiple namespaces as a comma-separated list (e.g., “default,kube-system”). During lease creation, you can specify which namespace to use from this allowed list.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Name of the role to assign to the temporary service account.\n"
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of role to assign ('cluster-role' or 'role').\n"
                }
            },
            "type": "object",
            "required": [
                "allowedNamespaces",
                "role",
                "roleType"
            ]
        },
        "infisical:index/DynamicSecretKubernetesConfigurationStaticConfig:DynamicSecretKubernetesConfigurationStaticConfig": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "Kubernetes namespace where the service account exists.\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "Name of the service account to generate tokens for.\n"
                }
            },
            "type": "object",
            "required": [
                "namespace",
                "serviceAccountName"
            ]
        },
        "infisical:index/DynamicSecretKubernetesMetadata:DynamicSecretKubernetesMetadata": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the metadata object\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the metadata object\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/DynamicSecretSqlDatabaseConfiguration:DynamicSecretSqlDatabaseConfiguration": {
            "properties": {
                "ca": {
                    "type": "string",
                    "description": "The CA certificate to use to connect to the database.\n"
                },
                "client": {
                    "type": "string",
                    "description": "The database client to use. Currently supported values are postgres, mysql2, oracledb, mssql, sap-ase, and vertica.\n"
                },
                "creationStatement": {
                    "type": "string",
                    "description": "The creation statement to use to create the dynamic secret lease.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The name of the database to use.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The Gateway ID to use to connect to the database.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the database server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use to connect to the database.\n",
                    "secret": true
                },
                "passwordRequirements": {
                    "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseConfigurationPasswordRequirements:DynamicSecretSqlDatabaseConfigurationPasswordRequirements",
                    "description": "The password requirements to use to create the dynamic secret lease.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the database server.\n"
                },
                "renewStatement": {
                    "type": "string",
                    "description": "The renew statement to use to renew the dynamic secret lease.\n"
                },
                "revocationStatement": {
                    "type": "string",
                    "description": "The revocation statement to use to revoke the dynamic secret lease.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to connect to the database.\n"
                }
            },
            "type": "object",
            "required": [
                "client",
                "creationStatement",
                "database",
                "host",
                "password",
                "port",
                "revocationStatement",
                "username"
            ]
        },
        "infisical:index/DynamicSecretSqlDatabaseConfigurationPasswordRequirements:DynamicSecretSqlDatabaseConfigurationPasswordRequirements": {
            "properties": {
                "allowedSymbols": {
                    "type": "string",
                    "description": "The symbols allowed in the password.\n"
                },
                "length": {
                    "type": "integer",
                    "description": "The length of the password to use to create the dynamic secret lease.\n"
                },
                "required": {
                    "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseConfigurationPasswordRequirementsRequired:DynamicSecretSqlDatabaseConfigurationPasswordRequirementsRequired",
                    "description": "The required characters to use to create the dynamic secret lease.\n"
                }
            },
            "type": "object",
            "required": [
                "length",
                "required"
            ]
        },
        "infisical:index/DynamicSecretSqlDatabaseConfigurationPasswordRequirementsRequired:DynamicSecretSqlDatabaseConfigurationPasswordRequirementsRequired": {
            "properties": {
                "digits": {
                    "type": "integer",
                    "description": "The number of digits required in the password.\n"
                },
                "lowercase": {
                    "type": "integer",
                    "description": "The number of lowercase characters required in the password.\n"
                },
                "symbols": {
                    "type": "integer",
                    "description": "The number of symbols required in the password.\n"
                },
                "uppercase": {
                    "type": "integer",
                    "description": "The number of uppercase characters required in the password.\n"
                }
            },
            "type": "object",
            "required": [
                "digits",
                "lowercase",
                "symbols",
                "uppercase"
            ]
        },
        "infisical:index/DynamicSecretSqlDatabaseMetadata:DynamicSecretSqlDatabaseMetadata": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the metadata object\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the metadata object\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/IdentityAwsAuthAccessTokenTrustedIp:IdentityAwsAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityAzureAuthAccessTokenTrustedIp:IdentityAzureAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityGcpAuthAccessTokenTrustedIp:IdentityGcpAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityKubernetesAuthAccessTokenTrustedIp:IdentityKubernetesAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityMetadata:IdentityMetadata": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the metadata object\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the metadata object\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/IdentityOidcAuthAccessTokenTrustedIp:IdentityOidcAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityUniversalAuthAccessTokenTrustedIp:IdentityUniversalAuthAccessTokenTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IdentityUniversalAuthClientSecretTrustedIp:IdentityUniversalAuthClientSecretTrustedIp": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress"
                    ]
                }
            }
        },
        "infisical:index/IntegrationAwsParameterStoreOptions:IntegrationAwsParameterStoreOptions": {
            "properties": {
                "awsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IntegrationAwsParameterStoreOptionsAwsTag:IntegrationAwsParameterStoreOptionsAwsTag"
                    },
                    "description": "Tags to attach to the AWS parameter store secrets.\n"
                },
                "shouldDisableDelete": {
                    "type": "boolean",
                    "description": "Whether to disable deletion of existing secrets in AWS Parameter Store.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "shouldDisableDelete"
                    ]
                }
            }
        },
        "infisical:index/IntegrationAwsParameterStoreOptionsAwsTag:IntegrationAwsParameterStoreOptionsAwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/IntegrationAwsSecretsManagerOptions:IntegrationAwsSecretsManagerOptions": {
            "properties": {
                "awsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IntegrationAwsSecretsManagerOptionsAwsTag:IntegrationAwsSecretsManagerOptionsAwsTag"
                    },
                    "description": "Tags to attach to the AWS Secrets Manager secrets.\n"
                },
                "metadataSyncMode": {
                    "type": "string",
                    "description": "The sync mode for AWS tags. The supported options are `secret-metadata` and `custom`. If `secret-metadata` is selected, the metadata of the Infisical secrets are used as tags in AWS (only supported for one-to-one integrations). If `custom` is selected, then the key/value pairs in the `aws_tags` field is used.\n"
                },
                "secretPrefix": {
                    "type": "string",
                    "description": "The prefix to add to the secret name in AWS Secrets Manager.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/IntegrationAwsSecretsManagerOptionsAwsTag:IntegrationAwsSecretsManagerOptionsAwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/IntegrationGcpSecretManagerOptions:IntegrationGcpSecretManagerOptions": {
            "properties": {
                "secretPrefix": {
                    "type": "string",
                    "description": "The prefix to add to the secret name in GCP Secret Manager.\n"
                },
                "secretSuffix": {
                    "type": "string",
                    "description": "The suffix to add to the secret name in GCP Secret Manager.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/ProjectGroupRole:ProjectGroupRole": {
            "properties": {
                "isTemporary": {
                    "type": "boolean",
                    "description": "Flag to indicate the assigned role is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.\n"
                },
                "roleSlug": {
                    "type": "string",
                    "description": "The slug of the role\n"
                },
                "temporaryAccessStartTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access should begin. This is in the format YYYY-MM-DDTHH:MM:SSZ e.g. 2024-09-19T12:43:13Z\n"
                },
                "temporaryRange": {
                    "type": "string",
                    "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h\n"
                }
            },
            "type": "object",
            "required": [
                "roleSlug"
            ]
        },
        "infisical:index/ProjectIdentityIdentity:ProjectIdentityIdentity": {
            "properties": {
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The auth methods for the identity\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the identity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the identity\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authMethods",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "infisical:index/ProjectIdentityRole:ProjectIdentityRole": {
            "properties": {
                "customRoleId": {
                    "type": "string",
                    "description": "The id of the custom role slug\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the project identity role.\n"
                },
                "isTemporary": {
                    "type": "boolean",
                    "description": "Flag to indicate the assigned role is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.\n"
                },
                "roleSlug": {
                    "type": "string",
                    "description": "The slug of the role\n"
                },
                "temporaryAccessEndTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time\n"
                },
                "temporaryAccessStartTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access should begin. The current time is used by default.\n"
                },
                "temporaryMode": {
                    "type": "string",
                    "description": "Type of temporary access given. Types: relative. Default: relative\n"
                },
                "temporaryRange": {
                    "type": "string",
                    "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h\n"
                }
            },
            "type": "object",
            "required": [
                "roleSlug"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customRoleId",
                        "id",
                        "isTemporary",
                        "roleSlug",
                        "temporaryAccessEndTime",
                        "temporaryAccessStartTime",
                        "temporaryMode",
                        "temporaryRange"
                    ]
                }
            }
        },
        "infisical:index/ProjectIdentitySpecificPrivilegePermission:ProjectIdentitySpecificPrivilegePermission": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describe what action an entity can take. Enum: create,edit,delete,read\n"
                },
                "conditions": {
                    "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermissionConditions:ProjectIdentitySpecificPrivilegePermissionConditions",
                    "description": "The conditions to scope permissions\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Describe what action an entity can take. Enum: role,member,groups,settings,integrations,webhooks,service-tokens,environments,tags,audit-logs,ip-allowlist,workspace,secrets,secret-rollback,secret-approval,secret-rotation,identity,certificate-authorities,certificates,certificate-templates,kms,pki-alerts,pki-collections\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "conditions",
                "subject"
            ]
        },
        "infisical:index/ProjectIdentitySpecificPrivilegePermissionConditions:ProjectIdentitySpecificPrivilegePermissionConditions": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The environment slug this permission should allow.\n"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path this permission should be scoped to\n"
                }
            },
            "type": "object",
            "required": [
                "environment"
            ]
        },
        "infisical:index/ProjectIdentitySpecificPrivilegePermissionsV2:ProjectIdentitySpecificPrivilegePermissionsV2": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describe what actions an entity can take.\n"
                },
                "conditions": {
                    "type": "string",
                    "description": "When specified, only matching conditions will be allowed to access given resource. Refer to the documentation in https://infisical.com/docs/internals/permissions#conditions for the complete list of supported properties and operators.\n"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "Whether rule forbids. Set this to true if permission forbids.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Describe the entity the permission pertains to.\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "inverted",
                        "subject"
                    ]
                }
            }
        },
        "infisical:index/ProjectRolePermission:ProjectRolePermission": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Describe what action an entity can take. Enum: create,edit,delete,read\n"
                },
                "conditions": {
                    "$ref": "#/types/infisical:index/ProjectRolePermissionConditions:ProjectRolePermissionConditions",
                    "description": "The conditions to scope permissions\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Describe what action an entity can take. Enum: role,member,groups,settings,integrations,webhooks,service-tokens,environments,tags,audit-logs,ip-allowlist,workspace,secrets,secret-rollback,secret-approval,secret-rotation,identity,certificate-authorities,certificates,certificate-templates,kms,pki-alerts,pki-collections\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "subject"
            ]
        },
        "infisical:index/ProjectRolePermissionConditions:ProjectRolePermissionConditions": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The environment slug this permission should allow.\n"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path this permission should be scoped to\n"
                }
            },
            "type": "object"
        },
        "infisical:index/ProjectRolePermissionsV2:ProjectRolePermissionsV2": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describe what actions an entity can take.\n"
                },
                "conditions": {
                    "type": "string",
                    "description": "When specified, only matching conditions will be allowed to access given resource. Refer to the documentation in https://infisical.com/docs/internals/permissions#conditions for the complete list of supported properties and operators.\n"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "Whether rule forbids. Set this to true if permission forbids.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Describe the entity the permission pertains to.\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "inverted",
                        "subject"
                    ]
                }
            }
        },
        "infisical:index/ProjectTemplateEnvironment:ProjectTemplateEnvironment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "position",
                "slug"
            ]
        },
        "infisical:index/ProjectTemplateRole:ProjectTemplateRole": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectTemplateRolePermission:ProjectTemplateRolePermission"
                    },
                    "description": "The permissions assigned to the role. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-roles-permissions for its usage.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the role\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "permissions",
                        "slug"
                    ]
                }
            }
        },
        "infisical:index/ProjectTemplateRolePermission:ProjectTemplateRolePermission": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describe what actions an entity can take.\n"
                },
                "conditions": {
                    "type": "string",
                    "description": "When specified, only matching conditions will be allowed to access given resource. Refer to the documentation in https://infisical.com/docs/internals/permissions#conditions for the complete list of supported properties and operators.\n"
                },
                "inverted": {
                    "type": "boolean",
                    "description": "Whether rule forbids. Set this to true if permission forbids.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Describe the entity the permission pertains to.\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "inverted",
                        "subject"
                    ]
                }
            }
        },
        "infisical:index/ProjectUserRole:ProjectUserRole": {
            "properties": {
                "customRoleId": {
                    "type": "string",
                    "description": "The id of the custom role slug\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the project user role.\n"
                },
                "isTemporary": {
                    "type": "boolean",
                    "description": "Flag to indicate the assigned role is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required.\n"
                },
                "roleSlug": {
                    "type": "string",
                    "description": "The slug of the role\n"
                },
                "temporaryAccessEndTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time\n"
                },
                "temporaryAccessStartTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access should begin. The current time is used by default.\n"
                },
                "temporaryMode": {
                    "type": "string",
                    "description": "Type of temporary access given. Types: relative. Default: relative\n"
                },
                "temporaryRange": {
                    "type": "string",
                    "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h\n"
                }
            },
            "type": "object",
            "required": [
                "roleSlug"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customRoleId",
                        "id",
                        "isTemporary",
                        "roleSlug",
                        "temporaryAccessEndTime",
                        "temporaryAccessStartTime",
                        "temporaryMode",
                        "temporaryRange"
                    ]
                }
            }
        },
        "infisical:index/ProjectUserUser:ProjectUserUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the user\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the user\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the user\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "email",
                        "firstName",
                        "id",
                        "lastName"
                    ]
                }
            }
        },
        "infisical:index/ProviderAuth:ProviderAuth": {
            "properties": {
                "awsIam": {
                    "$ref": "#/types/infisical:index/ProviderAuthAwsIam:ProviderAuthAwsIam",
                    "description": "The configuration values for AWS IAM Auth\n"
                },
                "kubernetes": {
                    "$ref": "#/types/infisical:index/ProviderAuthKubernetes:ProviderAuthKubernetes",
                    "description": "The configuration values for Kubernetes Auth\n"
                },
                "oidc": {
                    "$ref": "#/types/infisical:index/ProviderAuthOidc:ProviderAuthOidc",
                    "description": "The configuration values for OIDC Auth\n"
                },
                "token": {
                    "type": "string",
                    "description": "The authentication token for Machine Identity Token Auth. This attribute can also be set using the `INFISICAL_TOKEN` environment variable\n",
                    "secret": true
                },
                "universal": {
                    "$ref": "#/types/infisical:index/ProviderAuthUniversal:ProviderAuthUniversal",
                    "description": "The configuration values for Universal Auth\n"
                }
            },
            "type": "object"
        },
        "infisical:index/ProviderAuthAwsIam:ProviderAuthAwsIam": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:index/ProviderAuthKubernetes:ProviderAuthKubernetes": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                },
                "serviceAccountToken": {
                    "type": "string",
                    "description": "The service account token. This attribute can also be set using the `INFISICAL_KUBERNETES_SERVICE_ACCOUNT_TOKEN` environment variable\n",
                    "secret": true
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The path to the service account token. This attribute can also be set using the `INFISICAL_KUBERNETES_SERVICE_ACCOUNT_TOKEN_PATH` environment variable. Default is `/var/run/secrets/kubernetes.io/serviceaccount/token`.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/ProviderAuthOidc:ProviderAuthOidc": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "Machine identity ID. This attribute can also be set using the `INFISICAL_MACHINE_IDENTITY_ID` environment variable\n",
                    "secret": true
                },
                "tokenEnvironmentVariableName": {
                    "type": "string",
                    "description": "The environment variable name for the OIDC JWT token. This attribute can also be set using the `INFISICAL_OIDC_AUTH_TOKEN_KEY_NAME` environment variable. Default is `INFISICAL_AUTH_JWT`.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/ProviderAuthUniversal:ProviderAuthUniversal": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Machine identity client ID. This attribute can also be set using the `INFISICAL_UNIVERSAL_AUTH_CLIENT_ID` environment variable\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Machine identity client secret. This attribute can also be set using the `INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET` environment variable\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "infisical:index/SecretApprovalPolicyApprover:SecretApprovalPolicyApprover": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the approver\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of approver. Either group or user\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the approver. By default, this is the email\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "infisical:index/SecretRotationAwsIamUserSecretParameters:SecretRotationAwsIamUserSecretParameters": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The AWS region the client is present in.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the client to rotate credentials for.\n"
                }
            },
            "type": "object",
            "required": [
                "region",
                "userName"
            ]
        },
        "infisical:index/SecretRotationAwsIamUserSecretRotateAtUtc:SecretRotationAwsIamUserSecretRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationAwsIamUserSecretSecretsMapping:SecretRotationAwsIamUserSecretSecretsMapping": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The name of the secret that the access key ID will be mapped to.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The name of the secret that the rotated secret access key will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "secretAccessKey"
            ]
        },
        "infisical:index/SecretRotationAwsIamUserSecretTemporaryParameters:SecretRotationAwsIamUserSecretTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretRotationAzureClientSecretParameters:SecretRotationAzureClientSecretParameters": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Application to rotate the client secret for.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The ID of the Azure Application to rotate the client secret for.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "objectId"
            ]
        },
        "infisical:index/SecretRotationAzureClientSecretRotateAtUtc:SecretRotationAzureClientSecretRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationAzureClientSecretSecretsMapping:SecretRotationAzureClientSecretSecretsMapping": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The name of the secret that the client ID will be mapped to.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The name of the secret that the rotated client secret will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret"
            ]
        },
        "infisical:index/SecretRotationAzureClientSecretTemporaryParameters:SecretRotationAzureClientSecretTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretRotationLdapPasswordParameters:SecretRotationLdapPasswordParameters": {
            "properties": {
                "dn": {
                    "type": "string",
                    "description": "The Distinguished Name (DN) of the LDAP entry to rotate the password for.\n"
                },
                "passwordRequirements": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordParametersPasswordRequirements:SecretRotationLdapPasswordParametersPasswordRequirements",
                    "description": "Password generation requirements.\n"
                },
                "rotationMethod": {
                    "type": "string",
                    "description": "The method to use for rotating the password. Supported options: connection-principal and target-principal (default: connection-principal)\n"
                }
            },
            "type": "object",
            "required": [
                "dn",
                "passwordRequirements"
            ]
        },
        "infisical:index/SecretRotationLdapPasswordParametersPasswordRequirements:SecretRotationLdapPasswordParametersPasswordRequirements": {
            "properties": {
                "allowedSymbols": {
                    "type": "string",
                    "description": "String of allowed symbols for password generation.\n"
                },
                "length": {
                    "type": "integer",
                    "description": "The length of the generated password.\n"
                },
                "required": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordParametersPasswordRequirementsRequired:SecretRotationLdapPasswordParametersPasswordRequirementsRequired",
                    "description": "Required character types in the generated password.\n"
                }
            },
            "type": "object",
            "required": [
                "length",
                "required"
            ]
        },
        "infisical:index/SecretRotationLdapPasswordParametersPasswordRequirementsRequired:SecretRotationLdapPasswordParametersPasswordRequirementsRequired": {
            "properties": {
                "digits": {
                    "type": "integer",
                    "description": "Minimum number of digits required in the password.\n"
                },
                "lowercase": {
                    "type": "integer",
                    "description": "Minimum number of lowercase letters required in the password.\n"
                },
                "symbols": {
                    "type": "integer",
                    "description": "Minimum number of symbols required in the password.\n"
                },
                "uppercase": {
                    "type": "integer",
                    "description": "Minimum number of uppercase letters required in the password.\n"
                }
            },
            "type": "object",
            "required": [
                "digits",
                "lowercase",
                "symbols",
                "uppercase"
            ]
        },
        "infisical:index/SecretRotationLdapPasswordRotateAtUtc:SecretRotationLdapPasswordRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationLdapPasswordSecretsMapping:SecretRotationLdapPasswordSecretsMapping": {
            "properties": {
                "dn": {
                    "type": "string",
                    "description": "The name of the secret that the Distinguished Name will be mapped to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The name of the secret that the generated password will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "dn",
                "password"
            ]
        },
        "infisical:index/SecretRotationLdapPasswordTemporaryParameters:SecretRotationLdapPasswordTemporaryParameters": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The password of the provided principal if 'parameters.rotation_method' is set to 'target-principal'.\n"
                }
            },
            "type": "object"
        },
        "infisical:index/SecretRotationMssqlCredentialsParameters:SecretRotationMssqlCredentialsParameters": {
            "properties": {
                "username1": {
                    "type": "string",
                    "description": "The username of the first login to rotate passwords for. This user must already exists in your database.\n"
                },
                "username2": {
                    "type": "string",
                    "description": "The username of the second login to rotate passwords for. This user must already exists in your database.\n"
                }
            },
            "type": "object",
            "required": [
                "username1",
                "username2"
            ]
        },
        "infisical:index/SecretRotationMssqlCredentialsRotateAtUtc:SecretRotationMssqlCredentialsRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationMssqlCredentialsSecretsMapping:SecretRotationMssqlCredentialsSecretsMapping": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The name of the secret that the generated password will be mapped to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the secret that the active username will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "infisical:index/SecretRotationMssqlCredentialsTemporaryParameters:SecretRotationMssqlCredentialsTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretRotationMysqlCredentialsParameters:SecretRotationMysqlCredentialsParameters": {
            "properties": {
                "username1": {
                    "type": "string",
                    "description": "The username of the first login to rotate passwords for. This user must already exists in your database.\n"
                },
                "username2": {
                    "type": "string",
                    "description": "The username of the second login to rotate passwords for. This user must already exists in your database.\n"
                }
            },
            "type": "object",
            "required": [
                "username1",
                "username2"
            ]
        },
        "infisical:index/SecretRotationMysqlCredentialsRotateAtUtc:SecretRotationMysqlCredentialsRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationMysqlCredentialsSecretsMapping:SecretRotationMysqlCredentialsSecretsMapping": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The name of the secret that the generated password will be mapped to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the secret that the active username will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "infisical:index/SecretRotationMysqlCredentialsTemporaryParameters:SecretRotationMysqlCredentialsTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretRotationOracledbCredentialsParameters:SecretRotationOracledbCredentialsParameters": {
            "properties": {
                "username1": {
                    "type": "string",
                    "description": "The username of the first login to rotate passwords for. This user must already exists in your database.\n"
                },
                "username2": {
                    "type": "string",
                    "description": "The username of the second login to rotate passwords for. This user must already exists in your database.\n"
                }
            },
            "type": "object",
            "required": [
                "username1",
                "username2"
            ]
        },
        "infisical:index/SecretRotationOracledbCredentialsRotateAtUtc:SecretRotationOracledbCredentialsRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationOracledbCredentialsSecretsMapping:SecretRotationOracledbCredentialsSecretsMapping": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The name of the secret that the generated password will be mapped to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the secret that the active username will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "infisical:index/SecretRotationOracledbCredentialsTemporaryParameters:SecretRotationOracledbCredentialsTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretRotationPostgresCredentialsParameters:SecretRotationPostgresCredentialsParameters": {
            "properties": {
                "username1": {
                    "type": "string",
                    "description": "The username of the first login to rotate passwords for. This user must already exists in your database.\n"
                },
                "username2": {
                    "type": "string",
                    "description": "The username of the second login to rotate passwords for. This user must already exists in your database.\n"
                }
            },
            "type": "object",
            "required": [
                "username1",
                "username2"
            ]
        },
        "infisical:index/SecretRotationPostgresCredentialsRotateAtUtc:SecretRotationPostgresCredentialsRotateAtUtc": {
            "properties": {
                "hours": {
                    "type": "integer",
                    "description": "The hour at which the rotation should occur (UTC).\n"
                },
                "minutes": {
                    "type": "integer",
                    "description": "The minute at which the rotation should occur (UTC).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hours",
                        "minutes"
                    ]
                }
            }
        },
        "infisical:index/SecretRotationPostgresCredentialsSecretsMapping:SecretRotationPostgresCredentialsSecretsMapping": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The name of the secret that the generated password will be mapped to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the secret that the active username will be mapped to.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "infisical:index/SecretRotationPostgresCredentialsTemporaryParameters:SecretRotationPostgresCredentialsTemporaryParameters": {
            "type": "object"
        },
        "infisical:index/SecretSecretReminder:SecretSecretReminder": {
            "properties": {
                "note": {
                    "type": "string",
                    "description": "Note for the secret rotation reminder\n"
                },
                "repeatDays": {
                    "type": "integer",
                    "description": "Frequency of secret rotation reminder in days\n"
                }
            },
            "type": "object",
            "required": [
                "repeatDays"
            ]
        },
        "infisical:index/SecretSync1passwordDestinationConfig:SecretSync1passwordDestinationConfig": {
            "properties": {
                "valueLabel": {
                    "type": "string",
                    "description": "The label of the 1Password item field which will hold your secret value. For example, if you were to sync Infisical secret 'foo: bar', the 1Password item equivalent would have an item title of 'foo', and a field on that item 'value: bar'. The field label 'value' is what gets changed by this option\n"
                },
                "vaultId": {
                    "type": "string",
                    "description": "The ID of the 1Password vault to sync secrets to\n"
                }
            },
            "type": "object",
            "required": [
                "vaultId"
            ]
        },
        "infisical:index/SecretSync1passwordSyncOptions:SecretSync1passwordSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from 1Password. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the 1Password destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAwsParameterStoreDestinationConfig:SecretSyncAwsParameterStoreDestinationConfig": {
            "properties": {
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region of your AWS Parameter Store\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path in the AWS Parameter Store where the secrets will be stored, Example: /example/path/\n"
                }
            },
            "type": "object",
            "required": [
                "awsRegion",
                "path"
            ]
        },
        "infisical:index/SecretSyncAwsParameterStoreSyncOptions:SecretSyncAwsParameterStoreSyncOptions": {
            "properties": {
                "awsKmsKeyId": {
                    "type": "string",
                    "description": "The AWS KMS key ID to use for encryption\n"
                },
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from AWS Parameter Store. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the AWS Parameter Store destination.\n"
                },
                "syncSecretMetadataAsTags": {
                    "type": "boolean",
                    "description": "Whether to sync the secret metadata as tags\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreSyncOptionsTag:SecretSyncAwsParameterStoreSyncOptionsTag"
                    },
                    "description": "The tags to sync to the secret\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior",
                        "syncSecretMetadataAsTags"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAwsParameterStoreSyncOptionsTag:SecretSyncAwsParameterStoreSyncOptionsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the tag\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/SecretSyncAwsSecretsManagerDestinationConfig:SecretSyncAwsSecretsManagerDestinationConfig": {
            "properties": {
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region of your AWS Secrets Manager\n"
                },
                "awsSecretsManagerSecretName": {
                    "type": "string",
                    "description": "The name of the AWS secret to map to. This only applies when mapping_behavior is set to 'many-to-one'.\n"
                },
                "mappingBehavior": {
                    "type": "string",
                    "description": "The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret.\n"
                }
            },
            "type": "object",
            "required": [
                "awsRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsRegion",
                        "mappingBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAwsSecretsManagerSyncOptions:SecretSyncAwsSecretsManagerSyncOptions": {
            "properties": {
                "awsKmsKeyId": {
                    "type": "string",
                    "description": "The AWS KMS key ID to use for encryption\n"
                },
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from AWS Secrets Manager. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the AWS Secrets Manager destination.\n"
                },
                "syncSecretMetadataAsTags": {
                    "type": "boolean",
                    "description": "Whether to sync the secret metadata as tags. This is only supported for the 'one-to-one' mapping behavior.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerSyncOptionsTag:SecretSyncAwsSecretsManagerSyncOptionsTag"
                    },
                    "description": "The tags to sync to the secret\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior",
                        "syncSecretMetadataAsTags"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAwsSecretsManagerSyncOptionsTag:SecretSyncAwsSecretsManagerSyncOptionsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the tag\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "infisical:index/SecretSyncAzureAppConfigurationDestinationConfig:SecretSyncAzureAppConfigurationDestinationConfig": {
            "properties": {
                "configurationUrl": {
                    "type": "string",
                    "description": "The URL of your Azure App Configuration\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label to attach to secrets created in Azure App Configuration\n"
                }
            },
            "type": "object",
            "required": [
                "configurationUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configurationUrl",
                        "label"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAzureAppConfigurationSyncOptions:SecretSyncAzureAppConfigurationSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Azure App Configuration. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Azure App Configuration destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAzureDevopsDestinationConfig:SecretSyncAzureDevopsDestinationConfig": {
            "properties": {
                "devopsProjectId": {
                    "type": "string",
                    "description": "The ID of the Azure DevOps project to sync secrets to.\n"
                }
            },
            "type": "object",
            "required": [
                "devopsProjectId"
            ]
        },
        "infisical:index/SecretSyncAzureDevopsSyncOptions:SecretSyncAzureDevopsSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Azure DevOps. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Azure DevOps destination.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncAzureKeyVaultDestinationConfig:SecretSyncAzureKeyVaultDestinationConfig": {
            "properties": {
                "vaultBaseUrl": {
                    "type": "string",
                    "description": "The base URL of your Azure Key Vault\n"
                }
            },
            "type": "object",
            "required": [
                "vaultBaseUrl"
            ]
        },
        "infisical:index/SecretSyncAzureKeyVaultSyncOptions:SecretSyncAzureKeyVaultSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Azure Key Vault. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Azure Key Vault destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncBitbucketDestinationConfig:SecretSyncBitbucketDestinationConfig": {
            "properties": {
                "environmentId": {
                    "type": "string",
                    "description": "The Bitbucket deployment environment ID (optional).\n"
                },
                "repositorySlug": {
                    "type": "string",
                    "description": "The Bitbucket repository slug to sync secrets to.\n"
                },
                "workspaceSlug": {
                    "type": "string",
                    "description": "The Bitbucket workspace slug.\n"
                }
            },
            "type": "object",
            "required": [
                "repositorySlug",
                "workspaceSlug"
            ]
        },
        "infisical:index/SecretSyncBitbucketSyncOptions:SecretSyncBitbucketSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Bitbucket. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Bitbucket destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncCloudflarePagesDestinationConfig:SecretSyncCloudflarePagesDestinationConfig": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The Cloudflare Pages environment (production, preview) where the secrets will be synced\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Cloudflare Pages project name where the secrets will be synced\n"
                }
            },
            "type": "object",
            "required": [
                "environment",
                "projectName"
            ]
        },
        "infisical:index/SecretSyncCloudflarePagesSyncOptions:SecretSyncCloudflarePagesSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Cloudflare Pages. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Cloudflare Pages destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncCloudflareWorkersDestinationConfig:SecretSyncCloudflareWorkersDestinationConfig": {
            "properties": {
                "scriptId": {
                    "type": "string",
                    "description": "The Cloudflare Workers script ID where the secrets will be synced\n"
                }
            },
            "type": "object",
            "required": [
                "scriptId"
            ]
        },
        "infisical:index/SecretSyncCloudflareWorkersSyncOptions:SecretSyncCloudflareWorkersSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Cloudflare Workers. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Cloudflare Workers destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncDatabricksDestinationConfig:SecretSyncDatabricksDestinationConfig": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "The Databricks secret scope to sync secrets to.\n"
                }
            },
            "type": "object",
            "required": [
                "scope"
            ]
        },
        "infisical:index/SecretSyncDatabricksSyncOptions:SecretSyncDatabricksSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Databricks. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Databricks destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncFlyioDestinationConfig:SecretSyncFlyioDestinationConfig": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The Fly.io app ID to sync secrets to.\n"
                }
            },
            "type": "object",
            "required": [
                "appId"
            ]
        },
        "infisical:index/SecretSyncFlyioSyncOptions:SecretSyncFlyioSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Fly.io. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Fly.io destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncGcpSecretManagerDestinationConfig:SecretSyncGcpSecretManagerDestinationConfig": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the GCP project to sync with\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the sync with GCP Secret Manager. Supported options: global\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "scope"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncGcpSecretManagerSyncOptions:SecretSyncGcpSecretManagerSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from GCP Secret Manager. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination, import-prioritize-source, import-prioritize-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the GCP Secret Manager destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncGithubDestinationConfig:SecretSyncGithubDestinationConfig": {
            "properties": {
                "repositoryEnvironment": {
                    "type": "string",
                    "description": "The environment to sync the secrets to, required if scope is `repository-environment`\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The repository to sync the secrets to, required if scope is `repository` or `repository-environment`. This is only the name of the repository, without the repository owner included. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `go-sdk` here.\n"
                },
                "repositoryOwner": {
                    "type": "string",
                    "description": "The owner of the Github repository, required if scope is `repository`, `repository-environment`, or `organization`. This is the organization name, or the username for personal repositories. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `Infisical` here.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope to sync the secrets to, repository|organization\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The repository ids to sync the secrets to, required if scope is `organization` and the visibility field is set to `selected`\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of the Github repository, required if scope is `organization`. Accepted values are: `all`|`private`|`selected`\n"
                }
            },
            "type": "object",
            "required": [
                "scope"
            ]
        },
        "infisical:index/SecretSyncGithubSyncOptions:SecretSyncGithubSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Github. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Github destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncRenderDestinationConfig:SecretSyncRenderDestinationConfig": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "The Render scope that secrets should be synced to. Supported options: service\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the Render service to sync secrets to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Render resource type to sync secrets to. Supported options: env, file\n"
                }
            },
            "type": "object",
            "required": [
                "scope",
                "serviceId",
                "type"
            ]
        },
        "infisical:index/SecretSyncRenderSyncOptions:SecretSyncRenderSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Render. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Render destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/SecretSyncSupabaseDestinationConfig:SecretSyncSupabaseDestinationConfig": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The Supabase project ID to sync secrets to.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Supabase project name (optional).\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "infisical:index/SecretSyncSupabaseSyncOptions:SecretSyncSupabaseSyncOptions": {
            "properties": {
                "disableSecretDeletion": {
                    "type": "boolean",
                    "description": "When set to true, Infisical will not remove secrets from Supabase. Enable this option if you intend to manage some secrets manually outside of Infisical.\n"
                },
                "initialSyncBehavior": {
                    "type": "string",
                    "description": "Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination\n"
                },
                "keySchema": {
                    "type": "string",
                    "description": "The format to use for structuring secret keys in the Supabase destination.\n"
                }
            },
            "type": "object",
            "required": [
                "initialSyncBehavior"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableSecretDeletion",
                        "initialSyncBehavior"
                    ]
                }
            }
        },
        "infisical:index/getGroupsGroup:getGroupsGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The organization ID of the group\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the group in the organization\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role ID of the group in the organization\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "orgId",
                "role",
                "roleId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "infisical:index/getIdentityDetailsOrganization:getIdentityDetailsOrganization": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the organization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the organization\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "infisical:index/getProjectsEnvironments:getProjectsEnvironments": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "infisical:index/getSecretFoldersFolder:getSecretFoldersFolder": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the folder\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the folder\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "infisical:index/getSecretsSecrets:getSecretsSecrets": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The secret comment\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "The secret type (shared or personal)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secret value\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "comment",
                "secretType",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the infisical package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "auth": {
                "$ref": "#/types/infisical:index/ProviderAuth:ProviderAuth",
                "description": "The configuration values for authentication"
            },
            "clientId": {
                "type": "string",
                "description": "(DEPRECATED, Use the `auth` attribute), Machine identity client ID. Used to fetch/modify secrets for a given project.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "(DEPRECATED, use `auth` attribute), Machine identity client secret. Used to fetch/modify secrets for a given project",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "Used to point the client to fetch secrets from your self hosted instance of Infisical. If not host is provided, https://app.infisical.com is the default host. This attribute can also be set using the `INFISICAL_HOST` environment variable"
            },
            "serviceToken": {
                "type": "string",
                "description": "(DEPRECATED, Use machine identity auth), Used to fetch/modify secrets for a given project",
                "secret": true
            }
        },
        "inputProperties": {
            "auth": {
                "$ref": "#/types/infisical:index/ProviderAuth:ProviderAuth",
                "description": "The configuration values for authentication"
            },
            "clientId": {
                "type": "string",
                "description": "(DEPRECATED, Use the `auth` attribute), Machine identity client ID. Used to fetch/modify secrets for a given project.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "(DEPRECATED, use `auth` attribute), Machine identity client secret. Used to fetch/modify secrets for a given project",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "Used to point the client to fetch secrets from your self hosted instance of Infisical. If not host is provided, https://app.infisical.com is the default host. This attribute can also be set using the `INFISICAL_HOST` environment variable"
            },
            "serviceToken": {
                "type": "string",
                "description": "(DEPRECATED, Use machine identity auth), Used to fetch/modify secrets for a given project",
                "secret": true
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:infisical/terraformConfig"
        }
    },
    "resources": {
        "infisical:index/accessApprovalPolicy:AccessApprovalPolicy": {
            "properties": {
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/AccessApprovalPolicyApprover:AccessApprovalPolicyApprover"
                    },
                    "description": "The required approvers"
                },
                "enforcementLevel": {
                    "type": "string",
                    "description": "The enforcement level of the policy. This can either be hard or soft"
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to"
                },
                "environmentSlugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments to apply the access approval policy to"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the access approval policy"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to add the access approval policy"
                },
                "requiredApprovals": {
                    "type": "integer",
                    "description": "The number of required approvers"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path to apply the access approval policy to"
                }
            },
            "required": [
                "approvers",
                "enforcementLevel",
                "name",
                "projectId",
                "requiredApprovals",
                "secretPath"
            ],
            "inputProperties": {
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/AccessApprovalPolicyApprover:AccessApprovalPolicyApprover"
                    },
                    "description": "The required approvers"
                },
                "enforcementLevel": {
                    "type": "string",
                    "description": "The enforcement level of the policy. This can either be hard or soft"
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to"
                },
                "environmentSlugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments to apply the access approval policy to"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the access approval policy"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to add the access approval policy"
                },
                "requiredApprovals": {
                    "type": "integer",
                    "description": "The number of required approvers"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path to apply the access approval policy to"
                }
            },
            "requiredInputs": [
                "approvers",
                "projectId",
                "requiredApprovals",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessApprovalPolicy resources.\n",
                "properties": {
                    "approvers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/AccessApprovalPolicyApprover:AccessApprovalPolicyApprover"
                        },
                        "description": "The required approvers"
                    },
                    "enforcementLevel": {
                        "type": "string",
                        "description": "The enforcement level of the policy. This can either be hard or soft"
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the access approval policy to"
                    },
                    "environmentSlugs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments to apply the access approval policy to"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the access approval policy"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to add the access approval policy"
                    },
                    "requiredApprovals": {
                        "type": "integer",
                        "description": "The number of required approvers"
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path to apply the access approval policy to"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnection1password:AppConnection1password": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnection1passwordCredentials:AppConnection1passwordCredentials",
                    "description": "The credentials for the 1Password App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the 1Password App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the 1Password App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with 1Password. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the 1Password App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnection1passwordCredentials:AppConnection1passwordCredentials",
                    "description": "The credentials for the 1Password App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the 1Password App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with 1Password. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the 1Password App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnection1password resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnection1passwordCredentials:AppConnection1passwordCredentials",
                        "description": "The credentials for the 1Password App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the 1Password App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the 1Password App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with 1Password. Possible values are: api-token"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the 1Password App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionAws:AppConnectionAws": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionAwsCredentials:AppConnectionAwsCredentials",
                    "description": "The credentials for the AWS App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the AWS App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with AWS. Possible values are: assume-role, access-key"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionAwsCredentials:AppConnectionAwsCredentials",
                    "description": "The credentials for the AWS App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with AWS. Possible values are: assume-role, access-key"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionAws resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionAwsCredentials:AppConnectionAwsCredentials",
                        "description": "The credentials for the AWS App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the AWS App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the AWS App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with AWS. Possible values are: assume-role, access-key"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the AWS App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionAzureClientSecrets:AppConnectionAzureClientSecrets": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionAzureClientSecretsCredentials:AppConnectionAzureClientSecretsCredentials",
                    "description": "The credentials for the Azure Client Secrets App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Azure Client Secrets App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure Client Secrets App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Azure Client Secrets. Possible values are: client-secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure Client Secrets App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionAzureClientSecretsCredentials:AppConnectionAzureClientSecretsCredentials",
                    "description": "The credentials for the Azure Client Secrets App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure Client Secrets App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Azure Client Secrets. Possible values are: client-secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure Client Secrets App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionAzureClientSecrets resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionAzureClientSecretsCredentials:AppConnectionAzureClientSecretsCredentials",
                        "description": "The credentials for the Azure Client Secrets App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Azure Client Secrets App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Azure Client Secrets App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Azure Client Secrets. Possible values are: client-secret"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Azure Client Secrets App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionBitbucket:AppConnectionBitbucket": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionBitbucketCredentials:AppConnectionBitbucketCredentials",
                    "description": "The credentials for the Bitbucket App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Bitbucket App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Bitbucket App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Bitbucket. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bitbucket App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionBitbucketCredentials:AppConnectionBitbucketCredentials",
                    "description": "The credentials for the Bitbucket App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Bitbucket App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Bitbucket. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bitbucket App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionBitbucket resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionBitbucketCredentials:AppConnectionBitbucketCredentials",
                        "description": "The credentials for the Bitbucket App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Bitbucket App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Bitbucket App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Bitbucket. Possible values are: api-token"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Bitbucket App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionCloudflare:AppConnectionCloudflare": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionCloudflareCredentials:AppConnectionCloudflareCredentials",
                    "description": "The credentials for the Cloudflare App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Cloudflare App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Cloudflare. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionCloudflareCredentials:AppConnectionCloudflareCredentials",
                    "description": "The credentials for the Cloudflare App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Cloudflare. Possible values are: api-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionCloudflare resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionCloudflareCredentials:AppConnectionCloudflareCredentials",
                        "description": "The credentials for the Cloudflare App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Cloudflare App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Cloudflare App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Cloudflare. Possible values are: api-token"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloudflare App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionDatabricks:AppConnectionDatabricks": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionDatabricksCredentials:AppConnectionDatabricksCredentials",
                    "description": "The credentials for the Databricks App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Databricks App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Databricks App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Databricks. Possible values are: service-principal"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Databricks App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionDatabricksCredentials:AppConnectionDatabricksCredentials",
                    "description": "The credentials for the Databricks App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Databricks App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Databricks. Possible values are: service-principal"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Databricks App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionDatabricks resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionDatabricksCredentials:AppConnectionDatabricksCredentials",
                        "description": "The credentials for the Databricks App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Databricks App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Databricks App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Databricks. Possible values are: service-principal"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Databricks App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionFlyio:AppConnectionFlyio": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionFlyioCredentials:AppConnectionFlyioCredentials",
                    "description": "The credentials for the Fly.io App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Fly.io App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Fly.io App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Fly.io. Possible values are: access-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Fly.io App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionFlyioCredentials:AppConnectionFlyioCredentials",
                    "description": "The credentials for the Fly.io App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Fly.io App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Fly.io. Possible values are: access-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Fly.io App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionFlyio resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionFlyioCredentials:AppConnectionFlyioCredentials",
                        "description": "The credentials for the Fly.io App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Fly.io App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Fly.io App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Fly.io. Possible values are: access-token"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Fly.io App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionGcp:AppConnectionGcp": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionGcpCredentials:AppConnectionGcpCredentials",
                    "description": "The credentials for the GCP App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the GCP App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the GCP App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with GCP. Possible values are: service-account-impersonation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GCP App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionGcpCredentials:AppConnectionGcpCredentials",
                    "description": "The credentials for the GCP App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the GCP App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with GCP. Possible values are: service-account-impersonation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GCP App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionGcp resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionGcpCredentials:AppConnectionGcpCredentials",
                        "description": "The credentials for the GCP App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the GCP App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the GCP App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with GCP. Possible values are: service-account-impersonation"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the GCP App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionLdap:AppConnectionLdap": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionLdapCredentials:AppConnectionLdapCredentials",
                    "description": "The credentials for the LDAP App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the LDAP App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the LDAP App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with LDAP. Possible values are: simple-bind"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LDAP App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionLdapCredentials:AppConnectionLdapCredentials",
                    "description": "The credentials for the LDAP App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the LDAP App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with LDAP. Possible values are: simple-bind"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LDAP App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionLdap resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionLdapCredentials:AppConnectionLdapCredentials",
                        "description": "The credentials for the LDAP App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the LDAP App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the LDAP App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with LDAP. Possible values are: simple-bind"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LDAP App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionMssql:AppConnectionMssql": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionMssqlCredentials:AppConnectionMssqlCredentials",
                    "description": "The credentials for the MsSQL App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the MsSQL App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the MsSQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with MsSQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MsSQL App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionMssqlCredentials:AppConnectionMssqlCredentials",
                    "description": "The credentials for the MsSQL App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the MsSQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with MsSQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MsSQL App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionMssql resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionMssqlCredentials:AppConnectionMssqlCredentials",
                        "description": "The credentials for the MsSQL App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the MsSQL App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the MsSQL App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with MsSQL. Possible values are: username-and-password"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MsSQL App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionMysql:AppConnectionMysql": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionMysqlCredentials:AppConnectionMysqlCredentials",
                    "description": "The credentials for the MySQL App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the MySQL App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the MySQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with MySQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MySQL App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionMysqlCredentials:AppConnectionMysqlCredentials",
                    "description": "The credentials for the MySQL App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the MySQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with MySQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MySQL App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionMysql resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionMysqlCredentials:AppConnectionMysqlCredentials",
                        "description": "The credentials for the MySQL App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the MySQL App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the MySQL App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with MySQL. Possible values are: username-and-password"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MySQL App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionOracledb:AppConnectionOracledb": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionOracledbCredentials:AppConnectionOracledbCredentials",
                    "description": "The credentials for the Oracle Database App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Oracle Database App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Oracle Database App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Oracle Database. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Oracle Database App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionOracledbCredentials:AppConnectionOracledbCredentials",
                    "description": "The credentials for the Oracle Database App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Oracle Database App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Oracle Database. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Oracle Database App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionOracledb resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionOracledbCredentials:AppConnectionOracledbCredentials",
                        "description": "The credentials for the Oracle Database App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Oracle Database App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Oracle Database App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Oracle Database. Possible values are: username-and-password"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Oracle Database App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionPostgres:AppConnectionPostgres": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionPostgresCredentials:AppConnectionPostgresCredentials",
                    "description": "The credentials for the PostgreSQL App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the PostgreSQL App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the PostgreSQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with PostgreSQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PostgreSQL App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionPostgresCredentials:AppConnectionPostgresCredentials",
                    "description": "The credentials for the PostgreSQL App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the PostgreSQL App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with PostgreSQL. Possible values are: username-and-password"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PostgreSQL App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionPostgres resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionPostgresCredentials:AppConnectionPostgresCredentials",
                        "description": "The credentials for the PostgreSQL App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the PostgreSQL App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the PostgreSQL App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with PostgreSQL. Possible values are: username-and-password"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PostgreSQL App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionRender:AppConnectionRender": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionRenderCredentials:AppConnectionRenderCredentials",
                    "description": "The credentials for the Render App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Render App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Render App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Render. Possible values are: api-key"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Render App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionRenderCredentials:AppConnectionRenderCredentials",
                    "description": "The credentials for the Render App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Render App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Render. Possible values are: api-key"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Render App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionRender resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionRenderCredentials:AppConnectionRenderCredentials",
                        "description": "The credentials for the Render App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Render App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Render App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Render. Possible values are: api-key"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Render App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/appConnectionSupabase:AppConnectionSupabase": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionSupabaseCredentials:AppConnectionSupabaseCredentials",
                    "description": "The credentials for the Supabase App Connection"
                },
                "credentialsHash": {
                    "type": "string",
                    "description": "The hash of the Supabase App Connection credentials"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Supabase App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Supabase. Possible values are: access-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Supabase App Connection to create. Must be slug-friendly"
                }
            },
            "required": [
                "credentials",
                "credentialsHash",
                "method",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/infisical:index/AppConnectionSupabaseCredentials:AppConnectionSupabaseCredentials",
                    "description": "The credentials for the Supabase App Connection"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Supabase App Connection."
                },
                "method": {
                    "type": "string",
                    "description": "The method used to authenticate with Supabase. Possible values are: access-token"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Supabase App Connection to create. Must be slug-friendly"
                }
            },
            "requiredInputs": [
                "credentials",
                "method"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppConnectionSupabase resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/infisical:index/AppConnectionSupabaseCredentials:AppConnectionSupabaseCredentials",
                        "description": "The credentials for the Supabase App Connection"
                    },
                    "credentialsHash": {
                        "type": "string",
                        "description": "The hash of the Supabase App Connection credentials"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Supabase App Connection."
                    },
                    "method": {
                        "type": "string",
                        "description": "The method used to authenticate with Supabase. Possible values are: access-token"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Supabase App Connection to create. Must be slug-friendly"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/dynamicSecretAwsIam:DynamicSecretAwsIam": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretAwsIamConfiguration:DynamicSecretAwsIamConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretAwsIamMetadata:DynamicSecretAwsIamMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "required": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "name",
                "path",
                "projectSlug"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretAwsIamConfiguration:DynamicSecretAwsIamConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretAwsIamMetadata:DynamicSecretAwsIamMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "requiredInputs": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "path",
                "projectSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicSecretAwsIam resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/infisical:index/DynamicSecretAwsIamConfiguration:DynamicSecretAwsIamConfiguration",
                        "description": "The configuration of the dynamic secret"
                    },
                    "defaultTtl": {
                        "type": "string",
                        "description": "The default TTL that will be applied for all the leases."
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "The slug of the environment to create the dynamic secret in."
                    },
                    "maxTtl": {
                        "type": "string",
                        "description": "The maximum limit a TTL can be leases or renewed."
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/DynamicSecretAwsIamMetadata:DynamicSecretAwsIamMetadata"
                        },
                        "description": "The metadata associated with this dynamic secret"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dynamic secret."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to create the dynamic secret in."
                    },
                    "projectSlug": {
                        "type": "string",
                        "description": "The slug of the project to create dynamic secret in."
                    },
                    "usernameTemplate": {
                        "type": "string",
                        "description": "The username template of the dynamic secret"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfiguration:DynamicSecretKubernetesConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretKubernetesMetadata:DynamicSecretKubernetesMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "required": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "name",
                "path",
                "projectSlug"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfiguration:DynamicSecretKubernetesConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretKubernetesMetadata:DynamicSecretKubernetesMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "requiredInputs": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "path",
                "projectSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicSecretKubernetes resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/infisical:index/DynamicSecretKubernetesConfiguration:DynamicSecretKubernetesConfiguration",
                        "description": "The configuration of the dynamic secret"
                    },
                    "defaultTtl": {
                        "type": "string",
                        "description": "The default TTL that will be applied for all the leases."
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "The slug of the environment to create the dynamic secret in."
                    },
                    "maxTtl": {
                        "type": "string",
                        "description": "The maximum limit a TTL can be leases or renewed."
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/DynamicSecretKubernetesMetadata:DynamicSecretKubernetesMetadata"
                        },
                        "description": "The metadata associated with this dynamic secret"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dynamic secret."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to create the dynamic secret in."
                    },
                    "projectSlug": {
                        "type": "string",
                        "description": "The slug of the project to create dynamic secret in."
                    },
                    "usernameTemplate": {
                        "type": "string",
                        "description": "The username template of the dynamic secret"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseConfiguration:DynamicSecretSqlDatabaseConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseMetadata:DynamicSecretSqlDatabaseMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "required": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "name",
                "path",
                "projectSlug"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseConfiguration:DynamicSecretSqlDatabaseConfiguration",
                    "description": "The configuration of the dynamic secret"
                },
                "defaultTtl": {
                    "type": "string",
                    "description": "The default TTL that will be applied for all the leases."
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The slug of the environment to create the dynamic secret in."
                },
                "maxTtl": {
                    "type": "string",
                    "description": "The maximum limit a TTL can be leases or renewed."
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseMetadata:DynamicSecretSqlDatabaseMetadata"
                    },
                    "description": "The metadata associated with this dynamic secret"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dynamic secret."
                },
                "path": {
                    "type": "string",
                    "description": "The path to create the dynamic secret in."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create dynamic secret in."
                },
                "usernameTemplate": {
                    "type": "string",
                    "description": "The username template of the dynamic secret"
                }
            },
            "requiredInputs": [
                "configuration",
                "defaultTtl",
                "environmentSlug",
                "path",
                "projectSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicSecretSqlDatabase resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseConfiguration:DynamicSecretSqlDatabaseConfiguration",
                        "description": "The configuration of the dynamic secret"
                    },
                    "defaultTtl": {
                        "type": "string",
                        "description": "The default TTL that will be applied for all the leases."
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "The slug of the environment to create the dynamic secret in."
                    },
                    "maxTtl": {
                        "type": "string",
                        "description": "The maximum limit a TTL can be leases or renewed."
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/DynamicSecretSqlDatabaseMetadata:DynamicSecretSqlDatabaseMetadata"
                        },
                        "description": "The metadata associated with this dynamic secret"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dynamic secret."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to create the dynamic secret in."
                    },
                    "projectSlug": {
                        "type": "string",
                        "description": "The slug of the project to create dynamic secret in."
                    },
                    "usernameTemplate": {
                        "type": "string",
                        "description": "The username template of the dynamic secret"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/group:Group": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the group."
                },
                "role": {
                    "type": "string",
                    "description": "The role of the group."
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the group."
                }
            },
            "required": [
                "name",
                "role",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the group."
                },
                "role": {
                    "type": "string",
                    "description": "The role of the group."
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the group."
                }
            },
            "requiredInputs": [
                "role",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the group."
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the group."
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the group."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identity:Identity": {
            "properties": {
                "authModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authentication types of the identity"
                },
                "hasDeleteProtection": {
                    "type": "boolean",
                    "description": "Whether the identity has delete protection, defaults to false"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityMetadata:IdentityMetadata"
                    },
                    "description": "The metadata associated with this identity"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the identity"
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization for the identity"
                },
                "role": {
                    "type": "string",
                    "description": "The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well."
                }
            },
            "required": [
                "authModes",
                "hasDeleteProtection",
                "name",
                "orgId",
                "role"
            ],
            "inputProperties": {
                "hasDeleteProtection": {
                    "type": "boolean",
                    "description": "Whether the identity has delete protection, defaults to false"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityMetadata:IdentityMetadata"
                    },
                    "description": "The metadata associated with this identity"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the identity"
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization for the identity"
                },
                "role": {
                    "type": "string",
                    "description": "The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well."
                }
            },
            "requiredInputs": [
                "orgId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Identity resources.\n",
                "properties": {
                    "authModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The authentication types of the identity"
                    },
                    "hasDeleteProtection": {
                        "type": "boolean",
                        "description": "Whether the identity has delete protection, defaults to false"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityMetadata:IdentityMetadata"
                        },
                        "description": "The metadata associated with this identity"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the identity"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The ID of the organization for the identity"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created custom roles, you can use their slugs as well."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityAwsAuth:IdentityAwsAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityAwsAuthAccessTokenTrustedIp:IdentityAwsAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted AWS account IDs that are allowed to authenticate with Infisical."
                },
                "allowedPrincipalArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "stsEndpoint": {
                    "type": "string",
                    "description": "The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html)."
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "allowedAccountIds",
                "allowedPrincipalArns",
                "identityId",
                "stsEndpoint"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityAwsAuthAccessTokenTrustedIp:IdentityAwsAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted AWS account IDs that are allowed to authenticate with Infisical."
                },
                "allowedPrincipalArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "stsEndpoint": {
                    "type": "string",
                    "description": "The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html)."
                }
            },
            "requiredInputs": [
                "identityId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityAwsAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityAwsAuthAccessTokenTrustedIp:IdentityAwsAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "allowedAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted AWS account IDs that are allowed to authenticate with Infisical."
                    },
                    "allowedPrincipalArns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to authenticate with Infisical under the identity"
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    },
                    "stsEndpoint": {
                        "type": "string",
                        "description": "The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g. `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints [here](https://docs.aws.amazon.com/general/latest/gr/sts.html)."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityAzureAuth:IdentityAzureAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityAzureAuthAccessTokenTrustedIp:IdentityAzureAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedServicePrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure AD service principal IDs that are allowed to authenticate with Infisical"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "resourceUrl": {
                    "type": "string",
                    "description": "The resource URL for the application registered in Azure AD. The value is expected to match the `aud` claim of the access token JWT later used in the login operation against Infisical. See the [resource](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http) parameter for how the audience is set when requesting a JWT access token from the Azure Instance Metadata Service (IMDS) endpoint. In most cases, this value should be `https://management.azure.com/` which is the default"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The [tenant ID](https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant) for the Azure AD organization."
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "allowedServicePrincipalIds",
                "identityId",
                "resourceUrl",
                "tenantId"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityAzureAuthAccessTokenTrustedIp:IdentityAzureAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedServicePrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Azure AD service principal IDs that are allowed to authenticate with Infisical"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "resourceUrl": {
                    "type": "string",
                    "description": "The resource URL for the application registered in Azure AD. The value is expected to match the `aud` claim of the access token JWT later used in the login operation against Infisical. See the [resource](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http) parameter for how the audience is set when requesting a JWT access token from the Azure Instance Metadata Service (IMDS) endpoint. In most cases, this value should be `https://management.azure.com/` which is the default"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The [tenant ID](https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant) for the Azure AD organization."
                }
            },
            "requiredInputs": [
                "identityId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityAzureAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityAzureAuthAccessTokenTrustedIp:IdentityAzureAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "allowedServicePrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Azure AD service principal IDs that are allowed to authenticate with Infisical"
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    },
                    "resourceUrl": {
                        "type": "string",
                        "description": "The resource URL for the application registered in Azure AD. The value is expected to match the `aud` claim of the access token JWT later used in the login operation against Infisical. See the [resource](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http) parameter for how the audience is set when requesting a JWT access token from the Azure Instance Metadata Service (IMDS) endpoint. In most cases, this value should be `https://management.azure.com/` which is the default"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The [tenant ID](https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant) for the Azure AD organization."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityGcpAuth:IdentityGcpAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityGcpAuthAccessTokenTrustedIp:IdentityGcpAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedProjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances"
                },
                "allowedServiceAccountEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc."
                },
                "allowedZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `\u003cregion\u003e-\u003czone\u003e`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "type": {
                    "type": "string",
                    "description": "The Type of GCP Auth Method to use: Options are gce, iam. Default:gce"
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "allowedProjects",
                "allowedServiceAccountEmails",
                "allowedZones",
                "identityId",
                "type"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityGcpAuthAccessTokenTrustedIp:IdentityGcpAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedProjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances"
                },
                "allowedServiceAccountEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc."
                },
                "allowedZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `\u003cregion\u003e-\u003czone\u003e`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "type": {
                    "type": "string",
                    "description": "The Type of GCP Auth Method to use: Options are gce, iam. Default:gce"
                }
            },
            "requiredInputs": [
                "identityId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityGcpAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityGcpAuthAccessTokenTrustedIp:IdentityGcpAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "allowedProjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted GCP projects that the GCE instance must belong to authenticate with Infisical. Note that this validation property will only work for GCE instances"
                    },
                    "allowedServiceAccountEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical; this could be something like `test@project.iam.gserviceaccount.com`, `12345-compute@developer.gserviceaccount.com`, etc."
                    },
                    "allowedZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted zones that the GCE instances must belong to authenticate with Infisical; this should be the fully-qualified zone name in the format `\u003cregion\u003e-\u003czone\u003e`like `us-central1-a`, `us-west1-b`, etc. Note that this validation property will only work for GCE instances."
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    },
                    "type": {
                        "type": "string",
                        "description": "The Type of GCP Auth Method to use: Options are gce, iam. Default:gce"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityKubernetesAuth:IdentityKubernetesAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityKubernetesAuthAccessTokenTrustedIp:IdentityKubernetesAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedAudience": {
                    "type": "string",
                    "description": "An optional audience claim that the service account JWT token must have to authenticate with Infisical."
                },
                "allowedNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted namespaces that service accounts must belong to authenticate with Infisical."
                },
                "allowedServiceAccountNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted service account names that are allowed to authenticate with Infisical."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "kubernetesCaCertificate": {
                    "type": "string",
                    "description": "The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server."
                },
                "kubernetesHost": {
                    "type": "string",
                    "description": "The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`."
                },
                "tokenReviewerJwt": {
                    "type": "string",
                    "description": "A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5."
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "allowedAudience",
                "allowedNamespaces",
                "allowedServiceAccountNames",
                "identityId",
                "kubernetesCaCertificate",
                "kubernetesHost",
                "tokenReviewerJwt"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityKubernetesAuthAccessTokenTrustedIp:IdentityKubernetesAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "allowedAudience": {
                    "type": "string",
                    "description": "An optional audience claim that the service account JWT token must have to authenticate with Infisical."
                },
                "allowedNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted namespaces that service accounts must belong to authenticate with Infisical."
                },
                "allowedServiceAccountNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted service account names that are allowed to authenticate with Infisical."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "kubernetesCaCertificate": {
                    "type": "string",
                    "description": "The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server."
                },
                "kubernetesHost": {
                    "type": "string",
                    "description": "The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`."
                },
                "tokenReviewerJwt": {
                    "type": "string",
                    "description": "A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5."
                }
            },
            "requiredInputs": [
                "identityId",
                "kubernetesHost",
                "tokenReviewerJwt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityKubernetesAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityKubernetesAuthAccessTokenTrustedIp:IdentityKubernetesAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "allowedAudience": {
                        "type": "string",
                        "description": "An optional audience claim that the service account JWT token must have to authenticate with Infisical."
                    },
                    "allowedNamespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted namespaces that service accounts must belong to authenticate with Infisical."
                    },
                    "allowedServiceAccountNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trusted service account names that are allowed to authenticate with Infisical."
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    },
                    "kubernetesCaCertificate": {
                        "type": "string",
                        "description": "The PEM-encoded CA cert for the Kubernetes API server. This is used by the TLS client for secure communication with the Kubernetes API server."
                    },
                    "kubernetesHost": {
                        "type": "string",
                        "description": "The host string, host:port pair, or URL to the base of the Kubernetes API server. This can usually be obtained by running `kubectl cluster-info`."
                    },
                    "tokenReviewerJwt": {
                        "type": "string",
                        "description": "A long-lived service account JWT token for Infisical to access the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) to validate other service account JWT tokens submitted by applications/pods. This is the JWT token obtained from step 1.5."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityOidcAuth:IdentityOidcAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityOidcAuthAccessTokenTrustedIp:IdentityOidcAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "boundAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The comma-separated list of intended recipients."
                },
                "boundClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern."
                },
                "boundIssuer": {
                    "type": "string",
                    "description": "The unique identifier of the identity provider issuing the OIDC tokens."
                },
                "boundSubject": {
                    "type": "string",
                    "description": "The expected principal that is the subject of the JWT."
                },
                "claimMetadataMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map OIDC token claims to metadata fields. Example: {\"role\": \"token.groups\"}, this would become identity.metadata.oidc.claims.role"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "oidcCaCertificate": {
                    "type": "string",
                    "description": "The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints"
                },
                "oidcDiscoveryUrl": {
                    "type": "string",
                    "description": "The URL used to retrieve the OpenID Connect configuration from the identity provider."
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "boundAudiences",
                "boundClaims",
                "boundIssuer",
                "boundSubject",
                "claimMetadataMapping",
                "identityId",
                "oidcCaCertificate",
                "oidcDiscoveryUrl"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityOidcAuthAccessTokenTrustedIp:IdentityOidcAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "boundAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The comma-separated list of intended recipients."
                },
                "boundClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern."
                },
                "boundIssuer": {
                    "type": "string",
                    "description": "The unique identifier of the identity provider issuing the OIDC tokens."
                },
                "boundSubject": {
                    "type": "string",
                    "description": "The expected principal that is the subject of the JWT."
                },
                "claimMetadataMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map OIDC token claims to metadata fields. Example: {\"role\": \"token.groups\"}, this would become identity.metadata.oidc.claims.role"
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                },
                "oidcCaCertificate": {
                    "type": "string",
                    "description": "The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints"
                },
                "oidcDiscoveryUrl": {
                    "type": "string",
                    "description": "The URL used to retrieve the OpenID Connect configuration from the identity provider."
                }
            },
            "requiredInputs": [
                "boundIssuer",
                "identityId",
                "oidcDiscoveryUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityOidcAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityOidcAuthAccessTokenTrustedIp:IdentityOidcAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address..."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "boundAudiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The comma-separated list of intended recipients."
                    },
                    "boundClaims": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The attributes that should be present in the JWT for it to be valid. The provided values can be a glob pattern."
                    },
                    "boundIssuer": {
                        "type": "string",
                        "description": "The unique identifier of the identity provider issuing the OIDC tokens."
                    },
                    "boundSubject": {
                        "type": "string",
                        "description": "The expected principal that is the subject of the JWT."
                    },
                    "claimMetadataMapping": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map OIDC token claims to metadata fields. Example: {\"role\": \"token.groups\"}, this would become identity.metadata.oidc.claims.role"
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    },
                    "oidcCaCertificate": {
                        "type": "string",
                        "description": "The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints"
                    },
                    "oidcDiscoveryUrl": {
                        "type": "string",
                        "description": "The URL used to retrieve the OpenID Connect configuration from the identity provider."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityUniversalAuth:IdentityUniversalAuth": {
            "properties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityUniversalAuthAccessTokenTrustedIp:IdentityUniversalAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "clientSecretTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityUniversalAuthClientSecretTrustedIp:IdentityUniversalAuthClientSecretTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                }
            },
            "required": [
                "accessTokenMaxTtl",
                "accessTokenNumUsesLimit",
                "accessTokenTrustedIps",
                "accessTokenTtl",
                "clientSecretTrustedIps",
                "identityId"
            ],
            "inputProperties": {
                "accessTokenMaxTtl": {
                    "type": "integer",
                    "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "accessTokenNumUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                },
                "accessTokenTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityUniversalAuthAccessTokenTrustedIp:IdentityUniversalAuthAccessTokenTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                },
                "accessTokenTtl": {
                    "type": "integer",
                    "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                },
                "clientSecretTrustedIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/IdentityUniversalAuthClientSecretTrustedIp:IdentityUniversalAuthClientSecretTrustedIp"
                    },
                    "description": "A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to attach the configuration onto."
                }
            },
            "requiredInputs": [
                "identityId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityUniversalAuth resources.\n",
                "properties": {
                    "accessTokenMaxTtl": {
                        "type": "integer",
                        "description": "The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "accessTokenNumUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0"
                    },
                    "accessTokenTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityUniversalAuthAccessTokenTrustedIp:IdentityUniversalAuthAccessTokenTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.."
                    },
                    "accessTokenTtl": {
                        "type": "integer",
                        "description": "The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000"
                    },
                    "clientSecretTrustedIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/IdentityUniversalAuthClientSecretTrustedIp:IdentityUniversalAuthClientSecretTrustedIp"
                        },
                        "description": "A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address."
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to attach the configuration onto."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the secret."
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret.",
                    "secret": true
                },
                "createdAt": {
                    "type": "string",
                    "description": "The UTC timestamp of the created at."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the client secret."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to create a client secret for"
                },
                "isRevoked": {
                    "type": "boolean",
                    "description": "A flag indicating token has been revoked"
                },
                "numberOfUses": {
                    "type": "integer",
                    "description": "The number of times that the client secret is used"
                },
                "numberOfUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The lifetime for the client secret in seconds. Default: 0 - not expiring"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "createdAt",
                "identityId",
                "isRevoked",
                "numberOfUses",
                "numberOfUsesLimit",
                "ttl"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the client secret."
                },
                "identityId": {
                    "type": "string",
                    "description": "The ID of the identity to create a client secret for"
                },
                "numberOfUsesLimit": {
                    "type": "integer",
                    "description": "The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The lifetime for the client secret in seconds. Default: 0 - not expiring"
                }
            },
            "requiredInputs": [
                "identityId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityUniversalAuthClientSecret resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the secret."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret.",
                        "secret": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The UTC timestamp of the created at."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the client secret."
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The ID of the identity to create a client secret for"
                    },
                    "isRevoked": {
                        "type": "boolean",
                        "description": "A flag indicating token has been revoked"
                    },
                    "numberOfUses": {
                        "type": "integer",
                        "description": "The number of times that the client secret is used"
                    },
                    "numberOfUsesLimit": {
                        "type": "integer",
                        "description": "The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The lifetime for the client secret in seconds. Default: 0 - not expiring"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc)."
                },
                "integrationAuthId": {
                    "type": "string",
                    "description": "The ID of the integration auth, used internally by Infisical."
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration, used internally by Infisical."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationAwsParameterStoreOptions:IntegrationAwsParameterStoreOptions",
                    "description": "Integration options"
                },
                "parameterStorePath": {
                    "type": "string",
                    "description": "The path in AWS Parameter Store to sync secrets to."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "required": [
                "awsRegion",
                "environment",
                "integrationAuthId",
                "integrationId",
                "options",
                "parameterStorePath",
                "projectId",
                "secretPath"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc)."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationAwsParameterStoreOptions:IntegrationAwsParameterStoreOptions",
                    "description": "Integration options"
                },
                "parameterStorePath": {
                    "type": "string",
                    "description": "The path in AWS Parameter Store to sync secrets to."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "requiredInputs": [
                "awsRegion",
                "environment",
                "parameterStorePath",
                "projectId",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationAwsParameterStore resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                        "secret": true
                    },
                    "assumeRoleArn": {
                        "type": "string",
                        "description": "The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc)."
                    },
                    "integrationAuthId": {
                        "type": "string",
                        "description": "The ID of the integration auth, used internally by Infisical."
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration, used internally by Infisical."
                    },
                    "options": {
                        "$ref": "#/types/infisical:index/IntegrationAwsParameterStoreOptions:IntegrationAwsParameterStoreOptions",
                        "description": "Integration options"
                    },
                    "parameterStorePath": {
                        "type": "string",
                        "description": "The path in AWS Parameter Store to sync secrets to."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of your Infisical project."
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                        "secret": true
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path in Infisical to sync secrets from."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc)."
                },
                "integrationAuthId": {
                    "type": "string",
                    "description": "The ID of the integration auth, used internally by Infisical."
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration, used internally by Infisical."
                },
                "mappingBehavior": {
                    "type": "string",
                    "description": "The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationAwsSecretsManagerOptions:IntegrationAwsSecretsManagerOptions",
                    "description": "Integration options"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                },
                "secretsManagerPath": {
                    "type": "string",
                    "description": "The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'."
                }
            },
            "required": [
                "awsRegion",
                "environment",
                "integrationAuthId",
                "integrationId",
                "mappingBehavior",
                "options",
                "projectId",
                "secretPath"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc)."
                },
                "mappingBehavior": {
                    "type": "string",
                    "description": "The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationAwsSecretsManagerOptions:IntegrationAwsSecretsManagerOptions",
                    "description": "Integration options"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                    "secret": true
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                },
                "secretsManagerPath": {
                    "type": "string",
                    "description": "The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'."
                }
            },
            "requiredInputs": [
                "awsRegion",
                "environment",
                "projectId",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationAwsSecretsManager resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The AWS access key ID. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                        "secret": true
                    },
                    "assumeRoleArn": {
                        "type": "string",
                        "description": "The ARN of the role to assume when syncing secrets to AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role."
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region to sync secrets to. (us-east-1, us-east-2, etc)"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the environment to sync to AWS Secrets Manager (prod, dev, staging, etc)."
                    },
                    "integrationAuthId": {
                        "type": "string",
                        "description": "The ID of the integration auth, used internally by Infisical."
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration, used internally by Infisical."
                    },
                    "mappingBehavior": {
                        "type": "string",
                        "description": "The behavior of the mapping. Can be 'many-to-one' or 'one-to-one'. Many to One: All Infisical secrets will be mapped to a single AWS secret. One to One: Each Infisical secret will be mapped to its own AWS secret."
                    },
                    "options": {
                        "$ref": "#/types/infisical:index/IntegrationAwsSecretsManagerOptions:IntegrationAwsSecretsManagerOptions",
                        "description": "Integration options"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of your Infisical project."
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The AWS secret access key. Used to authenticate with AWS Secrets Manager. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.",
                        "secret": true
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path in Infisical to sync secrets from."
                    },
                    "secretsManagerPath": {
                        "type": "string",
                        "description": "The path in AWS Secrets Manager to sync secrets to. This is required if mapping_behavior is 'many-to-one'."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/integrationCircleci:IntegrationCircleci": {
            "properties": {
                "circleciOrgSlug": {
                    "type": "string",
                    "description": "The organization slug of your CircleCI organization."
                },
                "circleciProjectId": {
                    "type": "string",
                    "description": "The project ID of your CircleCI project."
                },
                "circleciToken": {
                    "type": "string",
                    "description": "Your personal CircleCI token to authenticate with.",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to CircleCI (prod, dev, staging, etc)."
                },
                "integrationAuthId": {
                    "type": "string",
                    "description": "The ID of the integration auth, used internally by Infisical."
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration, used internally by Infisical."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "required": [
                "circleciOrgSlug",
                "circleciProjectId",
                "circleciToken",
                "environment",
                "integrationAuthId",
                "integrationId",
                "projectId",
                "secretPath"
            ],
            "inputProperties": {
                "circleciOrgSlug": {
                    "type": "string",
                    "description": "The organization slug of your CircleCI organization."
                },
                "circleciProjectId": {
                    "type": "string",
                    "description": "The project ID of your CircleCI project."
                },
                "circleciToken": {
                    "type": "string",
                    "description": "Your personal CircleCI token to authenticate with.",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to CircleCI (prod, dev, staging, etc)."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "requiredInputs": [
                "circleciOrgSlug",
                "circleciProjectId",
                "circleciToken",
                "environment",
                "projectId",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationCircleci resources.\n",
                "properties": {
                    "circleciOrgSlug": {
                        "type": "string",
                        "description": "The organization slug of your CircleCI organization."
                    },
                    "circleciProjectId": {
                        "type": "string",
                        "description": "The project ID of your CircleCI project."
                    },
                    "circleciToken": {
                        "type": "string",
                        "description": "Your personal CircleCI token to authenticate with.",
                        "secret": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the environment to sync to CircleCI (prod, dev, staging, etc)."
                    },
                    "integrationAuthId": {
                        "type": "string",
                        "description": "The ID of the integration auth, used internally by Infisical."
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration, used internally by Infisical."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of your Infisical project."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path in Infisical to sync secrets from."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/integrationDatabricks:IntegrationDatabricks": {
            "properties": {
                "databricksHost": {
                    "type": "string",
                    "description": "The Databricks host URL."
                },
                "databricksSecretScope": {
                    "type": "string",
                    "description": "The Databricks secret scope. Example: your-secret-scope"
                },
                "databricksToken": {
                    "type": "string",
                    "description": "The Databricks access token.",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to Databricks (prod, dev, staging, etc)."
                },
                "integrationAuthId": {
                    "type": "string",
                    "description": "The ID of the integration auth, used internally by Infisical."
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration, used internally by Infisical."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "required": [
                "databricksHost",
                "databricksSecretScope",
                "databricksToken",
                "environment",
                "integrationAuthId",
                "integrationId",
                "projectId",
                "secretPath"
            ],
            "inputProperties": {
                "databricksHost": {
                    "type": "string",
                    "description": "The Databricks host URL."
                },
                "databricksSecretScope": {
                    "type": "string",
                    "description": "The Databricks secret scope. Example: your-secret-scope"
                },
                "databricksToken": {
                    "type": "string",
                    "description": "The Databricks access token.",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to Databricks (prod, dev, staging, etc)."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                }
            },
            "requiredInputs": [
                "databricksHost",
                "databricksSecretScope",
                "databricksToken",
                "environment",
                "projectId",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationDatabricks resources.\n",
                "properties": {
                    "databricksHost": {
                        "type": "string",
                        "description": "The Databricks host URL."
                    },
                    "databricksSecretScope": {
                        "type": "string",
                        "description": "The Databricks secret scope. Example: your-secret-scope"
                    },
                    "databricksToken": {
                        "type": "string",
                        "description": "The Databricks access token.",
                        "secret": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the environment to sync to Databricks (prod, dev, staging, etc)."
                    },
                    "integrationAuthId": {
                        "type": "string",
                        "description": "The ID of the integration auth, used internally by Infisical."
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration, used internally by Infisical."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of your Infisical project."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path in Infisical to sync secrets from."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc)."
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "The ID of the GCP project."
                },
                "integrationAuthId": {
                    "type": "string",
                    "description": "The ID of the integration auth, used internally by Infisical."
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration, used internally by Infisical."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationGcpSecretManagerOptions:IntegrationGcpSecretManagerOptions",
                    "description": "Integration options"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                },
                "serviceAccountJson": {
                    "type": "string",
                    "description": "Service account json for the GCP project.",
                    "secret": true
                }
            },
            "required": [
                "environment",
                "gcpProjectId",
                "integrationAuthId",
                "integrationId",
                "options",
                "projectId",
                "secretPath",
                "serviceAccountJson"
            ],
            "inputProperties": {
                "environment": {
                    "type": "string",
                    "description": "The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc)."
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "The ID of the GCP project."
                },
                "options": {
                    "$ref": "#/types/infisical:index/IntegrationGcpSecretManagerOptions:IntegrationGcpSecretManagerOptions",
                    "description": "Integration options"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Infisical project."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path in Infisical to sync secrets from."
                },
                "serviceAccountJson": {
                    "type": "string",
                    "description": "Service account json for the GCP project.",
                    "secret": true
                }
            },
            "requiredInputs": [
                "environment",
                "gcpProjectId",
                "projectId",
                "secretPath",
                "serviceAccountJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationGcpSecretManager resources.\n",
                "properties": {
                    "environment": {
                        "type": "string",
                        "description": "The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc)."
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "The ID of the GCP project."
                    },
                    "integrationAuthId": {
                        "type": "string",
                        "description": "The ID of the integration auth, used internally by Infisical."
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration, used internally by Infisical."
                    },
                    "options": {
                        "$ref": "#/types/infisical:index/IntegrationGcpSecretManagerOptions:IntegrationGcpSecretManagerOptions",
                        "description": "Integration options"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of your Infisical project."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path in Infisical to sync secrets from."
                    },
                    "serviceAccountJson": {
                        "type": "string",
                        "description": "Service account json for the GCP project.",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/project:Project": {
            "properties": {
                "auditLogRetentionDays": {
                    "type": "integer",
                    "description": "The audit log retention in days"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the project"
                },
                "hasDeleteProtection": {
                    "type": "boolean",
                    "description": "Whether the project has delete protection, defaults to false"
                },
                "kmsSecretManagerKeyId": {
                    "type": "string",
                    "description": "The ID of the KMS secret manager key to use for the project"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project"
                },
                "shouldCreateDefaultEnvs": {
                    "type": "boolean",
                    "description": "Whether to create default environments for the project (dev, staging, prod), defaults to true"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the project"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the template to use for the project"
                }
            },
            "required": [
                "auditLogRetentionDays",
                "hasDeleteProtection",
                "kmsSecretManagerKeyId",
                "lastUpdated",
                "name",
                "slug"
            ],
            "inputProperties": {
                "auditLogRetentionDays": {
                    "type": "integer",
                    "description": "The audit log retention in days"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the project"
                },
                "hasDeleteProtection": {
                    "type": "boolean",
                    "description": "Whether the project has delete protection, defaults to false"
                },
                "kmsSecretManagerKeyId": {
                    "type": "string",
                    "description": "The ID of the KMS secret manager key to use for the project"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project"
                },
                "shouldCreateDefaultEnvs": {
                    "type": "boolean",
                    "description": "Whether to create default environments for the project (dev, staging, prod), defaults to true"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the project"
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the template to use for the project"
                }
            },
            "requiredInputs": [
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "auditLogRetentionDays": {
                        "type": "integer",
                        "description": "The audit log retention in days"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the project"
                    },
                    "hasDeleteProtection": {
                        "type": "boolean",
                        "description": "Whether the project has delete protection, defaults to false"
                    },
                    "kmsSecretManagerKeyId": {
                        "type": "string",
                        "description": "The ID of the KMS secret manager key to use for the project"
                    },
                    "lastUpdated": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project"
                    },
                    "shouldCreateDefaultEnvs": {
                        "type": "boolean",
                        "description": "Whether to create default environments for the project (dev, staging, prod), defaults to true"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the project"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "The name of the template to use for the project"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectEnvironment:ProjectEnvironment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the environment"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the environment"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment"
                }
            },
            "required": [
                "name",
                "position",
                "projectId",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the environment"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the environment"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment"
                }
            },
            "requiredInputs": [
                "projectId",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the environment"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the environment"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the environment"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectGroup:ProjectGroup": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The id of the group."
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the group."
                },
                "membershipId": {
                    "type": "string",
                    "description": "The membership Id of the project group"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectGroupRole:ProjectGroupRole"
                    },
                    "description": "The roles assigned to the project group"
                }
            },
            "required": [
                "groupId",
                "membershipId",
                "projectId",
                "roles"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The id of the group."
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the group."
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectGroupRole:ProjectGroupRole"
                    },
                    "description": "The roles assigned to the project group"
                }
            },
            "requiredInputs": [
                "projectId",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The id of the group."
                    },
                    "groupName": {
                        "type": "string",
                        "description": "The name of the group."
                    },
                    "membershipId": {
                        "type": "string",
                        "description": "The membership Id of the project group"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project."
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectGroupRole:ProjectGroupRole"
                        },
                        "description": "The roles assigned to the project group"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectIdentity:ProjectIdentity": {
            "properties": {
                "identity": {
                    "$ref": "#/types/infisical:index/ProjectIdentityIdentity:ProjectIdentityIdentity",
                    "description": "The identity details of the project identity"
                },
                "identityId": {
                    "type": "string",
                    "description": "The id of the identity."
                },
                "membershipId": {
                    "type": "string",
                    "description": "The membership Id of the project identity"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectIdentityRole:ProjectIdentityRole"
                    },
                    "description": "The roles assigned to the project identity"
                }
            },
            "required": [
                "identity",
                "identityId",
                "membershipId",
                "projectId",
                "roles"
            ],
            "inputProperties": {
                "identityId": {
                    "type": "string",
                    "description": "The id of the identity."
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectIdentityRole:ProjectIdentityRole"
                    },
                    "description": "The roles assigned to the project identity"
                }
            },
            "requiredInputs": [
                "identityId",
                "projectId",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectIdentity resources.\n",
                "properties": {
                    "identity": {
                        "$ref": "#/types/infisical:index/ProjectIdentityIdentity:ProjectIdentityIdentity",
                        "description": "The identity details of the project identity"
                    },
                    "identityId": {
                        "type": "string",
                        "description": "The id of the identity."
                    },
                    "membershipId": {
                        "type": "string",
                        "description": "The membership Id of the project identity"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectIdentityRole:ProjectIdentityRole"
                        },
                        "description": "The roles assigned to the project identity"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege": {
            "properties": {
                "identityId": {
                    "type": "string",
                    "description": "The identity id to create identity specific privilege"
                },
                "isTemporary": {
                    "type": "boolean",
                    "description": "Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required."
                },
                "permission": {
                    "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermission:ProjectIdentitySpecificPrivilegePermission",
                    "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege"
                },
                "permissionsV2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermissionsV2:ProjectIdentitySpecificPrivilegePermissionsV2"
                    },
                    "description": "The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create identity specific privilege"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new privilege"
                },
                "temporaryAccessEndTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time"
                },
                "temporaryAccessStartTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access should begin. The current time is used by default."
                },
                "temporaryMode": {
                    "type": "string",
                    "description": "Type of temporary access given. Types: relative. Default: relative"
                },
                "temporaryRange": {
                    "type": "string",
                    "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h"
                }
            },
            "required": [
                "identityId",
                "isTemporary",
                "projectSlug",
                "slug",
                "temporaryAccessEndTime",
                "temporaryAccessStartTime",
                "temporaryMode",
                "temporaryRange"
            ],
            "inputProperties": {
                "identityId": {
                    "type": "string",
                    "description": "The identity id to create identity specific privilege"
                },
                "isTemporary": {
                    "type": "boolean",
                    "description": "Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required."
                },
                "permission": {
                    "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermission:ProjectIdentitySpecificPrivilegePermission",
                    "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege"
                },
                "permissionsV2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermissionsV2:ProjectIdentitySpecificPrivilegePermissionsV2"
                    },
                    "description": "The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create identity specific privilege"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new privilege"
                },
                "temporaryAccessEndTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time"
                },
                "temporaryAccessStartTime": {
                    "type": "string",
                    "description": "ISO time for which temporary access should begin. The current time is used by default."
                },
                "temporaryMode": {
                    "type": "string",
                    "description": "Type of temporary access given. Types: relative. Default: relative"
                },
                "temporaryRange": {
                    "type": "string",
                    "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h"
                }
            },
            "requiredInputs": [
                "identityId",
                "projectSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectIdentitySpecificPrivilege resources.\n",
                "properties": {
                    "identityId": {
                        "type": "string",
                        "description": "The identity id to create identity specific privilege"
                    },
                    "isTemporary": {
                        "type": "boolean",
                        "description": "Flag to indicate the assigned specific privilege is temporary or not. When is_temporary is true fields temporary_mode, temporary_range and temporary_access_start_time is required."
                    },
                    "permission": {
                        "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermission:ProjectIdentitySpecificPrivilegePermission",
                        "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project identity specific privilege"
                    },
                    "permissionsV2s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectIdentitySpecificPrivilegePermissionsV2:ProjectIdentitySpecificPrivilegePermissionsV2"
                        },
                        "description": "The permissions assigned to the project identity specific privilege. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                    },
                    "projectSlug": {
                        "type": "string",
                        "description": "The slug of the project to create identity specific privilege"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug for the new privilege"
                    },
                    "temporaryAccessEndTime": {
                        "type": "string",
                        "description": "ISO time for which temporary access will end. Computed based on temporary_range and temporary_access_start_time"
                    },
                    "temporaryAccessStartTime": {
                        "type": "string",
                        "description": "ISO time for which temporary access should begin. The current time is used by default."
                    },
                    "temporaryMode": {
                        "type": "string",
                        "description": "Type of temporary access given. Types: relative. Default: relative"
                    },
                    "temporaryRange": {
                        "type": "string",
                        "description": "TTL for the temporary time. Eg: 1m, 1h, 1d. Default: 1h"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectRole:ProjectRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description for the new role. Defaults to an empty string."
                },
                "name": {
                    "type": "string",
                    "description": "The name for the new role"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectRolePermission:ProjectRolePermission"
                    },
                    "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role"
                },
                "permissionsV2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectRolePermissionsV2:ProjectRolePermissionsV2"
                    },
                    "description": "The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create role"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new role"
                }
            },
            "required": [
                "description",
                "name",
                "projectSlug",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for the new role. Defaults to an empty string."
                },
                "name": {
                    "type": "string",
                    "description": "The name for the new role"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectRolePermission:ProjectRolePermission"
                    },
                    "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role"
                },
                "permissionsV2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectRolePermissionsV2:ProjectRolePermissionsV2"
                    },
                    "description": "The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                },
                "projectSlug": {
                    "type": "string",
                    "description": "The slug of the project to create role"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new role"
                }
            },
            "requiredInputs": [
                "projectSlug",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for the new role. Defaults to an empty string."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the new role"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectRolePermission:ProjectRolePermission"
                        },
                        "description": "(DEPRECATED, USE permissions_v2. Refer to the migration guide in https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned to the project role"
                    },
                    "permissionsV2s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectRolePermissionsV2:ProjectRolePermissionsV2"
                        },
                        "description": "The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage."
                    },
                    "projectSlug": {
                        "type": "string",
                        "description": "The slug of the project to create role"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug for the new role"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectTemplate:ProjectTemplate": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the project template"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectTemplateEnvironment:ProjectTemplateEnvironment"
                    },
                    "description": "The environments for the project template"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project template"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectTemplateRole:ProjectTemplateRole"
                    },
                    "description": "The roles for the project template"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options"
                }
            },
            "required": [
                "name",
                "roles",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the project template"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectTemplateEnvironment:ProjectTemplateEnvironment"
                    },
                    "description": "The environments for the project template"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project template"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectTemplateRole:ProjectTemplateRole"
                    },
                    "description": "The roles for the project template"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectTemplate resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the project template"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectTemplateEnvironment:ProjectTemplateEnvironment"
                        },
                        "description": "The environments for the project template"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project template"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectTemplateRole:ProjectTemplateRole"
                        },
                        "description": "The roles for the project template"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the project template. Refer to the documentation here https://infisical.com/docs/api-reference/endpoints/project-templates/create#body-type for the available options"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/projectUser:ProjectUser": {
            "properties": {
                "membershipId": {
                    "type": "string",
                    "description": "The membershipId of the project user"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectUserRole:ProjectUserRole"
                    },
                    "description": "The roles assigned to the project user"
                },
                "user": {
                    "$ref": "#/types/infisical:index/ProjectUserUser:ProjectUserUser",
                    "description": "The user details of the project user"
                },
                "username": {
                    "type": "string",
                    "description": "The usename of the user. By default its the email"
                }
            },
            "required": [
                "membershipId",
                "projectId",
                "roles",
                "user",
                "username"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The id of the project"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/ProjectUserRole:ProjectUserRole"
                    },
                    "description": "The roles assigned to the project user"
                },
                "username": {
                    "type": "string",
                    "description": "The usename of the user. By default its the email"
                }
            },
            "requiredInputs": [
                "projectId",
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectUser resources.\n",
                "properties": {
                    "membershipId": {
                        "type": "string",
                        "description": "The membershipId of the project user"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/ProjectUserRole:ProjectUserRole"
                        },
                        "description": "The roles assigned to the project user"
                    },
                    "user": {
                        "$ref": "#/types/infisical:index/ProjectUserUser:ProjectUserUser",
                        "description": "The user details of the project user"
                    },
                    "username": {
                        "type": "string",
                        "description": "The usename of the user. By default its the email"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secret:Secret": {
            "properties": {
                "envSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to the folder where the given secret resides"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret"
                },
                "secretReminder": {
                    "$ref": "#/types/infisical:index/SecretSecretReminder:SecretSecretReminder"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag ids to be attached for the secrets."
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret",
                    "secret": true
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                }
            },
            "required": [
                "envSlug",
                "folderPath",
                "lastUpdated",
                "name",
                "value",
                "workspaceId"
            ],
            "inputProperties": {
                "envSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to the folder where the given secret resides"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret"
                },
                "secretReminder": {
                    "$ref": "#/types/infisical:index/SecretSecretReminder:SecretSecretReminder"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag ids to be attached for the secrets."
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret",
                    "secret": true
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                }
            },
            "requiredInputs": [
                "envSlug",
                "folderPath",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "envSlug": {
                        "type": "string",
                        "description": "The environment slug of the secret to modify/create"
                    },
                    "folderPath": {
                        "type": "string",
                        "description": "The path to the folder where the given secret resides"
                    },
                    "lastUpdated": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret"
                    },
                    "secretReminder": {
                        "$ref": "#/types/infisical:index/SecretSecretReminder:SecretSecretReminder"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tag ids to be attached for the secrets."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the secret",
                        "secret": true
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretApprovalPolicy:SecretApprovalPolicy": {
            "properties": {
                "allowSelfApproval": {
                    "type": "boolean",
                    "description": "Whether to allow the  approvers to approve their own changes"
                },
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/SecretApprovalPolicyApprover:SecretApprovalPolicyApprover"
                    },
                    "description": "The required approvers"
                },
                "enforcementLevel": {
                    "type": "string",
                    "description": "The enforcement level of the policy. This can either be hard or soft"
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the secret approval policy to"
                },
                "environmentSlugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments to apply the secret approval policy to"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret approval policy"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to add the secret approval policy"
                },
                "requiredApprovals": {
                    "type": "integer",
                    "description": "The number of required approvers"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path to apply the secret approval policy to"
                }
            },
            "required": [
                "allowSelfApproval",
                "approvers",
                "enforcementLevel",
                "name",
                "projectId",
                "requiredApprovals",
                "secretPath"
            ],
            "inputProperties": {
                "allowSelfApproval": {
                    "type": "boolean",
                    "description": "Whether to allow the  approvers to approve their own changes"
                },
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/infisical:index/SecretApprovalPolicyApprover:SecretApprovalPolicyApprover"
                    },
                    "description": "The required approvers"
                },
                "enforcementLevel": {
                    "type": "string",
                    "description": "The enforcement level of the policy. This can either be hard or soft"
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the secret approval policy to"
                },
                "environmentSlugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments to apply the secret approval policy to"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret approval policy"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to add the secret approval policy"
                },
                "requiredApprovals": {
                    "type": "integer",
                    "description": "The number of required approvers"
                },
                "secretPath": {
                    "type": "string",
                    "description": "The secret path to apply the secret approval policy to"
                }
            },
            "requiredInputs": [
                "approvers",
                "projectId",
                "requiredApprovals",
                "secretPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretApprovalPolicy resources.\n",
                "properties": {
                    "allowSelfApproval": {
                        "type": "boolean",
                        "description": "Whether to allow the  approvers to approve their own changes"
                    },
                    "approvers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/infisical:index/SecretApprovalPolicyApprover:SecretApprovalPolicyApprover"
                        },
                        "description": "The required approvers"
                    },
                    "enforcementLevel": {
                        "type": "string",
                        "description": "The enforcement level of the policy. This can either be hard or soft"
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "(DEPRECATED, Use environment_slugs instead) The environment to apply the secret approval policy to"
                    },
                    "environmentSlugs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The environments to apply the secret approval policy to"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret approval policy"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to add the secret approval policy"
                    },
                    "requiredApprovals": {
                        "type": "integer",
                        "description": "The number of required approvers"
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The secret path to apply the secret approval policy to"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretFolder:SecretFolder": {
            "properties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the environment"
                },
                "environmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the folder to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path where the folder should be created/updated"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the folder"
                },
                "path": {
                    "type": "string",
                    "description": "The full path of the folder, including its name."
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                }
            },
            "required": [
                "environmentId",
                "environmentSlug",
                "folderPath",
                "name",
                "path",
                "projectId"
            ],
            "inputProperties": {
                "environmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the folder to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path where the folder should be created/updated"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the folder"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                }
            },
            "requiredInputs": [
                "environmentSlug",
                "folderPath",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretFolder resources.\n",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the environment"
                    },
                    "environmentSlug": {
                        "type": "string",
                        "description": "The environment slug of the folder to modify/create"
                    },
                    "folderPath": {
                        "type": "string",
                        "description": "The path where the folder should be created/updated"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the folder"
                    },
                    "path": {
                        "type": "string",
                        "description": "The full path of the folder, including its name."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretImport:SecretImport": {
            "properties": {
                "environmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret import to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path where the secret should be imported"
                },
                "importEnvironmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret import to modify/create"
                },
                "importFolderPath": {
                    "type": "string",
                    "description": "The path where the secret should be imported from"
                },
                "isReplication": {
                    "type": "boolean",
                    "description": "The is_replication of the secret import to modify/create"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID"
                }
            },
            "required": [
                "environmentSlug",
                "folderPath",
                "importEnvironmentSlug",
                "importFolderPath",
                "isReplication",
                "projectId"
            ],
            "inputProperties": {
                "environmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret import to modify/create"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path where the secret should be imported"
                },
                "importEnvironmentSlug": {
                    "type": "string",
                    "description": "The environment slug of the secret import to modify/create"
                },
                "importFolderPath": {
                    "type": "string",
                    "description": "The path where the secret should be imported from"
                },
                "isReplication": {
                    "type": "boolean",
                    "description": "The is_replication of the secret import to modify/create"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Infisical project ID"
                }
            },
            "requiredInputs": [
                "environmentSlug",
                "folderPath",
                "importEnvironmentSlug",
                "importFolderPath",
                "isReplication",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretImport resources.\n",
                "properties": {
                    "environmentSlug": {
                        "type": "string",
                        "description": "The environment slug of the secret import to modify/create"
                    },
                    "folderPath": {
                        "type": "string",
                        "description": "The path where the secret should be imported"
                    },
                    "importEnvironmentSlug": {
                        "type": "string",
                        "description": "The environment slug of the secret import to modify/create"
                    },
                    "importFolderPath": {
                        "type": "string",
                        "description": "The path where the secret should be imported from"
                    },
                    "isReplication": {
                        "type": "boolean",
                        "description": "The is_replication of the secret import to modify/create"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Infisical project ID"
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationAwsIamUserSecret:SecretRotationAwsIamUserSecret": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretParameters:SecretRotationAwsIamUserSecretParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretRotateAtUtc:SecretRotationAwsIamUserSecretRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretSecretsMapping:SecretRotationAwsIamUserSecretSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretTemporaryParameters:SecretRotationAwsIamUserSecretTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretParameters:SecretRotationAwsIamUserSecretParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretRotateAtUtc:SecretRotationAwsIamUserSecretRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretSecretsMapping:SecretRotationAwsIamUserSecretSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretTemporaryParameters:SecretRotationAwsIamUserSecretTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationAwsIamUserSecret resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretParameters:SecretRotationAwsIamUserSecretParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretRotateAtUtc:SecretRotationAwsIamUserSecretRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretSecretsMapping:SecretRotationAwsIamUserSecretSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationAwsIamUserSecretTemporaryParameters:SecretRotationAwsIamUserSecretTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationAzureClientSecret:SecretRotationAzureClientSecret": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretParameters:SecretRotationAzureClientSecretParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretRotateAtUtc:SecretRotationAzureClientSecretRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretSecretsMapping:SecretRotationAzureClientSecretSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretTemporaryParameters:SecretRotationAzureClientSecretTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretParameters:SecretRotationAzureClientSecretParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretRotateAtUtc:SecretRotationAzureClientSecretRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretSecretsMapping:SecretRotationAzureClientSecretSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretTemporaryParameters:SecretRotationAzureClientSecretTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationAzureClientSecret resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretParameters:SecretRotationAzureClientSecretParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretRotateAtUtc:SecretRotationAzureClientSecretRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretSecretsMapping:SecretRotationAzureClientSecretSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationAzureClientSecretTemporaryParameters:SecretRotationAzureClientSecretTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationLdapPassword:SecretRotationLdapPassword": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordParameters:SecretRotationLdapPasswordParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordRotateAtUtc:SecretRotationLdapPasswordRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordSecretsMapping:SecretRotationLdapPasswordSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordTemporaryParameters:SecretRotationLdapPasswordTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordParameters:SecretRotationLdapPasswordParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordRotateAtUtc:SecretRotationLdapPasswordRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordSecretsMapping:SecretRotationLdapPasswordSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationLdapPasswordTemporaryParameters:SecretRotationLdapPasswordTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationLdapPassword resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationLdapPasswordParameters:SecretRotationLdapPasswordParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationLdapPasswordRotateAtUtc:SecretRotationLdapPasswordRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationLdapPasswordSecretsMapping:SecretRotationLdapPasswordSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationLdapPasswordTemporaryParameters:SecretRotationLdapPasswordTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationMssqlCredentials:SecretRotationMssqlCredentials": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsParameters:SecretRotationMssqlCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsRotateAtUtc:SecretRotationMssqlCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsSecretsMapping:SecretRotationMssqlCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsTemporaryParameters:SecretRotationMssqlCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsParameters:SecretRotationMssqlCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsRotateAtUtc:SecretRotationMssqlCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsSecretsMapping:SecretRotationMssqlCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsTemporaryParameters:SecretRotationMssqlCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationMssqlCredentials resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsParameters:SecretRotationMssqlCredentialsParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsRotateAtUtc:SecretRotationMssqlCredentialsRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsSecretsMapping:SecretRotationMssqlCredentialsSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationMssqlCredentialsTemporaryParameters:SecretRotationMssqlCredentialsTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationMysqlCredentials:SecretRotationMysqlCredentials": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsParameters:SecretRotationMysqlCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsRotateAtUtc:SecretRotationMysqlCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsSecretsMapping:SecretRotationMysqlCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsTemporaryParameters:SecretRotationMysqlCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsParameters:SecretRotationMysqlCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsRotateAtUtc:SecretRotationMysqlCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsSecretsMapping:SecretRotationMysqlCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsTemporaryParameters:SecretRotationMysqlCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationMysqlCredentials resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsParameters:SecretRotationMysqlCredentialsParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsRotateAtUtc:SecretRotationMysqlCredentialsRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsSecretsMapping:SecretRotationMysqlCredentialsSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationMysqlCredentialsTemporaryParameters:SecretRotationMysqlCredentialsTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationOracledbCredentials:SecretRotationOracledbCredentials": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsParameters:SecretRotationOracledbCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsRotateAtUtc:SecretRotationOracledbCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsSecretsMapping:SecretRotationOracledbCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsTemporaryParameters:SecretRotationOracledbCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsParameters:SecretRotationOracledbCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsRotateAtUtc:SecretRotationOracledbCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsSecretsMapping:SecretRotationOracledbCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsTemporaryParameters:SecretRotationOracledbCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationOracledbCredentials resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsParameters:SecretRotationOracledbCredentialsParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsRotateAtUtc:SecretRotationOracledbCredentialsRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsSecretsMapping:SecretRotationOracledbCredentialsSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationOracledbCredentialsTemporaryParameters:SecretRotationOracledbCredentialsTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials": {
            "properties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsParameters:SecretRotationPostgresCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsRotateAtUtc:SecretRotationPostgresCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsSecretsMapping:SecretRotationPostgresCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsTemporaryParameters:SecretRotationPostgresCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "required": [
                "autoRotationEnabled",
                "connectionId",
                "environment",
                "name",
                "parameters",
                "projectId",
                "rotateAtUtc",
                "rotationInterval",
                "secretPath",
                "secretsMapping"
            ],
            "inputProperties": {
                "autoRotationEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically rotated."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to use for the secret rotation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the secret rotation."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to rotate secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret rotation."
                },
                "parameters": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsParameters:SecretRotationPostgresCredentialsParameters",
                    "description": "Parameters to modify how secrets are rotated."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the secret rotation in."
                },
                "rotateAtUtc": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsRotateAtUtc:SecretRotationPostgresCredentialsRotateAtUtc",
                    "description": "At which UTC time the rotation should occur."
                },
                "rotationInterval": {
                    "type": "integer",
                    "description": "How many days to wait between each rotation."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to rotate secrets from."
                },
                "secretsMapping": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsSecretsMapping:SecretRotationPostgresCredentialsSecretsMapping",
                    "description": "Secret mappings to modify how secrets are rotated."
                },
                "temporaryParameters": {
                    "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsTemporaryParameters:SecretRotationPostgresCredentialsTemporaryParameters",
                    "description": "Temporary parameters to modify how secrets are rotated."
                }
            },
            "requiredInputs": [
                "connectionId",
                "environment",
                "parameters",
                "projectId",
                "secretPath",
                "secretsMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretRotationPostgresCredentials resources.\n",
                "properties": {
                    "autoRotationEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically rotated."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to use for the secret rotation."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the secret rotation."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to rotate secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret rotation."
                    },
                    "parameters": {
                        "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsParameters:SecretRotationPostgresCredentialsParameters",
                        "description": "Parameters to modify how secrets are rotated."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the secret rotation in."
                    },
                    "rotateAtUtc": {
                        "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsRotateAtUtc:SecretRotationPostgresCredentialsRotateAtUtc",
                        "description": "At which UTC time the rotation should occur."
                    },
                    "rotationInterval": {
                        "type": "integer",
                        "description": "How many days to wait between each rotation."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to rotate secrets from."
                    },
                    "secretsMapping": {
                        "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsSecretsMapping:SecretRotationPostgresCredentialsSecretsMapping",
                        "description": "Secret mappings to modify how secrets are rotated."
                    },
                    "temporaryParameters": {
                        "$ref": "#/types/infisical:index/SecretRotationPostgresCredentialsTemporaryParameters:SecretRotationPostgresCredentialsTemporaryParameters",
                        "description": "Temporary parameters to modify how secrets are rotated."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSync1password:SecretSync1password": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the 1password Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the 1Password sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSync1passwordDestinationConfig:SecretSync1passwordDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the 1Password sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSync1passwordSyncOptions:SecretSync1passwordSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the 1password Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the 1Password sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSync1passwordDestinationConfig:SecretSync1passwordDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the 1Password sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSync1passwordSyncOptions:SecretSync1passwordSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSync1password resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the 1password Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the 1Password sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSync1passwordDestinationConfig:SecretSync1passwordDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the 1Password sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSync1passwordSyncOptions:SecretSync1passwordSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncAwsParameterStore:SecretSyncAwsParameterStore": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the aws Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS Parameter Store sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreDestinationConfig:SecretSyncAwsParameterStoreDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS Parameter Store sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreSyncOptions:SecretSyncAwsParameterStoreSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the aws Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS Parameter Store sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreDestinationConfig:SecretSyncAwsParameterStoreDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS Parameter Store sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreSyncOptions:SecretSyncAwsParameterStoreSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncAwsParameterStore resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the aws Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the AWS Parameter Store sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreDestinationConfig:SecretSyncAwsParameterStoreDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the AWS Parameter Store sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsParameterStoreSyncOptions:SecretSyncAwsParameterStoreSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncAwsSecretsManager:SecretSyncAwsSecretsManager": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the aws Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS Secrets Manager sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerDestinationConfig:SecretSyncAwsSecretsManagerDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS Secrets Manager sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerSyncOptions:SecretSyncAwsSecretsManagerSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the aws Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the AWS Secrets Manager sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerDestinationConfig:SecretSyncAwsSecretsManagerDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AWS Secrets Manager sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerSyncOptions:SecretSyncAwsSecretsManagerSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncAwsSecretsManager resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the aws Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the AWS Secrets Manager sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerDestinationConfig:SecretSyncAwsSecretsManagerDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the AWS Secrets Manager sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncAwsSecretsManagerSyncOptions:SecretSyncAwsSecretsManagerSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure App Configuration sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationDestinationConfig:SecretSyncAzureAppConfigurationDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure App Configuration sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationSyncOptions:SecretSyncAzureAppConfigurationSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure App Configuration sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationDestinationConfig:SecretSyncAzureAppConfigurationDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure App Configuration sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationSyncOptions:SecretSyncAzureAppConfigurationSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncAzureAppConfiguration resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the azure Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Azure App Configuration sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationDestinationConfig:SecretSyncAzureAppConfigurationDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Azure App Configuration sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureAppConfigurationSyncOptions:SecretSyncAzureAppConfigurationSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncAzureDevops:SecretSyncAzureDevops": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure DevOps sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureDevopsDestinationConfig:SecretSyncAzureDevopsDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure DevOps sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureDevopsSyncOptions:SecretSyncAzureDevopsSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure DevOps sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureDevopsDestinationConfig:SecretSyncAzureDevopsDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure DevOps sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureDevopsSyncOptions:SecretSyncAzureDevopsSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncAzureDevops resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the azure Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Azure DevOps sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureDevopsDestinationConfig:SecretSyncAzureDevopsDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Azure DevOps sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureDevopsSyncOptions:SecretSyncAzureDevopsSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure Key Vault sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultDestinationConfig:SecretSyncAzureKeyVaultDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure Key Vault sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultSyncOptions:SecretSyncAzureKeyVaultSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the azure Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Azure Key Vault sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultDestinationConfig:SecretSyncAzureKeyVaultDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Azure Key Vault sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultSyncOptions:SecretSyncAzureKeyVaultSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncAzureKeyVault resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the azure Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Azure Key Vault sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultDestinationConfig:SecretSyncAzureKeyVaultDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Azure Key Vault sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncAzureKeyVaultSyncOptions:SecretSyncAzureKeyVaultSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncBitbucket:SecretSyncBitbucket": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the bitbucket Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Bitbucket sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncBitbucketDestinationConfig:SecretSyncBitbucketDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bitbucket sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncBitbucketSyncOptions:SecretSyncBitbucketSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the bitbucket Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Bitbucket sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncBitbucketDestinationConfig:SecretSyncBitbucketDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bitbucket sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncBitbucketSyncOptions:SecretSyncBitbucketSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncBitbucket resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the bitbucket Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Bitbucket sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncBitbucketDestinationConfig:SecretSyncBitbucketDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Bitbucket sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncBitbucketSyncOptions:SecretSyncBitbucketSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncCloudflarePages:SecretSyncCloudflarePages": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the cloudflare Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare Pages sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesDestinationConfig:SecretSyncCloudflarePagesDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare Pages sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesSyncOptions:SecretSyncCloudflarePagesSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the cloudflare Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare Pages sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesDestinationConfig:SecretSyncCloudflarePagesDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare Pages sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesSyncOptions:SecretSyncCloudflarePagesSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncCloudflarePages resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the cloudflare Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Cloudflare Pages sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesDestinationConfig:SecretSyncCloudflarePagesDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloudflare Pages sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncCloudflarePagesSyncOptions:SecretSyncCloudflarePagesSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncCloudflareWorkers:SecretSyncCloudflareWorkers": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the cloudflare Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare Workers sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersDestinationConfig:SecretSyncCloudflareWorkersDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare Workers sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersSyncOptions:SecretSyncCloudflareWorkersSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the cloudflare Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Cloudflare Workers sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersDestinationConfig:SecretSyncCloudflareWorkersDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloudflare Workers sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersSyncOptions:SecretSyncCloudflareWorkersSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncCloudflareWorkers resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the cloudflare Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Cloudflare Workers sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersDestinationConfig:SecretSyncCloudflareWorkersDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloudflare Workers sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncCloudflareWorkersSyncOptions:SecretSyncCloudflareWorkersSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncDatabricks:SecretSyncDatabricks": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the databricks Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Databricks sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncDatabricksDestinationConfig:SecretSyncDatabricksDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Databricks sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncDatabricksSyncOptions:SecretSyncDatabricksSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the databricks Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Databricks sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncDatabricksDestinationConfig:SecretSyncDatabricksDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Databricks sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncDatabricksSyncOptions:SecretSyncDatabricksSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncDatabricks resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the databricks Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Databricks sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncDatabricksDestinationConfig:SecretSyncDatabricksDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Databricks sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncDatabricksSyncOptions:SecretSyncDatabricksSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncFlyio:SecretSyncFlyio": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the flyio Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Fly.io sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncFlyioDestinationConfig:SecretSyncFlyioDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Fly.io sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncFlyioSyncOptions:SecretSyncFlyioSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the flyio Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Fly.io sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncFlyioDestinationConfig:SecretSyncFlyioDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Fly.io sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncFlyioSyncOptions:SecretSyncFlyioSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncFlyio resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the flyio Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Fly.io sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncFlyioDestinationConfig:SecretSyncFlyioDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Fly.io sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncFlyioSyncOptions:SecretSyncFlyioSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the GCP Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the GCP Secret Manager sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerDestinationConfig:SecretSyncGcpSecretManagerDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GCP Secret Manager sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerSyncOptions:SecretSyncGcpSecretManagerSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the GCP Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the GCP Secret Manager sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerDestinationConfig:SecretSyncGcpSecretManagerDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GCP Secret Manager sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerSyncOptions:SecretSyncGcpSecretManagerSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncGcpSecretManager resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the GCP Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the GCP Secret Manager sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerDestinationConfig:SecretSyncGcpSecretManagerDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the GCP Secret Manager sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncGcpSecretManagerSyncOptions:SecretSyncGcpSecretManagerSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncGithub:SecretSyncGithub": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the github Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Github sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncGithubDestinationConfig:SecretSyncGithubDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Github sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncGithubSyncOptions:SecretSyncGithubSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the github Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Github sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncGithubDestinationConfig:SecretSyncGithubDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Github sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncGithubSyncOptions:SecretSyncGithubSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncGithub resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the github Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Github sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncGithubDestinationConfig:SecretSyncGithubDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Github sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncGithubSyncOptions:SecretSyncGithubSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncRender:SecretSyncRender": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the render Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Render sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncRenderDestinationConfig:SecretSyncRenderDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Render sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncRenderSyncOptions:SecretSyncRenderSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the render Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Render sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncRenderDestinationConfig:SecretSyncRenderDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Render sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncRenderSyncOptions:SecretSyncRenderSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncRender resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the render Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Render sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncRenderDestinationConfig:SecretSyncRenderDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Render sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncRenderSyncOptions:SecretSyncRenderSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretSyncSupabase:SecretSyncSupabase": {
            "properties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the supabase Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Supabase sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncSupabaseDestinationConfig:SecretSyncSupabaseDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Supabase sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncSupabaseSyncOptions:SecretSyncSupabaseSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "required": [
                "autoSyncEnabled",
                "connectionId",
                "destinationConfig",
                "environment",
                "name",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "inputProperties": {
                "autoSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the supabase Connection to use for syncing."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the Supabase sync."
                },
                "destinationConfig": {
                    "$ref": "#/types/infisical:index/SecretSyncSupabaseDestinationConfig:SecretSyncSupabaseDestinationConfig",
                    "description": "The destination configuration for the secret sync."
                },
                "environment": {
                    "type": "string",
                    "description": "The slug of the project environment to sync secrets from."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Supabase sync to create. Must be slug-friendly."
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Infisical project to create the sync in."
                },
                "secretPath": {
                    "type": "string",
                    "description": "The folder path to sync secrets from."
                },
                "syncOptions": {
                    "$ref": "#/types/infisical:index/SecretSyncSupabaseSyncOptions:SecretSyncSupabaseSyncOptions",
                    "description": "Parameters to modify how secrets are synced."
                }
            },
            "requiredInputs": [
                "connectionId",
                "destinationConfig",
                "environment",
                "projectId",
                "secretPath",
                "syncOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSyncSupabase resources.\n",
                "properties": {
                    "autoSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether secrets should be automatically synced when changes occur at the source location or not."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the supabase Connection to use for syncing."
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Supabase sync."
                    },
                    "destinationConfig": {
                        "$ref": "#/types/infisical:index/SecretSyncSupabaseDestinationConfig:SecretSyncSupabaseDestinationConfig",
                        "description": "The destination configuration for the secret sync."
                    },
                    "environment": {
                        "type": "string",
                        "description": "The slug of the project environment to sync secrets from."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Supabase sync to create. Must be slug-friendly."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Infisical project to create the sync in."
                    },
                    "secretPath": {
                        "type": "string",
                        "description": "The folder path to sync secrets from."
                    },
                    "syncOptions": {
                        "$ref": "#/types/infisical:index/SecretSyncSupabaseSyncOptions:SecretSyncSupabaseSyncOptions",
                        "description": "Parameters to modify how secrets are synced."
                    }
                },
                "type": "object"
            }
        },
        "infisical:index/secretTag:SecretTag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color code for the tag."
                },
                "name": {
                    "type": "string",
                    "description": "The name for the new tag"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id associated with the secret tag"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new tag"
                }
            },
            "required": [
                "color",
                "name",
                "projectId",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color code for the tag."
                },
                "name": {
                    "type": "string",
                    "description": "The name for the new tag"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id associated with the secret tag"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug for the new tag"
                }
            },
            "requiredInputs": [
                "color",
                "projectId",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretTag resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color code for the tag."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the new tag"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id associated with the secret tag"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug for the new tag"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "infisical:index/getGroups:getGroups": {
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/types/infisical:index/getGroupsGroup:getGroupsGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    }
                },
                "required": [
                    "groups",
                    "id"
                ],
                "type": "object"
            }
        },
        "infisical:index/getIdentityDetails:getIdentityDetails": {
            "outputs": {
                "description": "A collection of values returned by getIdentityDetails.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "organization": {
                        "$ref": "#/types/infisical:index/getIdentityDetailsOrganization:getIdentityDetailsOrganization"
                    }
                },
                "required": [
                    "organization",
                    "id"
                ],
                "type": "object"
            }
        },
        "infisical:index/getProjects:getProjects": {
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "autoCapitalization": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "environments": {
                        "additionalProperties": {
                            "$ref": "#/types/infisical:index/getProjectsEnvironments:getProjectsEnvironments"
                        },
                        "type": "object"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upgradeStatus": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "required": [
                    "autoCapitalization",
                    "createdAt",
                    "environments",
                    "id",
                    "name",
                    "orgId",
                    "slug",
                    "updatedAt",
                    "upgradeStatus",
                    "version"
                ],
                "type": "object"
            }
        },
        "infisical:index/getSecretFolders:getSecretFolders": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecretFolders.\n",
                "properties": {
                    "environmentSlug": {
                        "type": "string"
                    },
                    "folderPath": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "environmentSlug",
                    "folderPath",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretFolders.\n",
                "properties": {
                    "environmentSlug": {
                        "type": "string"
                    },
                    "folderPath": {
                        "type": "string"
                    },
                    "folders": {
                        "items": {
                            "$ref": "#/types/infisical:index/getSecretFoldersFolder:getSecretFoldersFolder"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentSlug",
                    "folderPath",
                    "folders",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "infisical:index/getSecretTag:getSecretTag": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecretTag.\n",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretTag.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "required": [
                    "color",
                    "id",
                    "name",
                    "projectId",
                    "slug"
                ],
                "type": "object"
            }
        },
        "infisical:index/getSecrets:getSecrets": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecrets.\n",
                "properties": {
                    "envSlug": {
                        "type": "string"
                    },
                    "folderPath": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "envSlug",
                    "folderPath"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecrets.\n",
                "properties": {
                    "envSlug": {
                        "type": "string"
                    },
                    "folderPath": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "secrets": {
                        "additionalProperties": {
                            "$ref": "#/types/infisical:index/getSecretsSecrets:getSecretsSecrets"
                        },
                        "type": "object"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "required": [
                    "envSlug",
                    "folderPath",
                    "secrets",
                    "workspaceId",
                    "id"
                ],
                "type": "object"
            }
        },
        "pulumi:providers:infisical/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/provider"
                    }
                },
                "type": "pulumi:providers:infisical/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        }
    }
}