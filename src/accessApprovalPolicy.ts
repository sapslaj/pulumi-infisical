// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessApprovalPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessApprovalPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessApprovalPolicyState, opts?: pulumi.CustomResourceOptions): AccessApprovalPolicy {
        return new AccessApprovalPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/accessApprovalPolicy:AccessApprovalPolicy';

    /**
     * Returns true if the given object is an instance of AccessApprovalPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessApprovalPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessApprovalPolicy.__pulumiType;
    }

    /**
     * The required approvers
     */
    declare public readonly approvers: pulumi.Output<outputs.AccessApprovalPolicyApprover[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    declare public readonly enforcementLevel: pulumi.Output<string>;
    /**
     * (DEPRECATED, Use<span pulumi-lang-nodejs=" environmentSlugs " pulumi-lang-dotnet=" EnvironmentSlugs " pulumi-lang-go=" environmentSlugs " pulumi-lang-python=" environment_slugs " pulumi-lang-yaml=" environmentSlugs " pulumi-lang-java=" environmentSlugs "> environment_slugs </span>instead) The environment to apply the access approval policy to
     */
    declare public readonly environmentSlug: pulumi.Output<string | undefined>;
    /**
     * The environments to apply the access approval policy to
     */
    declare public readonly environmentSlugs: pulumi.Output<string[] | undefined>;
    /**
     * The name of the access approval policy
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project to add the access approval policy
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The number of required approvers
     */
    declare public readonly requiredApprovals: pulumi.Output<number>;
    /**
     * The secret path to apply the access approval policy to
     */
    declare public readonly secretPath: pulumi.Output<string>;

    /**
     * Create a AccessApprovalPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessApprovalPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessApprovalPolicyArgs | AccessApprovalPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessApprovalPolicyState | undefined;
            resourceInputs["approvers"] = state?.approvers;
            resourceInputs["enforcementLevel"] = state?.enforcementLevel;
            resourceInputs["environmentSlug"] = state?.environmentSlug;
            resourceInputs["environmentSlugs"] = state?.environmentSlugs;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["requiredApprovals"] = state?.requiredApprovals;
            resourceInputs["secretPath"] = state?.secretPath;
        } else {
            const args = argsOrState as AccessApprovalPolicyArgs | undefined;
            if (args?.approvers === undefined && !opts.urn) {
                throw new Error("Missing required property 'approvers'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.requiredApprovals === undefined && !opts.urn) {
                throw new Error("Missing required property 'requiredApprovals'");
            }
            if (args?.secretPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            resourceInputs["approvers"] = args?.approvers;
            resourceInputs["enforcementLevel"] = args?.enforcementLevel;
            resourceInputs["environmentSlug"] = args?.environmentSlug;
            resourceInputs["environmentSlugs"] = args?.environmentSlugs;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["requiredApprovals"] = args?.requiredApprovals;
            resourceInputs["secretPath"] = args?.secretPath;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessApprovalPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessApprovalPolicy resources.
 */
export interface AccessApprovalPolicyState {
    /**
     * The required approvers
     */
    approvers?: pulumi.Input<pulumi.Input<inputs.AccessApprovalPolicyApprover>[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    enforcementLevel?: pulumi.Input<string>;
    /**
     * (DEPRECATED, Use<span pulumi-lang-nodejs=" environmentSlugs " pulumi-lang-dotnet=" EnvironmentSlugs " pulumi-lang-go=" environmentSlugs " pulumi-lang-python=" environment_slugs " pulumi-lang-yaml=" environmentSlugs " pulumi-lang-java=" environmentSlugs "> environment_slugs </span>instead) The environment to apply the access approval policy to
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The environments to apply the access approval policy to
     */
    environmentSlugs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the access approval policy
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to add the access approval policy
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of required approvers
     */
    requiredApprovals?: pulumi.Input<number>;
    /**
     * The secret path to apply the access approval policy to
     */
    secretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessApprovalPolicy resource.
 */
export interface AccessApprovalPolicyArgs {
    /**
     * The required approvers
     */
    approvers: pulumi.Input<pulumi.Input<inputs.AccessApprovalPolicyApprover>[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    enforcementLevel?: pulumi.Input<string>;
    /**
     * (DEPRECATED, Use<span pulumi-lang-nodejs=" environmentSlugs " pulumi-lang-dotnet=" EnvironmentSlugs " pulumi-lang-go=" environmentSlugs " pulumi-lang-python=" environment_slugs " pulumi-lang-yaml=" environmentSlugs " pulumi-lang-java=" environmentSlugs "> environment_slugs </span>instead) The environment to apply the access approval policy to
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The environments to apply the access approval policy to
     */
    environmentSlugs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the access approval policy
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to add the access approval policy
     */
    projectId: pulumi.Input<string>;
    /**
     * The number of required approvers
     */
    requiredApprovals: pulumi.Input<number>;
    /**
     * The secret path to apply the access approval policy to
     */
    secretPath: pulumi.Input<string>;
}
