// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretSyncCloudflareWorkers extends pulumi.CustomResource {
    /**
     * Get an existing SecretSyncCloudflareWorkers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretSyncCloudflareWorkersState, opts?: pulumi.CustomResourceOptions): SecretSyncCloudflareWorkers {
        return new SecretSyncCloudflareWorkers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secretSyncCloudflareWorkers:SecretSyncCloudflareWorkers';

    /**
     * Returns true if the given object is an instance of SecretSyncCloudflareWorkers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretSyncCloudflareWorkers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretSyncCloudflareWorkers.__pulumiType;
    }

    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    declare public readonly autoSyncEnabled: pulumi.Output<boolean>;
    /**
     * The ID of the cloudflare Connection to use for syncing.
     */
    declare public readonly connectionId: pulumi.Output<string>;
    /**
     * An optional description for the Cloudflare Workers sync.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The destination configuration for the secret sync.
     */
    declare public readonly destinationConfig: pulumi.Output<outputs.SecretSyncCloudflareWorkersDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The name of the Cloudflare Workers sync to create. Must be slug-friendly.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The folder path to sync secrets from.
     */
    declare public readonly secretPath: pulumi.Output<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    declare public readonly syncOptions: pulumi.Output<outputs.SecretSyncCloudflareWorkersSyncOptions>;

    /**
     * Create a SecretSyncCloudflareWorkers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretSyncCloudflareWorkersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretSyncCloudflareWorkersArgs | SecretSyncCloudflareWorkersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretSyncCloudflareWorkersState | undefined;
            resourceInputs["autoSyncEnabled"] = state?.autoSyncEnabled;
            resourceInputs["connectionId"] = state?.connectionId;
            resourceInputs["description"] = state?.description;
            resourceInputs["destinationConfig"] = state?.destinationConfig;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretPath"] = state?.secretPath;
            resourceInputs["syncOptions"] = state?.syncOptions;
        } else {
            const args = argsOrState as SecretSyncCloudflareWorkersArgs | undefined;
            if (args?.connectionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if (args?.destinationConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationConfig'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.secretPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            if (args?.syncOptions === undefined && !opts.urn) {
                throw new Error("Missing required property 'syncOptions'");
            }
            resourceInputs["autoSyncEnabled"] = args?.autoSyncEnabled;
            resourceInputs["connectionId"] = args?.connectionId;
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationConfig"] = args?.destinationConfig;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretPath"] = args?.secretPath;
            resourceInputs["syncOptions"] = args?.syncOptions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretSyncCloudflareWorkers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretSyncCloudflareWorkers resources.
 */
export interface SecretSyncCloudflareWorkersState {
    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    autoSyncEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the cloudflare Connection to use for syncing.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * An optional description for the Cloudflare Workers sync.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination configuration for the secret sync.
     */
    destinationConfig?: pulumi.Input<inputs.SecretSyncCloudflareWorkersDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the Cloudflare Workers sync to create. Must be slug-friendly.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The folder path to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    syncOptions?: pulumi.Input<inputs.SecretSyncCloudflareWorkersSyncOptions>;
}

/**
 * The set of arguments for constructing a SecretSyncCloudflareWorkers resource.
 */
export interface SecretSyncCloudflareWorkersArgs {
    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    autoSyncEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the cloudflare Connection to use for syncing.
     */
    connectionId: pulumi.Input<string>;
    /**
     * An optional description for the Cloudflare Workers sync.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination configuration for the secret sync.
     */
    destinationConfig: pulumi.Input<inputs.SecretSyncCloudflareWorkersDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    environment: pulumi.Input<string>;
    /**
     * The name of the Cloudflare Workers sync to create. Must be slug-friendly.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    projectId: pulumi.Input<string>;
    /**
     * The folder path to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    syncOptions: pulumi.Input<inputs.SecretSyncCloudflareWorkersSyncOptions>;
}
