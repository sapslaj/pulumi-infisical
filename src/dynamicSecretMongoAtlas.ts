// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DynamicSecretMongoAtlas extends pulumi.CustomResource {
    /**
     * Get an existing DynamicSecretMongoAtlas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicSecretMongoAtlasState, opts?: pulumi.CustomResourceOptions): DynamicSecretMongoAtlas {
        return new DynamicSecretMongoAtlas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/dynamicSecretMongoAtlas:DynamicSecretMongoAtlas';

    /**
     * Returns true if the given object is an instance of DynamicSecretMongoAtlas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicSecretMongoAtlas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicSecretMongoAtlas.__pulumiType;
    }

    /**
     * The configuration of the dynamic secret
     */
    declare public readonly configuration: pulumi.Output<outputs.DynamicSecretMongoAtlasConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    declare public readonly defaultTtl: pulumi.Output<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    declare public readonly environmentSlug: pulumi.Output<string>;
    /**
     * The maximum limit a TTL can be leased or renewed for.
     */
    declare public readonly maxTtl: pulumi.Output<string | undefined>;
    /**
     * The metadata associated with this dynamic secret
     */
    declare public readonly metadatas: pulumi.Output<outputs.DynamicSecretMongoAtlasMetadata[] | undefined>;
    /**
     * The name of the dynamic secret.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The path to create the dynamic secret in.
     */
    declare public readonly path: pulumi.Output<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    declare public readonly projectSlug: pulumi.Output<string>;
    /**
     * The username template of the dynamic secret
     */
    declare public readonly usernameTemplate: pulumi.Output<string | undefined>;

    /**
     * Create a DynamicSecretMongoAtlas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicSecretMongoAtlasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicSecretMongoAtlasArgs | DynamicSecretMongoAtlasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicSecretMongoAtlasState | undefined;
            resourceInputs["configuration"] = state?.configuration;
            resourceInputs["defaultTtl"] = state?.defaultTtl;
            resourceInputs["environmentSlug"] = state?.environmentSlug;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["metadatas"] = state?.metadatas;
            resourceInputs["name"] = state?.name;
            resourceInputs["path"] = state?.path;
            resourceInputs["projectSlug"] = state?.projectSlug;
            resourceInputs["usernameTemplate"] = state?.usernameTemplate;
        } else {
            const args = argsOrState as DynamicSecretMongoAtlasArgs | undefined;
            if (args?.configuration === undefined && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if (args?.defaultTtl === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultTtl'");
            }
            if (args?.environmentSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentSlug'");
            }
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if (args?.projectSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectSlug'");
            }
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["defaultTtl"] = args?.defaultTtl;
            resourceInputs["environmentSlug"] = args?.environmentSlug;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["metadatas"] = args?.metadatas;
            resourceInputs["name"] = args?.name;
            resourceInputs["path"] = args?.path;
            resourceInputs["projectSlug"] = args?.projectSlug;
            resourceInputs["usernameTemplate"] = args?.usernameTemplate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DynamicSecretMongoAtlas.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DynamicSecretMongoAtlas resources.
 */
export interface DynamicSecretMongoAtlasState {
    /**
     * The configuration of the dynamic secret
     */
    configuration?: pulumi.Input<inputs.DynamicSecretMongoAtlasConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    defaultTtl?: pulumi.Input<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The maximum limit a TTL can be leased or renewed for.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The metadata associated with this dynamic secret
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.DynamicSecretMongoAtlasMetadata>[]>;
    /**
     * The name of the dynamic secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to create the dynamic secret in.
     */
    path?: pulumi.Input<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    projectSlug?: pulumi.Input<string>;
    /**
     * The username template of the dynamic secret
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicSecretMongoAtlas resource.
 */
export interface DynamicSecretMongoAtlasArgs {
    /**
     * The configuration of the dynamic secret
     */
    configuration: pulumi.Input<inputs.DynamicSecretMongoAtlasConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    defaultTtl: pulumi.Input<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    environmentSlug: pulumi.Input<string>;
    /**
     * The maximum limit a TTL can be leased or renewed for.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The metadata associated with this dynamic secret
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.DynamicSecretMongoAtlasMetadata>[]>;
    /**
     * The name of the dynamic secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to create the dynamic secret in.
     */
    path: pulumi.Input<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    projectSlug: pulumi.Input<string>;
    /**
     * The username template of the dynamic secret
     */
    usernameTemplate?: pulumi.Input<string>;
}
