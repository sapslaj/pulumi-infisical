// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectUser extends pulumi.CustomResource {
    /**
     * Get an existing ProjectUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectUserState, opts?: pulumi.CustomResourceOptions): ProjectUser {
        return new ProjectUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/projectUser:ProjectUser';

    /**
     * Returns true if the given object is an instance of ProjectUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectUser.__pulumiType;
    }

    /**
     * The membershipId of the project user
     */
    declare public /*out*/ readonly membershipId: pulumi.Output<string>;
    /**
     * The id of the project
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The roles assigned to the project user
     */
    declare public readonly roles: pulumi.Output<outputs.ProjectUserRole[]>;
    /**
     * The user details of the project user
     */
    declare public /*out*/ readonly user: pulumi.Output<outputs.ProjectUserUser>;
    /**
     * The usename of the user. By default its the email
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a ProjectUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectUserArgs | ProjectUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectUserState | undefined;
            resourceInputs["membershipId"] = state?.membershipId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["roles"] = state?.roles;
            resourceInputs["user"] = state?.user;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as ProjectUserArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.roles === undefined && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["roles"] = args?.roles;
            resourceInputs["username"] = args?.username;
            resourceInputs["membershipId"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectUser resources.
 */
export interface ProjectUserState {
    /**
     * The membershipId of the project user
     */
    membershipId?: pulumi.Input<string>;
    /**
     * The id of the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * The roles assigned to the project user
     */
    roles?: pulumi.Input<pulumi.Input<inputs.ProjectUserRole>[]>;
    /**
     * The user details of the project user
     */
    user?: pulumi.Input<inputs.ProjectUserUser>;
    /**
     * The usename of the user. By default its the email
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectUser resource.
 */
export interface ProjectUserArgs {
    /**
     * The id of the project
     */
    projectId: pulumi.Input<string>;
    /**
     * The roles assigned to the project user
     */
    roles: pulumi.Input<pulumi.Input<inputs.ProjectUserRole>[]>;
    /**
     * The usename of the user. By default its the email
     */
    username: pulumi.Input<string>;
}
