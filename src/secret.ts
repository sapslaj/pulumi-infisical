// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * The environment slug of the secret to modify/create
     */
    declare public readonly envSlug: pulumi.Output<string>;
    /**
     * The path to the folder where the given secret resides
     */
    declare public readonly folderPath: pulumi.Output<string>;
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * The name of the secret
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly secretReminder: pulumi.Output<outputs.SecretSecretReminder | undefined>;
    /**
     * Tag ids to be attached for the secrets.
     */
    declare public readonly tagIds: pulumi.Output<string[] | undefined>;
    /**
     * The value of the secret in plain text. This is required if `value_wo` is not set.
     */
    declare public readonly value: pulumi.Output<string | undefined>;
    declare public readonly valueWo: pulumi.Output<string | undefined>;
    /**
     * Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
     */
    declare public readonly valueWoVersion: pulumi.Output<number | undefined>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["envSlug"] = state?.envSlug;
            resourceInputs["folderPath"] = state?.folderPath;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["name"] = state?.name;
            resourceInputs["secretReminder"] = state?.secretReminder;
            resourceInputs["tagIds"] = state?.tagIds;
            resourceInputs["value"] = state?.value;
            resourceInputs["valueWo"] = state?.valueWo;
            resourceInputs["valueWoVersion"] = state?.valueWoVersion;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            if (args?.envSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'envSlug'");
            }
            if (args?.folderPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            resourceInputs["envSlug"] = args?.envSlug;
            resourceInputs["folderPath"] = args?.folderPath;
            resourceInputs["name"] = args?.name;
            resourceInputs["secretReminder"] = args?.secretReminder;
            resourceInputs["tagIds"] = args?.tagIds;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["valueWo"] = args?.valueWo;
            resourceInputs["valueWoVersion"] = args?.valueWoVersion;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Secret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * The environment slug of the secret to modify/create
     */
    envSlug?: pulumi.Input<string>;
    /**
     * The path to the folder where the given secret resides
     */
    folderPath?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * The name of the secret
     */
    name?: pulumi.Input<string>;
    secretReminder?: pulumi.Input<inputs.SecretSecretReminder>;
    /**
     * Tag ids to be attached for the secrets.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The value of the secret in plain text. This is required if `value_wo` is not set.
     */
    value?: pulumi.Input<string>;
    valueWo?: pulumi.Input<string>;
    /**
     * Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
     */
    valueWoVersion?: pulumi.Input<number>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * The environment slug of the secret to modify/create
     */
    envSlug: pulumi.Input<string>;
    /**
     * The path to the folder where the given secret resides
     */
    folderPath: pulumi.Input<string>;
    /**
     * The name of the secret
     */
    name?: pulumi.Input<string>;
    secretReminder?: pulumi.Input<inputs.SecretSecretReminder>;
    /**
     * Tag ids to be attached for the secrets.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The value of the secret in plain text. This is required if `value_wo` is not set.
     */
    value?: pulumi.Input<string>;
    valueWo?: pulumi.Input<string>;
    /**
     * Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
     */
    valueWoVersion?: pulumi.Input<number>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    workspaceId?: pulumi.Input<string>;
}
