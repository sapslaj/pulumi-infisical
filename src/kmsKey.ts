// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KmsKey extends pulumi.CustomResource {
    /**
     * Get an existing KmsKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsKeyState, opts?: pulumi.CustomResourceOptions): KmsKey {
        return new KmsKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/kmsKey:KmsKey';

    /**
     * Returns true if the given object is an instance of KmsKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsKey.__pulumiType;
    }

    /**
     * The creation timestamp of the key.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the KMS key. Maximum 500 characters.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The encryption algorithm for the key. Options: aes-256-gcm, aes-128-gcm, RSA_4096, ECC_NIST_P256. Defaults to 'aes-256-gcm'.
     */
    declare public readonly encryptionAlgorithm: pulumi.Output<string>;
    /**
     * Whether the key is disabled. Defaults to false.
     */
    declare public readonly isDisabled: pulumi.Output<boolean>;
    /**
     * The usage of the key. Options: encrypt-decrypt, sign-verify. Defaults to 'encrypt-decrypt'.
     */
    declare public readonly keyUsage: pulumi.Output<string>;
    /**
     * The name of the KMS key. Must be 1-32 characters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the organization.
     */
    declare public /*out*/ readonly orgId: pulumi.Output<string>;
    /**
     * The ID of the project where the KMS key will be created.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The last update timestamp of the key.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The version of the key.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a KmsKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsKeyArgs | KmsKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsKeyState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["encryptionAlgorithm"] = state?.encryptionAlgorithm;
            resourceInputs["isDisabled"] = state?.isDisabled;
            resourceInputs["keyUsage"] = state?.keyUsage;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as KmsKeyArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["encryptionAlgorithm"] = args?.encryptionAlgorithm;
            resourceInputs["isDisabled"] = args?.isDisabled;
            resourceInputs["keyUsage"] = args?.keyUsage;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsKey resources.
 */
export interface KmsKeyState {
    /**
     * The creation timestamp of the key.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the KMS key. Maximum 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The encryption algorithm for the key. Options: aes-256-gcm, aes-128-gcm, RSA_4096, ECC_NIST_P256. Defaults to 'aes-256-gcm'.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * Whether the key is disabled. Defaults to false.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * The usage of the key. Options: encrypt-decrypt, sign-verify. Defaults to 'encrypt-decrypt'.
     */
    keyUsage?: pulumi.Input<string>;
    /**
     * The name of the KMS key. Must be 1-32 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the project where the KMS key will be created.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The last update timestamp of the key.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The version of the key.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KmsKey resource.
 */
export interface KmsKeyArgs {
    /**
     * The description of the KMS key. Maximum 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The encryption algorithm for the key. Options: aes-256-gcm, aes-128-gcm, RSA_4096, ECC_NIST_P256. Defaults to 'aes-256-gcm'.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * Whether the key is disabled. Defaults to false.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * The usage of the key. Options: encrypt-decrypt, sign-verify. Defaults to 'encrypt-decrypt'.
     */
    keyUsage?: pulumi.Input<string>;
    /**
     * The name of the KMS key. Must be 1-32 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project where the KMS key will be created.
     */
    projectId: pulumi.Input<string>;
}
