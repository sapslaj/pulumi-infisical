// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationAwsParameterStore extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAwsParameterStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationAwsParameterStoreState, opts?: pulumi.CustomResourceOptions): IntegrationAwsParameterStore {
        return new IntegrationAwsParameterStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore';

    /**
     * Returns true if the given object is an instance of IntegrationAwsParameterStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAwsParameterStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAwsParameterStore.__pulumiType;
    }

    /**
     * The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    declare public readonly accessKeyId: pulumi.Output<string | undefined>;
    /**
     * The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    declare public readonly assumeRoleArn: pulumi.Output<string | undefined>;
    /**
     * The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
     */
    declare public readonly awsRegion: pulumi.Output<string>;
    /**
     * The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationAuthId: pulumi.Output<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationId: pulumi.Output<string>;
    /**
     * Integration options
     */
    declare public readonly options: pulumi.Output<outputs.IntegrationAwsParameterStoreOptions>;
    /**
     * The path in AWS Parameter Store to sync secrets to.
     */
    declare public readonly parameterStorePath: pulumi.Output<string>;
    /**
     * The ID of your Infisical project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    declare public readonly secretAccessKey: pulumi.Output<string | undefined>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    declare public readonly secretPath: pulumi.Output<string>;

    /**
     * Create a IntegrationAwsParameterStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAwsParameterStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationAwsParameterStoreArgs | IntegrationAwsParameterStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationAwsParameterStoreState | undefined;
            resourceInputs["accessKeyId"] = state?.accessKeyId;
            resourceInputs["assumeRoleArn"] = state?.assumeRoleArn;
            resourceInputs["awsRegion"] = state?.awsRegion;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["integrationAuthId"] = state?.integrationAuthId;
            resourceInputs["integrationId"] = state?.integrationId;
            resourceInputs["options"] = state?.options;
            resourceInputs["parameterStorePath"] = state?.parameterStorePath;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretAccessKey"] = state?.secretAccessKey;
            resourceInputs["secretPath"] = state?.secretPath;
        } else {
            const args = argsOrState as IntegrationAwsParameterStoreArgs | undefined;
            if (args?.awsRegion === undefined && !opts.urn) {
                throw new Error("Missing required property 'awsRegion'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.parameterStorePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'parameterStorePath'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.secretPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["assumeRoleArn"] = args?.assumeRoleArn;
            resourceInputs["awsRegion"] = args?.awsRegion;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["options"] = args?.options;
            resourceInputs["parameterStorePath"] = args?.parameterStorePath;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretAccessKey"] = args?.secretAccessKey ? pulumi.secret(args.secretAccessKey) : undefined;
            resourceInputs["secretPath"] = args?.secretPath;
            resourceInputs["integrationAuthId"] = undefined /*out*/;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationAwsParameterStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationAwsParameterStore resources.
 */
export interface IntegrationAwsParameterStoreState {
    /**
     * The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    assumeRoleArn?: pulumi.Input<string>;
    /**
     * The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    integrationAuthId?: pulumi.Input<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * Integration options
     */
    options?: pulumi.Input<inputs.IntegrationAwsParameterStoreOptions>;
    /**
     * The path in AWS Parameter Store to sync secrets to.
     */
    parameterStorePath?: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationAwsParameterStore resource.
 */
export interface IntegrationAwsParameterStoreArgs {
    /**
     * The AWS access key ID. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * The ARN of the role to assume when syncing secrets to AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    assumeRoleArn?: pulumi.Input<string>;
    /**
     * The AWS region to sync secrets to. (us-east-1, us-east-2, etc)
     */
    awsRegion: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to AWS Parameter Store (prod, dev, staging, etc).
     */
    environment: pulumi.Input<string>;
    /**
     * Integration options
     */
    options?: pulumi.Input<inputs.IntegrationAwsParameterStoreOptions>;
    /**
     * The path in AWS Parameter Store to sync secrets to.
     */
    parameterStorePath: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The AWS secret access key. Used to authenticate with AWS Parameter Store. You must either set secret_access_key and access_key_id, or set assume_role_arn to assume a role.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
}
