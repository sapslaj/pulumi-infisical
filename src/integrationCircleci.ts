// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationCircleci extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationCircleci resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationCircleciState, opts?: pulumi.CustomResourceOptions): IntegrationCircleci {
        return new IntegrationCircleci(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/integrationCircleci:IntegrationCircleci';

    /**
     * Returns true if the given object is an instance of IntegrationCircleci.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationCircleci {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationCircleci.__pulumiType;
    }

    /**
     * The organization slug of your CircleCI organization.
     */
    declare public readonly circleciOrgSlug: pulumi.Output<string>;
    /**
     * The project ID of your CircleCI project.
     */
    declare public readonly circleciProjectId: pulumi.Output<string>;
    /**
     * Your personal CircleCI token to authenticate with.
     */
    declare public readonly circleciToken: pulumi.Output<string>;
    /**
     * The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationAuthId: pulumi.Output<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationId: pulumi.Output<string>;
    /**
     * The ID of your Infisical project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    declare public readonly secretPath: pulumi.Output<string>;

    /**
     * Create a IntegrationCircleci resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationCircleciArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationCircleciArgs | IntegrationCircleciState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationCircleciState | undefined;
            resourceInputs["circleciOrgSlug"] = state?.circleciOrgSlug;
            resourceInputs["circleciProjectId"] = state?.circleciProjectId;
            resourceInputs["circleciToken"] = state?.circleciToken;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["integrationAuthId"] = state?.integrationAuthId;
            resourceInputs["integrationId"] = state?.integrationId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretPath"] = state?.secretPath;
        } else {
            const args = argsOrState as IntegrationCircleciArgs | undefined;
            if (args?.circleciOrgSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'circleciOrgSlug'");
            }
            if (args?.circleciProjectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'circleciProjectId'");
            }
            if (args?.circleciToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'circleciToken'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.secretPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            resourceInputs["circleciOrgSlug"] = args?.circleciOrgSlug;
            resourceInputs["circleciProjectId"] = args?.circleciProjectId;
            resourceInputs["circleciToken"] = args?.circleciToken ? pulumi.secret(args.circleciToken) : undefined;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretPath"] = args?.secretPath;
            resourceInputs["integrationAuthId"] = undefined /*out*/;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["circleciToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationCircleci.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationCircleci resources.
 */
export interface IntegrationCircleciState {
    /**
     * The organization slug of your CircleCI organization.
     */
    circleciOrgSlug?: pulumi.Input<string>;
    /**
     * The project ID of your CircleCI project.
     */
    circleciProjectId?: pulumi.Input<string>;
    /**
     * Your personal CircleCI token to authenticate with.
     */
    circleciToken?: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    integrationAuthId?: pulumi.Input<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationCircleci resource.
 */
export interface IntegrationCircleciArgs {
    /**
     * The organization slug of your CircleCI organization.
     */
    circleciOrgSlug: pulumi.Input<string>;
    /**
     * The project ID of your CircleCI project.
     */
    circleciProjectId: pulumi.Input<string>;
    /**
     * Your personal CircleCI token to authenticate with.
     */
    circleciToken: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to CircleCI (prod, dev, staging, etc).
     */
    environment: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
}
