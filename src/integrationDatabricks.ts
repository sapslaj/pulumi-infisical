// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationDatabricks extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationDatabricks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationDatabricksState, opts?: pulumi.CustomResourceOptions): IntegrationDatabricks {
        return new IntegrationDatabricks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/integrationDatabricks:IntegrationDatabricks';

    /**
     * Returns true if the given object is an instance of IntegrationDatabricks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationDatabricks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationDatabricks.__pulumiType;
    }

    /**
     * The Databricks host URL.
     */
    declare public readonly databricksHost: pulumi.Output<string>;
    /**
     * The Databricks secret scope. Example: your-secret-scope
     */
    declare public readonly databricksSecretScope: pulumi.Output<string>;
    /**
     * The Databricks access token.
     */
    declare public readonly databricksToken: pulumi.Output<string>;
    /**
     * The slug of the environment to sync to Databricks (prod, dev, staging, etc).
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationAuthId: pulumi.Output<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    declare public /*out*/ readonly integrationId: pulumi.Output<string>;
    /**
     * The ID of your Infisical project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    declare public readonly secretPath: pulumi.Output<string>;

    /**
     * Create a IntegrationDatabricks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationDatabricksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationDatabricksArgs | IntegrationDatabricksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationDatabricksState | undefined;
            resourceInputs["databricksHost"] = state?.databricksHost;
            resourceInputs["databricksSecretScope"] = state?.databricksSecretScope;
            resourceInputs["databricksToken"] = state?.databricksToken;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["integrationAuthId"] = state?.integrationAuthId;
            resourceInputs["integrationId"] = state?.integrationId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretPath"] = state?.secretPath;
        } else {
            const args = argsOrState as IntegrationDatabricksArgs | undefined;
            if (args?.databricksHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'databricksHost'");
            }
            if (args?.databricksSecretScope === undefined && !opts.urn) {
                throw new Error("Missing required property 'databricksSecretScope'");
            }
            if (args?.databricksToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'databricksToken'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.secretPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            resourceInputs["databricksHost"] = args?.databricksHost;
            resourceInputs["databricksSecretScope"] = args?.databricksSecretScope;
            resourceInputs["databricksToken"] = args?.databricksToken ? pulumi.secret(args.databricksToken) : undefined;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretPath"] = args?.secretPath;
            resourceInputs["integrationAuthId"] = undefined /*out*/;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databricksToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationDatabricks.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationDatabricks resources.
 */
export interface IntegrationDatabricksState {
    /**
     * The Databricks host URL.
     */
    databricksHost?: pulumi.Input<string>;
    /**
     * The Databricks secret scope. Example: your-secret-scope
     */
    databricksSecretScope?: pulumi.Input<string>;
    /**
     * The Databricks access token.
     */
    databricksToken?: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to Databricks (prod, dev, staging, etc).
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    integrationAuthId?: pulumi.Input<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationDatabricks resource.
 */
export interface IntegrationDatabricksArgs {
    /**
     * The Databricks host URL.
     */
    databricksHost: pulumi.Input<string>;
    /**
     * The Databricks secret scope. Example: your-secret-scope
     */
    databricksSecretScope: pulumi.Input<string>;
    /**
     * The Databricks access token.
     */
    databricksToken: pulumi.Input<string>;
    /**
     * The slug of the environment to sync to Databricks (prod, dev, staging, etc).
     */
    environment: pulumi.Input<string>;
    /**
     * The ID of your Infisical project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
}
