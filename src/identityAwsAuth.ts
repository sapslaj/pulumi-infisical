// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityAwsAuth extends pulumi.CustomResource {
    /**
     * Get an existing IdentityAwsAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityAwsAuthState, opts?: pulumi.CustomResourceOptions): IdentityAwsAuth {
        return new IdentityAwsAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/identityAwsAuth:IdentityAwsAuth';

    /**
     * Returns true if the given object is an instance of IdentityAwsAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityAwsAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityAwsAuth.__pulumiType;
    }

    /**
     * The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    declare public readonly accessTokenMaxTtl: pulumi.Output<number>;
    /**
     * The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
     */
    declare public readonly accessTokenNumUsesLimit: pulumi.Output<number>;
    /**
     * A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network
     * address..
     */
    declare public readonly accessTokenTrustedIps: pulumi.Output<outputs.IdentityAwsAuthAccessTokenTrustedIp[]>;
    /**
     * The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    declare public readonly accessTokenTtl: pulumi.Output<number>;
    /**
     * List of trusted AWS account IDs that are allowed to authenticate with Infisical.
     */
    declare public readonly allowedAccountIds: pulumi.Output<string[]>;
    /**
     * List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three
     * forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or
     * `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to
     * authenticate with Infisical under the identity
     */
    declare public readonly allowedPrincipalArns: pulumi.Output<string[]>;
    /**
     * The ID of the identity to attach the configuration onto.
     */
    declare public readonly identityId: pulumi.Output<string>;
    /**
     * The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g.
     * `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints
     * [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
     */
    declare public readonly stsEndpoint: pulumi.Output<string>;

    /**
     * Create a IdentityAwsAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityAwsAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityAwsAuthArgs | IdentityAwsAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityAwsAuthState | undefined;
            resourceInputs["accessTokenMaxTtl"] = state?.accessTokenMaxTtl;
            resourceInputs["accessTokenNumUsesLimit"] = state?.accessTokenNumUsesLimit;
            resourceInputs["accessTokenTrustedIps"] = state?.accessTokenTrustedIps;
            resourceInputs["accessTokenTtl"] = state?.accessTokenTtl;
            resourceInputs["allowedAccountIds"] = state?.allowedAccountIds;
            resourceInputs["allowedPrincipalArns"] = state?.allowedPrincipalArns;
            resourceInputs["identityId"] = state?.identityId;
            resourceInputs["stsEndpoint"] = state?.stsEndpoint;
        } else {
            const args = argsOrState as IdentityAwsAuthArgs | undefined;
            if (args?.identityId === undefined && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            resourceInputs["accessTokenMaxTtl"] = args?.accessTokenMaxTtl;
            resourceInputs["accessTokenNumUsesLimit"] = args?.accessTokenNumUsesLimit;
            resourceInputs["accessTokenTrustedIps"] = args?.accessTokenTrustedIps;
            resourceInputs["accessTokenTtl"] = args?.accessTokenTtl;
            resourceInputs["allowedAccountIds"] = args?.allowedAccountIds;
            resourceInputs["allowedPrincipalArns"] = args?.allowedPrincipalArns;
            resourceInputs["identityId"] = args?.identityId;
            resourceInputs["stsEndpoint"] = args?.stsEndpoint;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityAwsAuth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityAwsAuth resources.
 */
export interface IdentityAwsAuthState {
    /**
     * The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    accessTokenMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
     */
    accessTokenNumUsesLimit?: pulumi.Input<number>;
    /**
     * A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network
     * address..
     */
    accessTokenTrustedIps?: pulumi.Input<pulumi.Input<inputs.IdentityAwsAuthAccessTokenTrustedIp>[]>;
    /**
     * The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    accessTokenTtl?: pulumi.Input<number>;
    /**
     * List of trusted AWS account IDs that are allowed to authenticate with Infisical.
     */
    allowedAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three
     * forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or
     * `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to
     * authenticate with Infisical under the identity
     */
    allowedPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the identity to attach the configuration onto.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g.
     * `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints
     * [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
     */
    stsEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityAwsAuth resource.
 */
export interface IdentityAwsAuthArgs {
    /**
     * The maximum lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    accessTokenMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses. Default:0
     */
    accessTokenNumUsesLimit?: pulumi.Input<number>;
    /**
     * A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network
     * address..
     */
    accessTokenTrustedIps?: pulumi.Input<pulumi.Input<inputs.IdentityAwsAuthAccessTokenTrustedIp>[]>;
    /**
     * The lifetime for an access token in seconds. This value will be referenced at renewal time. Default: 2592000
     */
    accessTokenTtl?: pulumi.Input<number>;
    /**
     * List of trusted AWS account IDs that are allowed to authenticate with Infisical.
     */
    allowedAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of trusted IAM principal ARNs that are allowed to authenticate with Infisical. The values should take one of three
     * forms: `arn:aws:iam::123456789012:user/MyUserName`, `arn:aws:iam::123456789012:role/MyRoleName`, or
     * `arn:aws:iam::123456789012:*`. Using a wildcard in this case allows any IAM principal in the account `123456789012` to
     * authenticate with Infisical under the identity
     */
    allowedPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the identity to attach the configuration onto.
     */
    identityId: pulumi.Input<string>;
    /**
     * The endpoint URL for the AWS STS API. This value should be adjusted based on the AWS region you are operating in (e.g.
     * `https://sts.us-east-1.amazonaws.com/`); refer to the list of regional STS endpoints
     * [here](https://docs.aws.amazon.com/general/latest/gr/sts.html).
     */
    stsEndpoint?: pulumi.Input<string>;
}
