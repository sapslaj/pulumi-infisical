// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProjectEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectEnvironmentState, opts?: pulumi.CustomResourceOptions): ProjectEnvironment {
        return new ProjectEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/projectEnvironment:ProjectEnvironment';

    /**
     * Returns true if the given object is an instance of ProjectEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectEnvironment.__pulumiType;
    }

    /**
     * The name of the environment
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The position of the environment
     */
    declare public readonly position: pulumi.Output<number>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The slug of the environment
     */
    declare public readonly slug: pulumi.Output<string>;

    /**
     * Create a ProjectEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectEnvironmentArgs | ProjectEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectEnvironmentState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["position"] = state?.position;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["slug"] = state?.slug;
        } else {
            const args = argsOrState as ProjectEnvironmentArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["position"] = args?.position;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["slug"] = args?.slug;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectEnvironment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectEnvironment resources.
 */
export interface ProjectEnvironmentState {
    /**
     * The name of the environment
     */
    name?: pulumi.Input<string>;
    /**
     * The position of the environment
     */
    position?: pulumi.Input<number>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    projectId?: pulumi.Input<string>;
    /**
     * The slug of the environment
     */
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectEnvironment resource.
 */
export interface ProjectEnvironmentArgs {
    /**
     * The name of the environment
     */
    name?: pulumi.Input<string>;
    /**
     * The position of the environment
     */
    position?: pulumi.Input<number>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    projectId: pulumi.Input<string>;
    /**
     * The slug of the environment
     */
    slug: pulumi.Input<string>;
}
