// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppConnectionDatabricks extends pulumi.CustomResource {
    /**
     * Get an existing AppConnectionDatabricks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConnectionDatabricksState, opts?: pulumi.CustomResourceOptions): AppConnectionDatabricks {
        return new AppConnectionDatabricks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/appConnectionDatabricks:AppConnectionDatabricks';

    /**
     * Returns true if the given object is an instance of AppConnectionDatabricks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConnectionDatabricks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConnectionDatabricks.__pulumiType;
    }

    /**
     * The credentials for the Databricks App Connection
     */
    declare public readonly credentials: pulumi.Output<outputs.AppConnectionDatabricksCredentials>;
    /**
     * The hash of the Databricks App Connection credentials
     */
    declare public /*out*/ readonly credentialsHash: pulumi.Output<string>;
    /**
     * An optional description for the Databricks App Connection.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The method used to authenticate with Databricks. Possible values are: service-principal
     */
    declare public readonly method: pulumi.Output<string>;
    /**
     * The name of the Databricks App Connection to create. Must be slug-friendly
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a AppConnectionDatabricks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConnectionDatabricksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConnectionDatabricksArgs | AppConnectionDatabricksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConnectionDatabricksState | undefined;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["credentialsHash"] = state?.credentialsHash;
            resourceInputs["description"] = state?.description;
            resourceInputs["method"] = state?.method;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as AppConnectionDatabricksArgs | undefined;
            if (args?.credentials === undefined && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if (args?.method === undefined && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            resourceInputs["credentials"] = args?.credentials;
            resourceInputs["description"] = args?.description;
            resourceInputs["method"] = args?.method;
            resourceInputs["name"] = args?.name;
            resourceInputs["credentialsHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConnectionDatabricks.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppConnectionDatabricks resources.
 */
export interface AppConnectionDatabricksState {
    /**
     * The credentials for the Databricks App Connection
     */
    credentials?: pulumi.Input<inputs.AppConnectionDatabricksCredentials>;
    /**
     * The hash of the Databricks App Connection credentials
     */
    credentialsHash?: pulumi.Input<string>;
    /**
     * An optional description for the Databricks App Connection.
     */
    description?: pulumi.Input<string>;
    /**
     * The method used to authenticate with Databricks. Possible values are: service-principal
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the Databricks App Connection to create. Must be slug-friendly
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppConnectionDatabricks resource.
 */
export interface AppConnectionDatabricksArgs {
    /**
     * The credentials for the Databricks App Connection
     */
    credentials: pulumi.Input<inputs.AppConnectionDatabricksCredentials>;
    /**
     * An optional description for the Databricks App Connection.
     */
    description?: pulumi.Input<string>;
    /**
     * The method used to authenticate with Databricks. Possible values are: service-principal
     */
    method: pulumi.Input<string>;
    /**
     * The name of the Databricks App Connection to create. Must be slug-friendly
     */
    name?: pulumi.Input<string>;
}
